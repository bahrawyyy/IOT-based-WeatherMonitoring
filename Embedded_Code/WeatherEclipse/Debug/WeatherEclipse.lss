
WeatherEclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a2  00800060  00003b52  00003be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  00800202  00800202  00003d88  2**0
                  ALLOC
  3 .stab         00003990  00000000  00000000  00003d88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000023cc  00000000  00000000  00007718  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00009ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00009ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00009eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000c4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000d998  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000eca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000ee84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000f18b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fba5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 30       	cpi	r26, 0x02	; 2
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e0       	ldi	r26, 0x02	; 2
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 31       	cpi	r26, 0x15	; 21
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <main>
      8a:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 1c 	jmp	0x3986	; 0x3986 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e7       	ldi	r26, 0x79	; 121
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 1c 	jmp	0x399e	; 0x399e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 1c 	jmp	0x399e	; 0x399e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 1c 	jmp	0x3986	; 0x3986 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e7       	ldi	r24, 0x79	; 121
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 1c 	jmp	0x39be	; 0x39be <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 1c 	jmp	0x3996	; 0x3996 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e7       	ldi	r22, 0x79	; 121
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cf 1c 	jmp	0x399e	; 0x399e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cf 1c 	jmp	0x399e	; 0x399e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cf 1c 	jmp	0x399e	; 0x399e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 eb 1c 	jmp	0x39d6	; 0x39d6 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 cc 1c 	jmp	0x3998	; 0x3998 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 e8 1c 	jmp	0x39d0	; 0x39d0 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 ef 1c 	jmp	0x39de	; 0x39de <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 cb 1c 	jmp	0x3996	; 0x3996 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ef 57       	subi	r30, 0x7F	; 127
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <UART_SendString>:
// It means that it won't get out until it sends the whole string completely
// Then you can deal with the string after it normally
// The disadvantage it will delay the processor until it finishes

void UART_SendString(char *str)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <UART_SendString+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9b 83       	std	Y+3, r25	; 0x03
     ef8:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     efa:	19 82       	std	Y+1, r1	; 0x01
     efc:	0e c0       	rjmp	.+28     	; 0xf1a <UART_SendString+0x30>
	while(str[i] != '\0')
	{
		UART_SendByte(str[i]);
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	9b 81       	ldd	r25, Y+3	; 0x03
     f08:	fc 01       	movw	r30, r24
     f0a:	e2 0f       	add	r30, r18
     f0c:	f3 1f       	adc	r31, r19
     f0e:	80 81       	ld	r24, Z
     f10:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <UART_SendByte>
		i++;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	8f 5f       	subi	r24, 0xFF	; 255
     f18:	89 83       	std	Y+1, r24	; 0x01
// The disadvantage it will delay the processor until it finishes

void UART_SendString(char *str)
{
	uint8_t i = 0;
	while(str[i] != '\0')
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	8a 81       	ldd	r24, Y+2	; 0x02
     f22:	9b 81       	ldd	r25, Y+3	; 0x03
     f24:	fc 01       	movw	r30, r24
     f26:	e2 0f       	add	r30, r18
     f28:	f3 1f       	adc	r31, r19
     f2a:	80 81       	ld	r24, Z
     f2c:	88 23       	and	r24, r24
     f2e:	39 f7       	brne	.-50     	; 0xefe <UART_SendString+0x14>
	{
		UART_SendByte(str[i]);
		i++;
	}
}
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <UART_SendNum>:


void UART_SendNum(uint16_t num)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	2e 97       	sbiw	r28, 0x0e	; 14
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	9e 87       	std	Y+14, r25	; 0x0e
     f52:	8d 87       	std	Y+13, r24	; 0x0d
	uint8_t ch[10],i=0,j=0;
     f54:	1a 82       	std	Y+2, r1	; 0x02
     f56:	19 82       	std	Y+1, r1	; 0x01
	if(num == 0)
     f58:	8d 85       	ldd	r24, Y+13	; 0x0d
     f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	11 f5       	brne	.+68     	; 0xfa4 <UART_SendNum+0x68>
	{
		UART_SendByte('0');
     f60:	80 e3       	ldi	r24, 0x30	; 48
     f62:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <UART_SendByte>
     f66:	39 c0       	rjmp	.+114    	; 0xfda <UART_SendNum+0x9e>
	}
	else
	{
		while(num)
		{
			ch[i] = num % 10 + '0';  //To convert int to char
     f68:	8a 81       	ldd	r24, Y+2	; 0x02
     f6a:	e8 2f       	mov	r30, r24
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f70:	9e 85       	ldd	r25, Y+14	; 0x0e
     f72:	2a e0       	ldi	r18, 0x0A	; 10
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	b9 01       	movw	r22, r18
     f78:	0e 94 8d 1c 	call	0x391a	; 0x391a <__udivmodhi4>
     f7c:	28 2f       	mov	r18, r24
     f7e:	20 5d       	subi	r18, 0xD0	; 208
     f80:	ce 01       	movw	r24, r28
     f82:	03 96       	adiw	r24, 0x03	; 3
     f84:	e8 0f       	add	r30, r24
     f86:	f9 1f       	adc	r31, r25
     f88:	20 83       	st	Z, r18
			num /= 10;
     f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8e:	2a e0       	ldi	r18, 0x0A	; 10
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	b9 01       	movw	r22, r18
     f94:	0e 94 8d 1c 	call	0x391a	; 0x391a <__udivmodhi4>
     f98:	cb 01       	movw	r24, r22
     f9a:	9e 87       	std	Y+14, r25	; 0x0e
     f9c:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	8f 5f       	subi	r24, 0xFF	; 255
     fa2:	8a 83       	std	Y+2, r24	; 0x02
	{
		UART_SendByte('0');
	}
	else
	{
		while(num)
     fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
     fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	f1 f6       	brne	.-68     	; 0xf68 <UART_SendNum+0x2c>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
     fb0:	11 c0       	rjmp	.+34     	; 0xfd4 <UART_SendNum+0x98>
		{
			UART_SendByte(ch[j-1]);
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	88 2f       	mov	r24, r24
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 01       	movw	r18, r24
     fba:	21 50       	subi	r18, 0x01	; 1
     fbc:	30 40       	sbci	r19, 0x00	; 0
     fbe:	ce 01       	movw	r24, r28
     fc0:	03 96       	adiw	r24, 0x03	; 3
     fc2:	fc 01       	movw	r30, r24
     fc4:	e2 0f       	add	r30, r18
     fc6:	f3 1f       	adc	r31, r19
     fc8:	80 81       	ld	r24, Z
     fca:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <UART_SendByte>
		{
			ch[i] = num % 10 + '0';  //To convert int to char
			num /= 10;
			i++;
		} //Thus number entered is reversed so, we want to display it correctly
		for(j=i;j>0;j--)
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	81 50       	subi	r24, 0x01	; 1
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	88 23       	and	r24, r24
     fd8:	61 f7       	brne	.-40     	; 0xfb2 <UART_SendNum+0x76>
		{
			UART_SendByte(ch[j-1]);
		}
	}
}
     fda:	2e 96       	adiw	r28, 0x0e	; 14
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	cf 91       	pop	r28
     fe8:	df 91       	pop	r29
     fea:	08 95       	ret

00000fec <UART_ReceiveString>:

/* Also a synchronous */

void UART_ReceiveString(uint8_t *str)
{
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	00 d0       	rcall	.+0      	; 0xff6 <UART_ReceiveString+0xa>
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	9b 83       	std	Y+3, r25	; 0x03
     ffe:	8a 83       	std	Y+2, r24	; 0x02
	// We need a buffer(an array of n elements) to store the string
	// As the UDR will just store a byte
	// We will consider that if he sends a # then the data has finished

	uint8_t i = 0;
    1000:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_ReceiveByte();
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	9b 81       	ldd	r25, Y+3	; 0x03
    100c:	8c 01       	movw	r16, r24
    100e:	02 0f       	add	r16, r18
    1010:	13 1f       	adc	r17, r19
    1012:	0e 94 85 09 	call	0x130a	; 0x130a <UART_ReceiveByte>
    1016:	f8 01       	movw	r30, r16
    1018:	80 83       	st	Z, r24
    101a:	0f c0       	rjmp	.+30     	; 0x103a <UART_ReceiveString+0x4e>

	// We must call it once before the while as it is by default empty, so
	// it isn't a #, so it won't go inside the while, you can do it by do while also
	while(str[i] != 0x0d)   // until enter (0x0d in Proteus) it differs in HW
	{                       // It will send 0x0A then 0x0d
		i++;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_ReceiveByte();
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	8c 01       	movw	r16, r24
    102e:	02 0f       	add	r16, r18
    1030:	13 1f       	adc	r17, r19
    1032:	0e 94 85 09 	call	0x130a	; 0x130a <UART_ReceiveByte>
    1036:	f8 01       	movw	r30, r16
    1038:	80 83       	st	Z, r24
	uint8_t i = 0;
	str[i] = UART_ReceiveByte();

	// We must call it once before the while as it is by default empty, so
	// it isn't a #, so it won't go inside the while, you can do it by do while also
	while(str[i] != 0x0d)   // until enter (0x0d in Proteus) it differs in HW
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8a 81       	ldd	r24, Y+2	; 0x02
    1042:	9b 81       	ldd	r25, Y+3	; 0x03
    1044:	fc 01       	movw	r30, r24
    1046:	e2 0f       	add	r30, r18
    1048:	f3 1f       	adc	r31, r19
    104a:	80 81       	ld	r24, Z
    104c:	8d 30       	cpi	r24, 0x0D	; 13
    104e:	31 f7       	brne	.-52     	; 0x101c <UART_ReceiveString+0x30>
	{                       // It will send 0x0A then 0x0d
		i++;
		str[i] = UART_ReceiveByte();
	}
	str[i] = '\0';
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	fc 01       	movw	r30, r24
    105c:	e2 0f       	add	r30, r18
    105e:	f3 1f       	adc	r31, r19
    1060:	10 82       	st	Z, r1



}
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	08 95       	ret

00001072 <UART_SendString_MyProtocol>:
/************************************************************************/



void UART_SendString_MyProtocol(uint8_t *str)
{
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	00 d0       	rcall	.+0      	; 0x1078 <UART_SendString_MyProtocol+0x6>
    1078:	00 d0       	rcall	.+0      	; 0x107a <UART_SendString_MyProtocol+0x8>
    107a:	00 d0       	rcall	.+0      	; 0x107c <UART_SendString_MyProtocol+0xa>
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62
    1080:	9e 83       	std	Y+6, r25	; 0x06
    1082:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t i = 0, length = 0;
    1084:	1c 82       	std	Y+4, r1	; 0x04
    1086:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t sum = 0;
    1088:	1a 82       	std	Y+2, r1	; 0x02
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	14 c0       	rjmp	.+40     	; 0x10b6 <UART_SendString_MyProtocol+0x44>
	// Calculate the length of the string
	while(str[length] != '\0')
	{
		sum += str[length];   // Calculate the sum of the characters
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	8d 81       	ldd	r24, Y+5	; 0x05
    1096:	9e 81       	ldd	r25, Y+6	; 0x06
    1098:	fc 01       	movw	r30, r24
    109a:	e2 0f       	add	r30, r18
    109c:	f3 1f       	adc	r31, r19
    109e:	80 81       	ld	r24, Z
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	9a 81       	ldd	r25, Y+2	; 0x02
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
		length++;
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	8f 5f       	subi	r24, 0xFF	; 255
    10b4:	8b 83       	std	Y+3, r24	; 0x03
void UART_SendString_MyProtocol(uint8_t *str)
{
	uint8_t i = 0, length = 0;
	uint16_t sum = 0;
	// Calculate the length of the string
	while(str[length] != '\0')
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	9e 81       	ldd	r25, Y+6	; 0x06
    10c0:	fc 01       	movw	r30, r24
    10c2:	e2 0f       	add	r30, r18
    10c4:	f3 1f       	adc	r31, r19
    10c6:	80 81       	ld	r24, Z
    10c8:	88 23       	and	r24, r24
    10ca:	09 f7       	brne	.-62     	; 0x108e <UART_SendString_MyProtocol+0x1c>
	{
		sum += str[length];   // Calculate the sum of the characters
		length++;
	}
	UART_SendByte(length);  // First send the no. of characters
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <UART_SendByte>
    10d2:	0e c0       	rjmp	.+28     	; 0x10f0 <UART_SendString_MyProtocol+0x7e>
	while(str[i] != '\0')
	{
		UART_SendByte(str[i]);   // Send each character
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	9e 81       	ldd	r25, Y+6	; 0x06
    10de:	fc 01       	movw	r30, r24
    10e0:	e2 0f       	add	r30, r18
    10e2:	f3 1f       	adc	r31, r19
    10e4:	80 81       	ld	r24, Z
    10e6:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <UART_SendByte>
		i++;
    10ea:	8c 81       	ldd	r24, Y+4	; 0x04
    10ec:	8f 5f       	subi	r24, 0xFF	; 255
    10ee:	8c 83       	std	Y+4, r24	; 0x04
	{
		sum += str[length];   // Calculate the sum of the characters
		length++;
	}
	UART_SendByte(length);  // First send the no. of characters
	while(str[i] != '\0')
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	fc 01       	movw	r30, r24
    10fc:	e2 0f       	add	r30, r18
    10fe:	f3 1f       	adc	r31, r19
    1100:	80 81       	ld	r24, Z
    1102:	88 23       	and	r24, r24
    1104:	39 f7       	brne	.-50     	; 0x10d4 <UART_SendString_MyProtocol+0x62>
	{
		UART_SendByte(str[i]);   // Send each character
		i++;
	}
	// Send the sum divided into two bytes
	UART_SendByte((uint8_t)sum);   // first send the least byte
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <UART_SendByte>
	UART_SendByte((uint8_t)(sum>>8));   // Then the most
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	9a 81       	ldd	r25, Y+2	; 0x02
    1110:	89 2f       	mov	r24, r25
    1112:	99 27       	eor	r25, r25
    1114:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <UART_SendByte>
}
    1118:	26 96       	adiw	r28, 0x06	; 6
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <UART_ReceiveString_MyProtocol>:




uint8_t UART_ReceiveString_MyProtocol(uint8_t *str)
{
    112a:	0f 93       	push	r16
    112c:	1f 93       	push	r17
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	2d 97       	sbiw	r28, 0x0d	; 13
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	f8 94       	cli
    113c:	de bf       	out	0x3e, r29	; 62
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	cd bf       	out	0x3d, r28	; 61
    1142:	9c 87       	std	Y+12, r25	; 0x0c
    1144:	8b 87       	std	Y+11, r24	; 0x0b
	// Check for errors, then put only the useful data in the buffer (str)
	uint8_t i,length = UART_ReceiveByte();  // Receiving the length
    1146:	0e 94 85 09 	call	0x130a	; 0x130a <UART_ReceiveByte>
    114a:	89 87       	std	Y+9, r24	; 0x09
	uint16_t sum_receive=0,sum_call=0;
    114c:	18 86       	std	Y+8, r1	; 0x08
    114e:	1f 82       	std	Y+7, r1	; 0x07
    1150:	1e 82       	std	Y+6, r1	; 0x06
    1152:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t first_byte, second_byte;
	// Receiving the data and put it in the buffer
	// You must receive it
	for(i=0;i<length;i++)
    1154:	1a 86       	std	Y+10, r1	; 0x0a
    1156:	20 c0       	rjmp	.+64     	; 0x1198 <UART_ReceiveString_MyProtocol+0x6e>
	{
		str[i] = UART_ReceiveByte();
    1158:	8a 85       	ldd	r24, Y+10	; 0x0a
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1160:	9c 85       	ldd	r25, Y+12	; 0x0c
    1162:	8c 01       	movw	r16, r24
    1164:	02 0f       	add	r16, r18
    1166:	13 1f       	adc	r17, r19
    1168:	0e 94 85 09 	call	0x130a	; 0x130a <UART_ReceiveByte>
    116c:	f8 01       	movw	r30, r16
    116e:	80 83       	st	Z, r24
		sum_call += str[i];
    1170:	8a 85       	ldd	r24, Y+10	; 0x0a
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	8b 85       	ldd	r24, Y+11	; 0x0b
    1178:	9c 85       	ldd	r25, Y+12	; 0x0c
    117a:	fc 01       	movw	r30, r24
    117c:	e2 0f       	add	r30, r18
    117e:	f3 1f       	adc	r31, r19
    1180:	80 81       	ld	r24, Z
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	8d 81       	ldd	r24, Y+5	; 0x05
    1188:	9e 81       	ldd	r25, Y+6	; 0x06
    118a:	82 0f       	add	r24, r18
    118c:	93 1f       	adc	r25, r19
    118e:	9e 83       	std	Y+6, r25	; 0x06
    1190:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t i,length = UART_ReceiveByte();  // Receiving the length
	uint16_t sum_receive=0,sum_call=0;
	uint16_t first_byte, second_byte;
	// Receiving the data and put it in the buffer
	// You must receive it
	for(i=0;i<length;i++)
    1192:	8a 85       	ldd	r24, Y+10	; 0x0a
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	8a 87       	std	Y+10, r24	; 0x0a
    1198:	9a 85       	ldd	r25, Y+10	; 0x0a
    119a:	89 85       	ldd	r24, Y+9	; 0x09
    119c:	98 17       	cp	r25, r24
    119e:	e0 f2       	brcs	.-72     	; 0x1158 <UART_ReceiveString_MyProtocol+0x2e>
	{
		str[i] = UART_ReceiveByte();
		sum_call += str[i];
	}
	first_byte = UART_ReceiveByte();
    11a0:	0e 94 85 09 	call	0x130a	; 0x130a <UART_ReceiveByte>
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9c 83       	std	Y+4, r25	; 0x04
    11aa:	8b 83       	std	Y+3, r24	; 0x03
	second_byte = UART_ReceiveByte();
    11ac:	0e 94 85 09 	call	0x130a	; 0x130a <UART_ReceiveByte>
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9a 83       	std	Y+2, r25	; 0x02
    11b6:	89 83       	std	Y+1, r24	; 0x01


	sum_call = first_byte | (second_byte << 8);
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	9a 81       	ldd	r25, Y+2	; 0x02
    11bc:	38 2f       	mov	r19, r24
    11be:	22 27       	eor	r18, r18
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	82 2b       	or	r24, r18
    11c6:	93 2b       	or	r25, r19
    11c8:	9e 83       	std	Y+6, r25	; 0x06
    11ca:	8d 83       	std	Y+5, r24	; 0x05

	/******************* Test Code *********************/
	LCD_GoTo(0,4);
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	64 e0       	ldi	r22, 0x04	; 4
    11d0:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_GoTo>
	Lcd_displayNum(length);
    11d4:	89 85       	ldd	r24, Y+9	; 0x09
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	0e 94 cd 14 	call	0x299a	; 0x299a <Lcd_displayNum>
	LCD_GoTo(0,7);
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	67 e0       	ldi	r22, 0x07	; 7
    11e2:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_GoTo>
	Lcd_displayNum(sum_call);
    11e6:	8d 81       	ldd	r24, Y+5	; 0x05
    11e8:	9e 81       	ldd	r25, Y+6	; 0x06
    11ea:	0e 94 cd 14 	call	0x299a	; 0x299a <Lcd_displayNum>
	LCD_GoTo(0,12);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	6c e0       	ldi	r22, 0x0C	; 12
    11f2:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_GoTo>
	Lcd_displayNum(sum_receive);
    11f6:	8f 81       	ldd	r24, Y+7	; 0x07
    11f8:	98 85       	ldd	r25, Y+8	; 0x08
    11fa:	0e 94 cd 14 	call	0x299a	; 0x299a <Lcd_displayNum>
	///////////////////////////////////////////////////


	if(sum_call == sum_receive){
    11fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1200:	3e 81       	ldd	r19, Y+6	; 0x06
    1202:	8f 81       	ldd	r24, Y+7	; 0x07
    1204:	98 85       	ldd	r25, Y+8	; 0x08
    1206:	28 17       	cp	r18, r24
    1208:	39 07       	cpc	r19, r25
    120a:	19 f4       	brne	.+6      	; 0x1212 <UART_ReceiveString_MyProtocol+0xe8>
		return 1;
    120c:	f1 e0       	ldi	r31, 0x01	; 1
    120e:	fd 87       	std	Y+13, r31	; 0x0d
    1210:	01 c0       	rjmp	.+2      	; 0x1214 <UART_ReceiveString_MyProtocol+0xea>
	}else{
		return 0;
    1212:	1d 86       	std	Y+13, r1	; 0x0d
    1214:	8d 85       	ldd	r24, Y+13	; 0x0d





}
    1216:	2d 96       	adiw	r28, 0x0d	; 13
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	1f 91       	pop	r17
    1228:	0f 91       	pop	r16
    122a:	08 95       	ret

0000122c <UART_Init>:
const uint16_t BaudRateArray[TOTAL_SPEED_MODE][TOTAL_CPU_F][TOTAL_BAUD_RATE]=
{{{103, 51, 25, 16, 12,  8},{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34}},
{{207,103, 51, 34, 25, 16},{416,207,103, 68 ,51, 34},{832,416,207,138,103, 68}}};

void UART_Init(void)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	00 d0       	rcall	.+0      	; 0x1232 <UART_Init+0x6>
    1232:	0f 92       	push	r0
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
	uint8_t  UCSRC_var=0;
    1238:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t UBRR_var=0;
    123a:	1a 82       	std	Y+2, r1	; 0x02
    123c:	19 82       	std	Y+1, r1	; 0x01
	/***************************** transmission speed***************************/
	#if (SPEED_MODE==NORMAL_SPEED)
	CLR_BIT(UCSRA,U2X);
	#elif (SPEED_MODE==DOUBLE_SPEED)
	SET_BIT(UCSRA,U2X);
    123e:	ab e2       	ldi	r26, 0x2B	; 43
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	eb e2       	ldi	r30, 0x2B	; 43
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	82 60       	ori	r24, 0x02	; 2
    124a:	8c 93       	st	X, r24
	#endif

	//******************set URSEL to write data to UCSRC register***************/
	SET_BIT(UCSRC_var,URSEL);
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	80 68       	ori	r24, 0x80	; 128
    1250:	8b 83       	std	Y+3, r24	; 0x03

	//********************************synch***********************************/
	#if (SYNCH_MODE==SYNCH)
	SET_BIT(UCSRC_var,UMSEL)
	#elif (SYNCH_MODE==ASYNCH)
	CLR_BIT(UCSRC_var,UMSEL);
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	8f 7b       	andi	r24, 0xBF	; 191
    1256:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRC_var,UPM1);
	#elif (PARITY_MODE==EVEN_PARITY)
	CLR_BIT(UCSRC_var,UPM0);
	SET_BIT(UCSRC_var,UPM1);
	#elif (PARITY_MODE==ODD_PARITY)
	SET_BIT(UCSRC_var,UPM0);
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	80 61       	ori	r24, 0x10	; 16
    125c:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UPM1);
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	80 62       	ori	r24, 0x20	; 32
    1262:	8b 83       	std	Y+3, r24	; 0x03
	#elif (N_DATA_BITS==_7_DATA_BITS)
	CLR_BIT(UCSRC_var,UCSZ0);
	SET_BIT(UCSRC_var,UCSZ1);
	CLR_BIT(UCSRB,UCSZ2);
	#elif (N_DATA_BITS==_8_DATA_BITS)
	SET_BIT(UCSRC_var,UCSZ0);
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	82 60       	ori	r24, 0x02	; 2
    1268:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(UCSRC_var,UCSZ1);
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	84 60       	ori	r24, 0x04	; 4
    126e:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(UCSRB,UCSZ2);
    1270:	aa e2       	ldi	r26, 0x2A	; 42
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ea e2       	ldi	r30, 0x2A	; 42
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8b 7f       	andi	r24, 0xFB	; 251
    127c:	8c 93       	st	X, r24
	#endif
	//************************Stop bits*******************************/
	#if (N_STOP_BITS==ONE_STOP_BIT)
	CLR_BIT(UCSRC_var,USBS);
	#elif (N_STOP_BITS==TWO_STOP_BIT)
	SET_BIT(UCSRC_var,USBS);
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	88 60       	ori	r24, 0x08	; 8
    1282:	8b 83       	std	Y+3, r24	; 0x03
	#endif
	//*****************set UCSRC value   *******************************/
	UCSRC=UCSRC_var;
    1284:	e0 e4       	ldi	r30, 0x40	; 64
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	80 83       	st	Z, r24

	//************************Baud rate *******************************/

	UBRR_var = BaudRateArray[SPEED_MODE][CPU_F][BUAD_RATE];
    128c:	80 91 f9 01 	lds	r24, 0x01F9
    1290:	90 91 fa 01 	lds	r25, 0x01FA
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (uint8_t)(UBRR_var>>8);
    1298:	e0 e4       	ldi	r30, 0x40	; 64
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	9a 81       	ldd	r25, Y+2	; 0x02
    12a0:	89 2f       	mov	r24, r25
    12a2:	99 27       	eor	r25, r25
    12a4:	80 83       	st	Z, r24
	UBRRL = (uint8_t)UBRR_var;
    12a6:	e9 e2       	ldi	r30, 0x29	; 41
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	80 83       	st	Z, r24

	//************************Enable  *******************************/
	//enable UART  receiver.
	SET_BIT(UCSRB,RXEN);
    12ae:	aa e2       	ldi	r26, 0x2A	; 42
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	ea e2       	ldi	r30, 0x2A	; 42
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	80 61       	ori	r24, 0x10	; 16
    12ba:	8c 93       	st	X, r24
	//enable UART  transmitter .
	SET_BIT(UCSRB,TXEN);
    12bc:	aa e2       	ldi	r26, 0x2A	; 42
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	ea e2       	ldi	r30, 0x2A	; 42
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	88 60       	ori	r24, 0x08	; 8
    12c8:	8c 93       	st	X, r24
}
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <UART_SendByte>:



void UART_SendByte(uint8_t data)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the buffer is empty and ready for transmitting
	a new byte so wait until this flag is set to one and it will cleared by
	hardware when u write new data to buffer */
	while(!GET_BIT(UCSRA,UDRE));   // Busy wait polling
    12e2:	eb e2       	ldi	r30, 0x2B	; 43
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	82 95       	swap	r24
    12ea:	86 95       	lsr	r24
    12ec:	87 70       	andi	r24, 0x07	; 7
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	81 70       	andi	r24, 0x01	; 1
    12f4:	90 70       	andi	r25, 0x00	; 0
    12f6:	00 97       	sbiw	r24, 0x00	; 0
    12f8:	a1 f3       	breq	.-24     	; 0x12e2 <UART_SendByte+0xc>
	UDR = data;
    12fa:	ec e2       	ldi	r30, 0x2C	; 44
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	80 83       	st	Z, r24
}
    1302:	0f 90       	pop	r0
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <UART_ReceiveByte>:



uint8_t UART_ReceiveByte(void)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receives data so wait until this flag
	is set to one and it will be cleared by hardware when u read data  */
	while(!GET_BIT(UCSRA,RXC));  // When the data arrives
    1312:	eb e2       	ldi	r30, 0x2B	; 43
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	88 23       	and	r24, r24
    131a:	dc f7       	brge	.-10     	; 0x1312 <UART_ReceiveByte+0x8>
	return UDR;
    131c:	ec e2       	ldi	r30, 0x2C	; 44
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <UART_ReceiveNoBlock>:


uint8_t UART_ReceiveNoBlock(uint8_t *Pdata)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	00 d0       	rcall	.+0      	; 0x132e <UART_ReceiveNoBlock+0x6>
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	9a 83       	std	Y+2, r25	; 0x02
    1336:	89 83       	std	Y+1, r24	; 0x01
	// This way it will solve the problem of waiting until data received
	// Instead we will check every time if the data arrived or not
	if(GET_BIT(UCSRA,RXC)){
    1338:	eb e2       	ldi	r30, 0x2B	; 43
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	88 23       	and	r24, r24
    1340:	4c f4       	brge	.+18     	; 0x1354 <UART_ReceiveNoBlock+0x2c>
		*Pdata = UDR;
    1342:	ec e2       	ldi	r30, 0x2C	; 44
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	e9 81       	ldd	r30, Y+1	; 0x01
    134a:	fa 81       	ldd	r31, Y+2	; 0x02
    134c:	80 83       	st	Z, r24
		return 1;
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	8b 83       	std	Y+3, r24	; 0x03
    1352:	01 c0       	rjmp	.+2      	; 0x1356 <UART_ReceiveNoBlock+0x2e>
	}else{
		return 0;
    1354:	1b 82       	std	Y+3, r1	; 0x03
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <timer_init>:

/************************************************************************/
/* Intialaization of timer 0                                        */
/************************************************************************/

void timer_init(void){
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
	//Initial value
	TCNT0 = 0;
    136c:	e2 e5       	ldi	r30, 0x52	; 82
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	10 82       	st	Z, r1

	#if Timer0_Mode_Select == Timer0_Normal_Mode
	//Normal mode
	CLR_BIT(TCCR0,WGM00);
    1372:	a3 e5       	ldi	r26, 0x53	; 83
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e3 e5       	ldi	r30, 0x53	; 83
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	8f 7b       	andi	r24, 0xBF	; 191
    137e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,WGM01);
    1380:	a3 e5       	ldi	r26, 0x53	; 83
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e3 e5       	ldi	r30, 0x53	; 83
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	87 7f       	andi	r24, 0xF7	; 247
    138c:	8c 93       	st	X, r24
	#if TIME0_INTERRUPT_MODE == TIME0_TOV
	SET_BIT(TIMSK,TOIE0);
	#elif TIME0_INTERRUPT_MODE == TIME0_TOC
	SET_BIT(TIMSK,OCIE0);
	#endif
}
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <waitOVF_timer0>:

/************************************************************************/
/* Wati until the overflow happens                                                                     */
/************************************************************************/

void waitOVF_timer0(void){
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(TIFR,TOV0)==0);  //When the overflow happens(Not used in interrupt mode)
    139c:	e8 e5       	ldi	r30, 0x58	; 88
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	88 2f       	mov	r24, r24
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	90 70       	andi	r25, 0x00	; 0
    13aa:	00 97       	sbiw	r24, 0x00	; 0
    13ac:	b9 f3       	breq	.-18     	; 0x139c <waitOVF_timer0+0x8>
	SET_BIT(TIFR,TOV0);   //Clear the overflow manually
    13ae:	a8 e5       	ldi	r26, 0x58	; 88
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e8 e5       	ldi	r30, 0x58	; 88
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	81 60       	ori	r24, 0x01	; 1
    13ba:	8c 93       	st	X, r24
}
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <timer_stop>:

/************************************************************************/
/* Stop the timer                                                                     */
/************************************************************************/

void timer_stop(void){
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0x00;
    13ca:	e3 e5       	ldi	r30, 0x53	; 83
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	10 82       	st	Z, r1
}
    13d0:	cf 91       	pop	r28
    13d2:	df 91       	pop	r29
    13d4:	08 95       	ret

000013d6 <Timer0_delay_ms>:

/************************************************************************/
/* To  generate time delay in milliseconds                      */
/************************************************************************/

void Timer0_delay_ms(uint32_t delay){
    13d6:	ef 92       	push	r14
    13d8:	ff 92       	push	r15
    13da:	0f 93       	push	r16
    13dc:	1f 93       	push	r17
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	cd b7       	in	r28, 0x3d	; 61
    13e4:	de b7       	in	r29, 0x3e	; 62
    13e6:	2f 97       	sbiw	r28, 0x0f	; 15
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	f8 94       	cli
    13ec:	de bf       	out	0x3e, r29	; 62
    13ee:	0f be       	out	0x3f, r0	; 63
    13f0:	cd bf       	out	0x3d, r28	; 61
    13f2:	6c 87       	std	Y+12, r22	; 0x0c
    13f4:	7d 87       	std	Y+13, r23	; 0x0d
    13f6:	8e 87       	std	Y+14, r24	; 0x0e
    13f8:	9f 87       	std	Y+15, r25	; 0x0f
	// Tick time is 256/10^6 Prescalar/F_CPU Tick time = 0.256 ms
	// Tick time is 256/(16*10^6) Prescalar/F_CPU Tick time = 0.016 ms
	uint32_t MaxDelay = 256 * 0.016;
    13fa:	84 e0       	ldi	r24, 0x04	; 4
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a0 e0       	ldi	r26, 0x00	; 0
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	88 87       	std	Y+8, r24	; 0x08
    1404:	99 87       	std	Y+9, r25	; 0x09
    1406:	aa 87       	std	Y+10, r26	; 0x0a
    1408:	bb 87       	std	Y+11, r27	; 0x0b
	uint32_t NUM_OF_OVERFLOW = ceil(delay/MaxDelay);
    140a:	8c 85       	ldd	r24, Y+12	; 0x0c
    140c:	9d 85       	ldd	r25, Y+13	; 0x0d
    140e:	ae 85       	ldd	r26, Y+14	; 0x0e
    1410:	bf 85       	ldd	r27, Y+15	; 0x0f
    1412:	28 85       	ldd	r18, Y+8	; 0x08
    1414:	39 85       	ldd	r19, Y+9	; 0x09
    1416:	4a 85       	ldd	r20, Y+10	; 0x0a
    1418:	5b 85       	ldd	r21, Y+11	; 0x0b
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    1422:	da 01       	movw	r26, r20
    1424:	c9 01       	movw	r24, r18
    1426:	bc 01       	movw	r22, r24
    1428:	cd 01       	movw	r24, r26
    142a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <ceil>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	bc 01       	movw	r22, r24
    1440:	cd 01       	movw	r24, r26
    1442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8c 83       	std	Y+4, r24	; 0x04
    144c:	9d 83       	std	Y+5, r25	; 0x05
    144e:	ae 83       	std	Y+6, r26	; 0x06
    1450:	bf 83       	std	Y+7, r27	; 0x07
	uint8_t InitialVal = 256 - ((delay/0.016)/NUM_OF_OVERFLOW);
    1452:	6c 85       	ldd	r22, Y+12	; 0x0c
    1454:	7d 85       	ldd	r23, Y+13	; 0x0d
    1456:	8e 85       	ldd	r24, Y+14	; 0x0e
    1458:	9f 85       	ldd	r25, Y+15	; 0x0f
    145a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	bc 01       	movw	r22, r24
    1464:	cd 01       	movw	r24, r26
    1466:	2f e6       	ldi	r18, 0x6F	; 111
    1468:	32 e1       	ldi	r19, 0x12	; 18
    146a:	43 e8       	ldi	r20, 0x83	; 131
    146c:	5c eb       	ldi	r21, 0xBC	; 188
    146e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1472:	dc 01       	movw	r26, r24
    1474:	cb 01       	movw	r24, r22
    1476:	7c 01       	movw	r14, r24
    1478:	8d 01       	movw	r16, r26
    147a:	6c 81       	ldd	r22, Y+4	; 0x04
    147c:	7d 81       	ldd	r23, Y+5	; 0x05
    147e:	8e 81       	ldd	r24, Y+6	; 0x06
    1480:	9f 81       	ldd	r25, Y+7	; 0x07
    1482:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1486:	9b 01       	movw	r18, r22
    1488:	ac 01       	movw	r20, r24
    148a:	c8 01       	movw	r24, r16
    148c:	b7 01       	movw	r22, r14
    148e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1492:	dc 01       	movw	r26, r24
    1494:	cb 01       	movw	r24, r22
    1496:	bc 01       	movw	r22, r24
    1498:	cd 01       	movw	r24, r26
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e8       	ldi	r20, 0x80	; 128
    14a0:	53 e4       	ldi	r21, 0x43	; 67
    14a2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	bc 01       	movw	r22, r24
    14ac:	cd 01       	movw	r24, r26
    14ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	8b 83       	std	Y+3, r24	; 0x03


	TCNT0 = InitialVal;
    14b8:	e2 e5       	ldi	r30, 0x52	; 82
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	80 83       	st	Z, r24
	TCCR0 |= (1<<2);    // Choose the prescalar so, the timer will start
    14c0:	a3 e5       	ldi	r26, 0x53	; 83
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e3 e5       	ldi	r30, 0x53	; 83
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	84 60       	ori	r24, 0x04	; 4
    14cc:	8c 93       	st	X, r24
	unsigned int overflowcounter = 0;
    14ce:	1a 82       	std	Y+2, r1	; 0x02
    14d0:	19 82       	std	Y+1, r1	; 0x01
    14d2:	07 c0       	rjmp	.+14     	; 0x14e2 <Timer0_delay_ms+0x10c>
	while(overflowcounter < NUM_OF_OVERFLOW){
		waitOVF_timer0();
    14d4:	0e 94 ca 09 	call	0x1394	; 0x1394 <waitOVF_timer0>
		overflowcounter++;
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	9a 83       	std	Y+2, r25	; 0x02
    14e0:	89 83       	std	Y+1, r24	; 0x01


	TCNT0 = InitialVal;
	TCCR0 |= (1<<2);    // Choose the prescalar so, the timer will start
	unsigned int overflowcounter = 0;
	while(overflowcounter < NUM_OF_OVERFLOW){
    14e2:	89 81       	ldd	r24, Y+1	; 0x01
    14e4:	9a 81       	ldd	r25, Y+2	; 0x02
    14e6:	9c 01       	movw	r18, r24
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	9d 81       	ldd	r25, Y+5	; 0x05
    14f0:	ae 81       	ldd	r26, Y+6	; 0x06
    14f2:	bf 81       	ldd	r27, Y+7	; 0x07
    14f4:	28 17       	cp	r18, r24
    14f6:	39 07       	cpc	r19, r25
    14f8:	4a 07       	cpc	r20, r26
    14fa:	5b 07       	cpc	r21, r27
    14fc:	58 f3       	brcs	.-42     	; 0x14d4 <Timer0_delay_ms+0xfe>
		waitOVF_timer0();
		overflowcounter++;
	}
	overflowcounter = 0;
    14fe:	1a 82       	std	Y+2, r1	; 0x02
    1500:	19 82       	std	Y+1, r1	; 0x01
	timer_stop();
    1502:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_stop>
}
    1506:	2f 96       	adiw	r28, 0x0f	; 15
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	cf 91       	pop	r28
    1514:	df 91       	pop	r29
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	ff 90       	pop	r15
    151c:	ef 90       	pop	r14
    151e:	08 95       	ret

00001520 <Timer0_delay_us>:



void Timer0_delay_us(uint32_t delay){
    1520:	ef 92       	push	r14
    1522:	ff 92       	push	r15
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	2f 97       	sbiw	r28, 0x0f	; 15
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	6c 87       	std	Y+12, r22	; 0x0c
    153e:	7d 87       	std	Y+13, r23	; 0x0d
    1540:	8e 87       	std	Y+14, r24	; 0x0e
    1542:	9f 87       	std	Y+15, r25	; 0x0f
	// Tick time is 256/10^6 Prescalar/F_CPU Tick time = 0.256 ms
	uint32_t MaxDelay = 256 * 0.016;
    1544:	84 e0       	ldi	r24, 0x04	; 4
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a0 e0       	ldi	r26, 0x00	; 0
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	88 87       	std	Y+8, r24	; 0x08
    154e:	99 87       	std	Y+9, r25	; 0x09
    1550:	aa 87       	std	Y+10, r26	; 0x0a
    1552:	bb 87       	std	Y+11, r27	; 0x0b
	uint32_t NUM_OF_OVERFLOW = ceil((delay/1000)/MaxDelay);
    1554:	8c 85       	ldd	r24, Y+12	; 0x0c
    1556:	9d 85       	ldd	r25, Y+13	; 0x0d
    1558:	ae 85       	ldd	r26, Y+14	; 0x0e
    155a:	bf 85       	ldd	r27, Y+15	; 0x0f
    155c:	28 ee       	ldi	r18, 0xE8	; 232
    155e:	33 e0       	ldi	r19, 0x03	; 3
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	bc 01       	movw	r22, r24
    1566:	cd 01       	movw	r24, r26
    1568:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    156c:	da 01       	movw	r26, r20
    156e:	c9 01       	movw	r24, r18
    1570:	28 85       	ldd	r18, Y+8	; 0x08
    1572:	39 85       	ldd	r19, Y+9	; 0x09
    1574:	4a 85       	ldd	r20, Y+10	; 0x0a
    1576:	5b 85       	ldd	r21, Y+11	; 0x0b
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    1580:	da 01       	movw	r26, r20
    1582:	c9 01       	movw	r24, r18
    1584:	bc 01       	movw	r22, r24
    1586:	cd 01       	movw	r24, r26
    1588:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    158c:	dc 01       	movw	r26, r24
    158e:	cb 01       	movw	r24, r22
    1590:	bc 01       	movw	r22, r24
    1592:	cd 01       	movw	r24, r26
    1594:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <ceil>
    1598:	dc 01       	movw	r26, r24
    159a:	cb 01       	movw	r24, r22
    159c:	bc 01       	movw	r22, r24
    159e:	cd 01       	movw	r24, r26
    15a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	8c 83       	std	Y+4, r24	; 0x04
    15aa:	9d 83       	std	Y+5, r25	; 0x05
    15ac:	ae 83       	std	Y+6, r26	; 0x06
    15ae:	bf 83       	std	Y+7, r27	; 0x07
	uint8_t InitialVal = 256 - (((delay/1000)/0.016)/NUM_OF_OVERFLOW);
    15b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    15b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    15b4:	ae 85       	ldd	r26, Y+14	; 0x0e
    15b6:	bf 85       	ldd	r27, Y+15	; 0x0f
    15b8:	28 ee       	ldi	r18, 0xE8	; 232
    15ba:	33 e0       	ldi	r19, 0x03	; 3
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    15c8:	da 01       	movw	r26, r20
    15ca:	c9 01       	movw	r24, r18
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	2f e6       	ldi	r18, 0x6F	; 111
    15de:	32 e1       	ldi	r19, 0x12	; 18
    15e0:	43 e8       	ldi	r20, 0x83	; 131
    15e2:	5c eb       	ldi	r21, 0xBC	; 188
    15e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	7c 01       	movw	r14, r24
    15ee:	8d 01       	movw	r16, r26
    15f0:	6c 81       	ldd	r22, Y+4	; 0x04
    15f2:	7d 81       	ldd	r23, Y+5	; 0x05
    15f4:	8e 81       	ldd	r24, Y+6	; 0x06
    15f6:	9f 81       	ldd	r25, Y+7	; 0x07
    15f8:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    15fc:	9b 01       	movw	r18, r22
    15fe:	ac 01       	movw	r20, r24
    1600:	c8 01       	movw	r24, r16
    1602:	b7 01       	movw	r22, r14
    1604:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	bc 01       	movw	r22, r24
    160e:	cd 01       	movw	r24, r26
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	40 e8       	ldi	r20, 0x80	; 128
    1616:	53 e4       	ldi	r21, 0x43	; 67
    1618:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	8b 83       	std	Y+3, r24	; 0x03


	TCNT0 = InitialVal;
    162e:	e2 e5       	ldi	r30, 0x52	; 82
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	80 83       	st	Z, r24
	TCCR0 |= (1<<2);    // Choose the prescalar so, the timer will start
    1636:	a3 e5       	ldi	r26, 0x53	; 83
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e3 e5       	ldi	r30, 0x53	; 83
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	84 60       	ori	r24, 0x04	; 4
    1642:	8c 93       	st	X, r24
	unsigned int overflowcounter = 0;
    1644:	1a 82       	std	Y+2, r1	; 0x02
    1646:	19 82       	std	Y+1, r1	; 0x01
    1648:	07 c0       	rjmp	.+14     	; 0x1658 <Timer0_delay_us+0x138>
	while(overflowcounter < NUM_OF_OVERFLOW){
		waitOVF_timer0();
    164a:	0e 94 ca 09 	call	0x1394	; 0x1394 <waitOVF_timer0>
		overflowcounter++;
    164e:	89 81       	ldd	r24, Y+1	; 0x01
    1650:	9a 81       	ldd	r25, Y+2	; 0x02
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	9a 83       	std	Y+2, r25	; 0x02
    1656:	89 83       	std	Y+1, r24	; 0x01


	TCNT0 = InitialVal;
	TCCR0 |= (1<<2);    // Choose the prescalar so, the timer will start
	unsigned int overflowcounter = 0;
	while(overflowcounter < NUM_OF_OVERFLOW){
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	9a 81       	ldd	r25, Y+2	; 0x02
    165c:	9c 01       	movw	r18, r24
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	50 e0       	ldi	r21, 0x00	; 0
    1662:	8c 81       	ldd	r24, Y+4	; 0x04
    1664:	9d 81       	ldd	r25, Y+5	; 0x05
    1666:	ae 81       	ldd	r26, Y+6	; 0x06
    1668:	bf 81       	ldd	r27, Y+7	; 0x07
    166a:	28 17       	cp	r18, r24
    166c:	39 07       	cpc	r19, r25
    166e:	4a 07       	cpc	r20, r26
    1670:	5b 07       	cpc	r21, r27
    1672:	58 f3       	brcs	.-42     	; 0x164a <Timer0_delay_us+0x12a>
		waitOVF_timer0();
		overflowcounter++;
	}
	overflowcounter = 0;
    1674:	1a 82       	std	Y+2, r1	; 0x02
    1676:	19 82       	std	Y+1, r1	; 0x01
	timer_stop();
    1678:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_stop>
}
    167c:	2f 96       	adiw	r28, 0x0f	; 15
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	1f 91       	pop	r17
    168e:	0f 91       	pop	r16
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	08 95       	ret

00001696 <waitOVF_timer2>:

/************************************************************************/
/*                    Timer 2                                           */
/************************************************************************/

void waitOVF_timer2(void){
    1696:	df 93       	push	r29
    1698:	cf 93       	push	r28
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
	while(GET_BIT(TIFR,TOV2)==0);  //When the overflow happens(Not used in interrupt mode)
    169e:	e8 e5       	ldi	r30, 0x58	; 88
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	82 95       	swap	r24
    16a6:	86 95       	lsr	r24
    16a8:	86 95       	lsr	r24
    16aa:	83 70       	andi	r24, 0x03	; 3
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	81 70       	andi	r24, 0x01	; 1
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	99 f3       	breq	.-26     	; 0x169e <waitOVF_timer2+0x8>
	SET_BIT(TIFR,TOV2);   //Clear the overflow manually
    16b8:	a8 e5       	ldi	r26, 0x58	; 88
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e8 e5       	ldi	r30, 0x58	; 88
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	80 64       	ori	r24, 0x40	; 64
    16c4:	8c 93       	st	X, r24
}
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <timer2_stop>:

void timer2_stop(void){
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0x00;
    16d4:	e5 e4       	ldi	r30, 0x45	; 69
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	10 82       	st	Z, r1
}
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <Timer2_delay_ms>:

void Timer2_delay_ms(uint32_t delay){
    16e0:	ef 92       	push	r14
    16e2:	ff 92       	push	r15
    16e4:	0f 93       	push	r16
    16e6:	1f 93       	push	r17
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
    16f0:	2f 97       	sbiw	r28, 0x0f	; 15
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	6c 87       	std	Y+12, r22	; 0x0c
    16fe:	7d 87       	std	Y+13, r23	; 0x0d
    1700:	8e 87       	std	Y+14, r24	; 0x0e
    1702:	9f 87       	std	Y+15, r25	; 0x0f
	// Tick time is 256/10^6 Prescalar/F_CPU Tick time = 0.256 ms
	uint32_t MaxDelay = 256 * 0.256;
    1704:	81 e4       	ldi	r24, 0x41	; 65
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	88 87       	std	Y+8, r24	; 0x08
    170e:	99 87       	std	Y+9, r25	; 0x09
    1710:	aa 87       	std	Y+10, r26	; 0x0a
    1712:	bb 87       	std	Y+11, r27	; 0x0b
	uint32_t NUM_OF_OVERFLOW = ceil(delay/MaxDelay);
    1714:	8c 85       	ldd	r24, Y+12	; 0x0c
    1716:	9d 85       	ldd	r25, Y+13	; 0x0d
    1718:	ae 85       	ldd	r26, Y+14	; 0x0e
    171a:	bf 85       	ldd	r27, Y+15	; 0x0f
    171c:	28 85       	ldd	r18, Y+8	; 0x08
    171e:	39 85       	ldd	r19, Y+9	; 0x09
    1720:	4a 85       	ldd	r20, Y+10	; 0x0a
    1722:	5b 85       	ldd	r21, Y+11	; 0x0b
    1724:	bc 01       	movw	r22, r24
    1726:	cd 01       	movw	r24, r26
    1728:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    172c:	da 01       	movw	r26, r20
    172e:	c9 01       	movw	r24, r18
    1730:	bc 01       	movw	r22, r24
    1732:	cd 01       	movw	r24, r26
    1734:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1738:	dc 01       	movw	r26, r24
    173a:	cb 01       	movw	r24, r22
    173c:	bc 01       	movw	r22, r24
    173e:	cd 01       	movw	r24, r26
    1740:	0e 94 1b 1d 	call	0x3a36	; 0x3a36 <ceil>
    1744:	dc 01       	movw	r26, r24
    1746:	cb 01       	movw	r24, r22
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8c 83       	std	Y+4, r24	; 0x04
    1756:	9d 83       	std	Y+5, r25	; 0x05
    1758:	ae 83       	std	Y+6, r26	; 0x06
    175a:	bf 83       	std	Y+7, r27	; 0x07
	uint8_t InitialVal = 256 - ((delay/0.256)/NUM_OF_OVERFLOW);
    175c:	6c 85       	ldd	r22, Y+12	; 0x0c
    175e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1760:	8e 85       	ldd	r24, Y+14	; 0x0e
    1762:	9f 85       	ldd	r25, Y+15	; 0x0f
    1764:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	2f e6       	ldi	r18, 0x6F	; 111
    1772:	32 e1       	ldi	r19, 0x12	; 18
    1774:	43 e8       	ldi	r20, 0x83	; 131
    1776:	5e eb       	ldi	r21, 0xBE	; 190
    1778:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	7c 01       	movw	r14, r24
    1782:	8d 01       	movw	r16, r26
    1784:	6c 81       	ldd	r22, Y+4	; 0x04
    1786:	7d 81       	ldd	r23, Y+5	; 0x05
    1788:	8e 81       	ldd	r24, Y+6	; 0x06
    178a:	9f 81       	ldd	r25, Y+7	; 0x07
    178c:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1790:	9b 01       	movw	r18, r22
    1792:	ac 01       	movw	r20, r24
    1794:	c8 01       	movw	r24, r16
    1796:	b7 01       	movw	r22, r14
    1798:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	bc 01       	movw	r22, r24
    17a2:	cd 01       	movw	r24, r26
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	53 e4       	ldi	r21, 0x43	; 67
    17ac:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	bc 01       	movw	r22, r24
    17b6:	cd 01       	movw	r24, r26
    17b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	8b 83       	std	Y+3, r24	; 0x03


	TCNT2 = InitialVal;
    17c2:	e4 e4       	ldi	r30, 0x44	; 68
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	80 83       	st	Z, r24
	TCCR2 |= (1<<1)|(1<<2);    // Choose the prescalar so, the timer will start
    17ca:	a5 e4       	ldi	r26, 0x45	; 69
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e5 e4       	ldi	r30, 0x45	; 69
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	86 60       	ori	r24, 0x06	; 6
    17d6:	8c 93       	st	X, r24
	unsigned int overflowcounter = 0;
    17d8:	1a 82       	std	Y+2, r1	; 0x02
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	07 c0       	rjmp	.+14     	; 0x17ec <Timer2_delay_ms+0x10c>
	while(overflowcounter < NUM_OF_OVERFLOW){
		waitOVF_timer2();
    17de:	0e 94 4b 0b 	call	0x1696	; 0x1696 <waitOVF_timer2>
		overflowcounter++;
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	9a 81       	ldd	r25, Y+2	; 0x02
    17e6:	01 96       	adiw	r24, 0x01	; 1
    17e8:	9a 83       	std	Y+2, r25	; 0x02
    17ea:	89 83       	std	Y+1, r24	; 0x01


	TCNT2 = InitialVal;
	TCCR2 |= (1<<1)|(1<<2);    // Choose the prescalar so, the timer will start
	unsigned int overflowcounter = 0;
	while(overflowcounter < NUM_OF_OVERFLOW){
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	9c 01       	movw	r18, r24
    17f2:	40 e0       	ldi	r20, 0x00	; 0
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	8c 81       	ldd	r24, Y+4	; 0x04
    17f8:	9d 81       	ldd	r25, Y+5	; 0x05
    17fa:	ae 81       	ldd	r26, Y+6	; 0x06
    17fc:	bf 81       	ldd	r27, Y+7	; 0x07
    17fe:	28 17       	cp	r18, r24
    1800:	39 07       	cpc	r19, r25
    1802:	4a 07       	cpc	r20, r26
    1804:	5b 07       	cpc	r21, r27
    1806:	58 f3       	brcs	.-42     	; 0x17de <Timer2_delay_ms+0xfe>
		waitOVF_timer2();
		overflowcounter++;
	}
	overflowcounter = 0;
    1808:	1a 82       	std	Y+2, r1	; 0x02
    180a:	19 82       	std	Y+1, r1	; 0x01
	timer2_stop();
    180c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <timer2_stop>
}
    1810:	2f 96       	adiw	r28, 0x0f	; 15
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	08 95       	ret

0000182a <Dio_write>:
/************************************************************************/
/* This function to write high or low on a specific pin in a specific port based on the parameters recieved */
/************************************************************************/


void Dio_write(channel_type channel , Dio_Status_Type state){
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <Dio_write+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <Dio_write+0x8>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	8b 83       	std	Y+3, r24	; 0x03
    1838:	6c 83       	std	Y+4, r22	; 0x04
	Dio_Port_Type port = channel / 8;
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	86 95       	lsr	r24
    183e:	86 95       	lsr	r24
    1840:	86 95       	lsr	r24
    1842:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Pin_Type pin = channel % 8;
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	87 70       	andi	r24, 0x07	; 7
    1848:	89 83       	std	Y+1, r24	; 0x01

	if(port == PORT_A){
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	88 23       	and	r24, r24
    184e:	61 f5       	brne	.+88     	; 0x18a8 <Dio_write+0x7e>
		if(state == HIGH){
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	81 30       	cpi	r24, 0x01	; 1
    1854:	a1 f4       	brne	.+40     	; 0x187e <Dio_write+0x54>
			SET_BIT(PORTA,pin);
    1856:	ab e3       	ldi	r26, 0x3B	; 59
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	eb e3       	ldi	r30, 0x3B	; 59
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	48 2f       	mov	r20, r24
    1862:	89 81       	ldd	r24, Y+1	; 0x01
    1864:	28 2f       	mov	r18, r24
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	02 2e       	mov	r0, r18
    186e:	02 c0       	rjmp	.+4      	; 0x1874 <Dio_write+0x4a>
    1870:	88 0f       	add	r24, r24
    1872:	99 1f       	adc	r25, r25
    1874:	0a 94       	dec	r0
    1876:	e2 f7       	brpl	.-8      	; 0x1870 <Dio_write+0x46>
    1878:	84 2b       	or	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	a1 c0       	rjmp	.+322    	; 0x19c0 <Dio_write+0x196>
			}else{
			CLR_BIT(PORTA,pin);
    187e:	ab e3       	ldi	r26, 0x3B	; 59
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	eb e3       	ldi	r30, 0x3B	; 59
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <Dio_write+0x72>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <Dio_write+0x6e>
    18a0:	80 95       	com	r24
    18a2:	84 23       	and	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	8c c0       	rjmp	.+280    	; 0x19c0 <Dio_write+0x196>
		}
		}else if(port == PORT_B){
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	81 30       	cpi	r24, 0x01	; 1
    18ac:	61 f5       	brne	.+88     	; 0x1906 <Dio_write+0xdc>
		if(state == HIGH){
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	a1 f4       	brne	.+40     	; 0x18dc <Dio_write+0xb2>
			SET_BIT(PORTB,pin);
    18b4:	a8 e3       	ldi	r26, 0x38	; 56
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e8 e3       	ldi	r30, 0x38	; 56
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	48 2f       	mov	r20, r24
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	02 2e       	mov	r0, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <Dio_write+0xa8>
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	0a 94       	dec	r0
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <Dio_write+0xa4>
    18d6:	84 2b       	or	r24, r20
    18d8:	8c 93       	st	X, r24
    18da:	72 c0       	rjmp	.+228    	; 0x19c0 <Dio_write+0x196>
			}else{
			CLR_BIT(PORTB,pin);
    18dc:	a8 e3       	ldi	r26, 0x38	; 56
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e8 e3       	ldi	r30, 0x38	; 56
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	48 2f       	mov	r20, r24
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	02 2e       	mov	r0, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <Dio_write+0xd0>
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	0a 94       	dec	r0
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <Dio_write+0xcc>
    18fe:	80 95       	com	r24
    1900:	84 23       	and	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	5d c0       	rjmp	.+186    	; 0x19c0 <Dio_write+0x196>
		}
		}else if(port == PORT_C){
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	82 30       	cpi	r24, 0x02	; 2
    190a:	61 f5       	brne	.+88     	; 0x1964 <Dio_write+0x13a>
		if(state == HIGH){
    190c:	8c 81       	ldd	r24, Y+4	; 0x04
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	a1 f4       	brne	.+40     	; 0x193a <Dio_write+0x110>
			SET_BIT(PORTC,pin);
    1912:	a5 e3       	ldi	r26, 0x35	; 53
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e5 e3       	ldi	r30, 0x35	; 53
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	48 2f       	mov	r20, r24
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <Dio_write+0x106>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <Dio_write+0x102>
    1934:	84 2b       	or	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	43 c0       	rjmp	.+134    	; 0x19c0 <Dio_write+0x196>
			}else{
			CLR_BIT(PORTC,pin);
    193a:	a5 e3       	ldi	r26, 0x35	; 53
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e5 e3       	ldi	r30, 0x35	; 53
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <Dio_write+0x12e>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <Dio_write+0x12a>
    195c:	80 95       	com	r24
    195e:	84 23       	and	r24, r20
    1960:	8c 93       	st	X, r24
    1962:	2e c0       	rjmp	.+92     	; 0x19c0 <Dio_write+0x196>
		}
		}else if(port == PORT_D){
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	59 f5       	brne	.+86     	; 0x19c0 <Dio_write+0x196>
		if(state == HIGH){
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	81 30       	cpi	r24, 0x01	; 1
    196e:	a1 f4       	brne	.+40     	; 0x1998 <Dio_write+0x16e>
			SET_BIT(PORTD,pin);
    1970:	a2 e3       	ldi	r26, 0x32	; 50
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	e2 e3       	ldi	r30, 0x32	; 50
    1976:	f0 e0       	ldi	r31, 0x00	; 0
    1978:	80 81       	ld	r24, Z
    197a:	48 2f       	mov	r20, r24
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	81 e0       	ldi	r24, 0x01	; 1
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	02 2e       	mov	r0, r18
    1988:	02 c0       	rjmp	.+4      	; 0x198e <Dio_write+0x164>
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	0a 94       	dec	r0
    1990:	e2 f7       	brpl	.-8      	; 0x198a <Dio_write+0x160>
    1992:	84 2b       	or	r24, r20
    1994:	8c 93       	st	X, r24
    1996:	14 c0       	rjmp	.+40     	; 0x19c0 <Dio_write+0x196>
			}else{
			CLR_BIT(PORTD,pin);
    1998:	a2 e3       	ldi	r26, 0x32	; 50
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e2 e3       	ldi	r30, 0x32	; 50
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	02 2e       	mov	r0, r18
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <Dio_write+0x18c>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	0a 94       	dec	r0
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <Dio_write+0x188>
    19ba:	80 95       	com	r24
    19bc:	84 23       	and	r24, r20
    19be:	8c 93       	st	X, r24
		}
	}
}
    19c0:	0f 90       	pop	r0
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	08 95       	ret

000019ce <Dio_read>:

/************************************************************************/
/* To read a specific pin and store the value read in *value */
/************************************************************************/

void Dio_read(channel_type channel,uint8_t *value){
    19ce:	df 93       	push	r29
    19d0:	cf 93       	push	r28
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <Dio_read+0x6>
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <Dio_read+0x8>
    19d6:	0f 92       	push	r0
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	8b 83       	std	Y+3, r24	; 0x03
    19de:	7d 83       	std	Y+5, r23	; 0x05
    19e0:	6c 83       	std	Y+4, r22	; 0x04
	Dio_Port_Type port = channel / 8;
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	86 95       	lsr	r24
    19e6:	86 95       	lsr	r24
    19e8:	86 95       	lsr	r24
    19ea:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Pin_Type pin = channel % 8;
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	87 70       	andi	r24, 0x07	; 7
    19f0:	89 83       	std	Y+1, r24	; 0x01
	//Dio_Status_Type status = 0;


	if(port == PORT_A){
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	88 23       	and	r24, r24
    19f6:	a1 f4       	brne	.+40     	; 0x1a20 <Dio_read+0x52>
		*value = GET_BIT(PINA,pin);
    19f8:	e9 e3       	ldi	r30, 0x39	; 57
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a9 01       	movw	r20, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <Dio_read+0x42>
    1a0c:	55 95       	asr	r21
    1a0e:	47 95       	ror	r20
    1a10:	8a 95       	dec	r24
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <Dio_read+0x3e>
    1a14:	ca 01       	movw	r24, r20
    1a16:	81 70       	andi	r24, 0x01	; 1
    1a18:	ec 81       	ldd	r30, Y+4	; 0x04
    1a1a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a1c:	80 83       	st	Z, r24
    1a1e:	44 c0       	rjmp	.+136    	; 0x1aa8 <Dio_read+0xda>
	}else if(port == PORT_B){
    1a20:	8a 81       	ldd	r24, Y+2	; 0x02
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	a1 f4       	brne	.+40     	; 0x1a4e <Dio_read+0x80>
		*value = GET_BIT(PINB,pin);
    1a26:	e6 e3       	ldi	r30, 0x36	; 54
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	89 81       	ldd	r24, Y+1	; 0x01
    1a32:	88 2f       	mov	r24, r24
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a9 01       	movw	r20, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <Dio_read+0x70>
    1a3a:	55 95       	asr	r21
    1a3c:	47 95       	ror	r20
    1a3e:	8a 95       	dec	r24
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <Dio_read+0x6c>
    1a42:	ca 01       	movw	r24, r20
    1a44:	81 70       	andi	r24, 0x01	; 1
    1a46:	ec 81       	ldd	r30, Y+4	; 0x04
    1a48:	fd 81       	ldd	r31, Y+5	; 0x05
    1a4a:	80 83       	st	Z, r24
    1a4c:	2d c0       	rjmp	.+90     	; 0x1aa8 <Dio_read+0xda>
	}else if(port == PORT_C){
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	82 30       	cpi	r24, 0x02	; 2
    1a52:	a1 f4       	brne	.+40     	; 0x1a7c <Dio_read+0xae>
		*value = GET_BIT(PINC,pin);
    1a54:	e3 e3       	ldi	r30, 0x33	; 51
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	88 2f       	mov	r24, r24
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a9 01       	movw	r20, r18
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <Dio_read+0x9e>
    1a68:	55 95       	asr	r21
    1a6a:	47 95       	ror	r20
    1a6c:	8a 95       	dec	r24
    1a6e:	e2 f7       	brpl	.-8      	; 0x1a68 <Dio_read+0x9a>
    1a70:	ca 01       	movw	r24, r20
    1a72:	81 70       	andi	r24, 0x01	; 1
    1a74:	ec 81       	ldd	r30, Y+4	; 0x04
    1a76:	fd 81       	ldd	r31, Y+5	; 0x05
    1a78:	80 83       	st	Z, r24
    1a7a:	16 c0       	rjmp	.+44     	; 0x1aa8 <Dio_read+0xda>
	}else if(port == PORT_D){
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	83 30       	cpi	r24, 0x03	; 3
    1a80:	99 f4       	brne	.+38     	; 0x1aa8 <Dio_read+0xda>
		*value = GET_BIT(PIND,pin);
    1a82:	e0 e3       	ldi	r30, 0x30	; 48
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a9 01       	movw	r20, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <Dio_read+0xcc>
    1a96:	55 95       	asr	r21
    1a98:	47 95       	ror	r20
    1a9a:	8a 95       	dec	r24
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <Dio_read+0xc8>
    1a9e:	ca 01       	movw	r24, r20
    1aa0:	81 70       	andi	r24, 0x01	; 1
    1aa2:	ec 81       	ldd	r30, Y+4	; 0x04
    1aa4:	fd 81       	ldd	r31, Y+5	; 0x05
    1aa6:	80 83       	st	Z, r24
	}
}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	0f 90       	pop	r0
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	08 95       	ret

00001ab8 <Dio_writePort>:

/************************************************************************/
/* To write on the whole port */
/************************************************************************/

void Dio_writePort(Dio_Port_Type port , unsigned char level){
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <Dio_writePort+0x6>
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	6a 83       	std	Y+2, r22	; 0x02
	if(port == PORT_A){
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	88 23       	and	r24, r24
    1aca:	29 f4       	brne	.+10     	; 0x1ad6 <Dio_writePort+0x1e>
		PORTA = level;
    1acc:	eb e3       	ldi	r30, 0x3B	; 59
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	80 83       	st	Z, r24
    1ad4:	17 c0       	rjmp	.+46     	; 0x1b04 <Dio_writePort+0x4c>
		}else if(port == PORT_B){
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	29 f4       	brne	.+10     	; 0x1ae6 <Dio_writePort+0x2e>
		PORTB = level;
    1adc:	e8 e3       	ldi	r30, 0x38	; 56
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	80 83       	st	Z, r24
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <Dio_writePort+0x4c>
		}else if(port == PORT_C){
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	82 30       	cpi	r24, 0x02	; 2
    1aea:	29 f4       	brne	.+10     	; 0x1af6 <Dio_writePort+0x3e>
		PORTC = level;
    1aec:	e5 e3       	ldi	r30, 0x35	; 53
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	80 83       	st	Z, r24
    1af4:	07 c0       	rjmp	.+14     	; 0x1b04 <Dio_writePort+0x4c>
		}else if(port == PORT_D){
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	83 30       	cpi	r24, 0x03	; 3
    1afa:	21 f4       	brne	.+8      	; 0x1b04 <Dio_writePort+0x4c>
		PORTD = level;
    1afc:	e2 e3       	ldi	r30, 0x32	; 50
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	80 83       	st	Z, r24
	}
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <Dio_init>:
/* To initialize the pins used (output or input)
 Which are stored in an array of structures in configuration.c file  */
/************************************************************************/


void Dio_init(void){
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	00 d0       	rcall	.+0      	; 0x1b14 <Dio_init+0x6>
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
	int i = 0;
    1b18:	1a 82       	std	Y+2, r1	; 0x02
    1b1a:	19 82       	std	Y+1, r1	; 0x01
	for(i=0 ; i<PIN_COUNT ; i++){
    1b1c:	1a 82       	std	Y+2, r1	; 0x02
    1b1e:	19 82       	std	Y+1, r1	; 0x01
    1b20:	a3 c2       	rjmp	.+1350   	; 0x2068 <Dio_init+0x55a>
		if(Dio_Cfg_Pins[i].PinPort == PORT_A){
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	9a 81       	ldd	r25, Y+2	; 0x02
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	fc 01       	movw	r30, r24
    1b30:	ef 57       	subi	r30, 0x7F	; 127
    1b32:	fe 4f       	sbci	r31, 0xFE	; 254
    1b34:	80 81       	ld	r24, Z
    1b36:	88 23       	and	r24, r24
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <Dio_init+0x2e>
    1b3a:	9b c0       	rjmp	.+310    	; 0x1c72 <Dio_init+0x164>
			if(Dio_Cfg_Pins[i].dir == OUTPUT){
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	01 96       	adiw	r24, 0x01	; 1
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	ef 57       	subi	r30, 0x7F	; 127
    1b4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b50:	80 81       	ld	r24, Z
    1b52:	81 30       	cpi	r24, 0x01	; 1
    1b54:	e9 f4       	brne	.+58     	; 0x1b90 <Dio_init+0x82>
				SET_BIT(DDRA,Dio_Cfg_Pins[i].Pin);
    1b56:	aa e3       	ldi	r26, 0x3A	; 58
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	ea e3       	ldi	r30, 0x3A	; 58
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	48 2f       	mov	r20, r24
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	88 0f       	add	r24, r24
    1b68:	99 1f       	adc	r25, r25
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	fc 01       	movw	r30, r24
    1b70:	ee 57       	subi	r30, 0x7E	; 126
    1b72:	fe 4f       	sbci	r31, 0xFE	; 254
    1b74:	80 81       	ld	r24, Z
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	02 2e       	mov	r0, r18
    1b80:	02 c0       	rjmp	.+4      	; 0x1b86 <Dio_init+0x78>
    1b82:	88 0f       	add	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	0a 94       	dec	r0
    1b88:	e2 f7       	brpl	.-8      	; 0x1b82 <Dio_init+0x74>
    1b8a:	84 2b       	or	r24, r20
    1b8c:	8c 93       	st	X, r24
    1b8e:	67 c2       	rjmp	.+1230   	; 0x205e <Dio_init+0x550>
				}else{
				CLR_BIT(DDRA,Dio_Cfg_Pins[i].Pin);
    1b90:	aa e3       	ldi	r26, 0x3A	; 58
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ea e3       	ldi	r30, 0x3A	; 58
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	fc 01       	movw	r30, r24
    1baa:	ee 57       	subi	r30, 0x7E	; 126
    1bac:	fe 4f       	sbci	r31, 0xFE	; 254
    1bae:	80 81       	ld	r24, Z
    1bb0:	28 2f       	mov	r18, r24
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	02 2e       	mov	r0, r18
    1bba:	02 c0       	rjmp	.+4      	; 0x1bc0 <Dio_init+0xb2>
    1bbc:	88 0f       	add	r24, r24
    1bbe:	99 1f       	adc	r25, r25
    1bc0:	0a 94       	dec	r0
    1bc2:	e2 f7       	brpl	.-8      	; 0x1bbc <Dio_init+0xae>
    1bc4:	80 95       	com	r24
    1bc6:	84 23       	and	r24, r20
    1bc8:	8c 93       	st	X, r24
				if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	ec 57       	subi	r30, 0x7C	; 124
    1bda:	fe 4f       	sbci	r31, 0xFE	; 254
    1bdc:	80 81       	ld	r24, Z
    1bde:	81 30       	cpi	r24, 0x01	; 1
    1be0:	e9 f4       	brne	.+58     	; 0x1c1c <Dio_init+0x10e>
					SET_BIT(PORTA,Dio_Cfg_Pins[i].Pin);
    1be2:	ab e3       	ldi	r26, 0x3B	; 59
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	eb e3       	ldi	r30, 0x3B	; 59
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	48 2f       	mov	r20, r24
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	ee 57       	subi	r30, 0x7E	; 126
    1bfe:	fe 4f       	sbci	r31, 0xFE	; 254
    1c00:	80 81       	ld	r24, Z
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	02 2e       	mov	r0, r18
    1c0c:	02 c0       	rjmp	.+4      	; 0x1c12 <Dio_init+0x104>
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	0a 94       	dec	r0
    1c14:	e2 f7       	brpl	.-8      	; 0x1c0e <Dio_init+0x100>
    1c16:	84 2b       	or	r24, r20
    1c18:	8c 93       	st	X, r24
    1c1a:	21 c2       	rjmp	.+1090   	; 0x205e <Dio_init+0x550>
				}else if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	fc 01       	movw	r30, r24
    1c2a:	ec 57       	subi	r30, 0x7C	; 124
    1c2c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c2e:	80 81       	ld	r24, Z
    1c30:	81 30       	cpi	r24, 0x01	; 1
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <Dio_init+0x128>
    1c34:	14 c2       	rjmp	.+1064   	; 0x205e <Dio_init+0x550>
					CLR_BIT(PORTA,Dio_Cfg_Pins[i].Pin);
    1c36:	ab e3       	ldi	r26, 0x3B	; 59
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	eb e3       	ldi	r30, 0x3B	; 59
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	88 0f       	add	r24, r24
    1c4c:	99 1f       	adc	r25, r25
    1c4e:	fc 01       	movw	r30, r24
    1c50:	ee 57       	subi	r30, 0x7E	; 126
    1c52:	fe 4f       	sbci	r31, 0xFE	; 254
    1c54:	80 81       	ld	r24, Z
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	02 2e       	mov	r0, r18
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <Dio_init+0x158>
    1c62:	88 0f       	add	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	0a 94       	dec	r0
    1c68:	e2 f7       	brpl	.-8      	; 0x1c62 <Dio_init+0x154>
    1c6a:	80 95       	com	r24
    1c6c:	84 23       	and	r24, r20
    1c6e:	8c 93       	st	X, r24
    1c70:	f6 c1       	rjmp	.+1004   	; 0x205e <Dio_init+0x550>
				}
			}
			}else if(Dio_Cfg_Pins[i].PinPort == PORT_B){
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	88 0f       	add	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	88 0f       	add	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	fc 01       	movw	r30, r24
    1c80:	ef 57       	subi	r30, 0x7F	; 127
    1c82:	fe 4f       	sbci	r31, 0xFE	; 254
    1c84:	80 81       	ld	r24, Z
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <Dio_init+0x17e>
    1c8a:	9b c0       	rjmp	.+310    	; 0x1dc2 <Dio_init+0x2b4>
			if(Dio_Cfg_Pins[i].dir == OUTPUT){
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	01 96       	adiw	r24, 0x01	; 1
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	ef 57       	subi	r30, 0x7F	; 127
    1c9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca0:	80 81       	ld	r24, Z
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	e9 f4       	brne	.+58     	; 0x1ce0 <Dio_init+0x1d2>
				SET_BIT(DDRB,Dio_Cfg_Pins[i].Pin);
    1ca6:	a7 e3       	ldi	r26, 0x37	; 55
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e7 e3       	ldi	r30, 0x37	; 55
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	ee 57       	subi	r30, 0x7E	; 126
    1cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc4:	80 81       	ld	r24, Z
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <Dio_init+0x1c8>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <Dio_init+0x1c4>
    1cda:	84 2b       	or	r24, r20
    1cdc:	8c 93       	st	X, r24
    1cde:	bf c1       	rjmp	.+894    	; 0x205e <Dio_init+0x550>
				}else{
				CLR_BIT(DDRB,Dio_Cfg_Pins[i].Pin);
    1ce0:	a7 e3       	ldi	r26, 0x37	; 55
    1ce2:	b0 e0       	ldi	r27, 0x00	; 0
    1ce4:	e7 e3       	ldi	r30, 0x37	; 55
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	48 2f       	mov	r20, r24
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	88 0f       	add	r24, r24
    1cf2:	99 1f       	adc	r25, r25
    1cf4:	88 0f       	add	r24, r24
    1cf6:	99 1f       	adc	r25, r25
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	ee 57       	subi	r30, 0x7E	; 126
    1cfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cfe:	80 81       	ld	r24, Z
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	02 2e       	mov	r0, r18
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <Dio_init+0x202>
    1d0c:	88 0f       	add	r24, r24
    1d0e:	99 1f       	adc	r25, r25
    1d10:	0a 94       	dec	r0
    1d12:	e2 f7       	brpl	.-8      	; 0x1d0c <Dio_init+0x1fe>
    1d14:	80 95       	com	r24
    1d16:	84 23       	and	r24, r20
    1d18:	8c 93       	st	X, r24
				if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	fc 01       	movw	r30, r24
    1d28:	ec 57       	subi	r30, 0x7C	; 124
    1d2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d2c:	80 81       	ld	r24, Z
    1d2e:	81 30       	cpi	r24, 0x01	; 1
    1d30:	e9 f4       	brne	.+58     	; 0x1d6c <Dio_init+0x25e>
					SET_BIT(PORTB,Dio_Cfg_Pins[i].Pin);
    1d32:	a8 e3       	ldi	r26, 0x38	; 56
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e8 e3       	ldi	r30, 0x38	; 56
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	48 2f       	mov	r20, r24
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	88 0f       	add	r24, r24
    1d44:	99 1f       	adc	r25, r25
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	ee 57       	subi	r30, 0x7E	; 126
    1d4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1d50:	80 81       	ld	r24, Z
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 2e       	mov	r0, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <Dio_init+0x254>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	0a 94       	dec	r0
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <Dio_init+0x250>
    1d66:	84 2b       	or	r24, r20
    1d68:	8c 93       	st	X, r24
    1d6a:	79 c1       	rjmp	.+754    	; 0x205e <Dio_init+0x550>
				}else if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d70:	88 0f       	add	r24, r24
    1d72:	99 1f       	adc	r25, r25
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	fc 01       	movw	r30, r24
    1d7a:	ec 57       	subi	r30, 0x7C	; 124
    1d7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7e:	80 81       	ld	r24, Z
    1d80:	81 30       	cpi	r24, 0x01	; 1
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <Dio_init+0x278>
    1d84:	6c c1       	rjmp	.+728    	; 0x205e <Dio_init+0x550>
					CLR_BIT(PORTA,Dio_Cfg_Pins[i].Pin);
    1d86:	ab e3       	ldi	r26, 0x3B	; 59
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	eb e3       	ldi	r30, 0x3B	; 59
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	9a 81       	ldd	r25, Y+2	; 0x02
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	fc 01       	movw	r30, r24
    1da0:	ee 57       	subi	r30, 0x7E	; 126
    1da2:	fe 4f       	sbci	r31, 0xFE	; 254
    1da4:	80 81       	ld	r24, Z
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	02 2e       	mov	r0, r18
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <Dio_init+0x2a8>
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <Dio_init+0x2a4>
    1dba:	80 95       	com	r24
    1dbc:	84 23       	and	r24, r20
    1dbe:	8c 93       	st	X, r24
    1dc0:	4e c1       	rjmp	.+668    	; 0x205e <Dio_init+0x550>
				}
			}
			}else if(Dio_Cfg_Pins[i].PinPort == PORT_C){
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	fc 01       	movw	r30, r24
    1dd0:	ef 57       	subi	r30, 0x7F	; 127
    1dd2:	fe 4f       	sbci	r31, 0xFE	; 254
    1dd4:	80 81       	ld	r24, Z
    1dd6:	82 30       	cpi	r24, 0x02	; 2
    1dd8:	09 f0       	breq	.+2      	; 0x1ddc <Dio_init+0x2ce>
    1dda:	9b c0       	rjmp	.+310    	; 0x1f12 <Dio_init+0x404>
			if(Dio_Cfg_Pins[i].dir == OUTPUT){
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	01 96       	adiw	r24, 0x01	; 1
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	fc 01       	movw	r30, r24
    1dec:	ef 57       	subi	r30, 0x7F	; 127
    1dee:	fe 4f       	sbci	r31, 0xFE	; 254
    1df0:	80 81       	ld	r24, Z
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	e9 f4       	brne	.+58     	; 0x1e30 <Dio_init+0x322>
				SET_BIT(DDRC,Dio_Cfg_Pins[i].Pin);
    1df6:	a4 e3       	ldi	r26, 0x34	; 52
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e4 e3       	ldi	r30, 0x34	; 52
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	48 2f       	mov	r20, r24
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	9a 81       	ldd	r25, Y+2	; 0x02
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	fc 01       	movw	r30, r24
    1e10:	ee 57       	subi	r30, 0x7E	; 126
    1e12:	fe 4f       	sbci	r31, 0xFE	; 254
    1e14:	80 81       	ld	r24, Z
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	02 2e       	mov	r0, r18
    1e20:	02 c0       	rjmp	.+4      	; 0x1e26 <Dio_init+0x318>
    1e22:	88 0f       	add	r24, r24
    1e24:	99 1f       	adc	r25, r25
    1e26:	0a 94       	dec	r0
    1e28:	e2 f7       	brpl	.-8      	; 0x1e22 <Dio_init+0x314>
    1e2a:	84 2b       	or	r24, r20
    1e2c:	8c 93       	st	X, r24
    1e2e:	17 c1       	rjmp	.+558    	; 0x205e <Dio_init+0x550>
				}else{
				CLR_BIT(DDRC,Dio_Cfg_Pins[i].Pin);
    1e30:	a4 e3       	ldi	r26, 0x34	; 52
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e4 e3       	ldi	r30, 0x34	; 52
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	48 2f       	mov	r20, r24
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	fc 01       	movw	r30, r24
    1e4a:	ee 57       	subi	r30, 0x7E	; 126
    1e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e4e:	80 81       	ld	r24, Z
    1e50:	28 2f       	mov	r18, r24
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 2e       	mov	r0, r18
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <Dio_init+0x352>
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	0a 94       	dec	r0
    1e62:	e2 f7       	brpl	.-8      	; 0x1e5c <Dio_init+0x34e>
    1e64:	80 95       	com	r24
    1e66:	84 23       	and	r24, r20
    1e68:	8c 93       	st	X, r24
				if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	fc 01       	movw	r30, r24
    1e78:	ec 57       	subi	r30, 0x7C	; 124
    1e7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e7c:	80 81       	ld	r24, Z
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	e9 f4       	brne	.+58     	; 0x1ebc <Dio_init+0x3ae>
					SET_BIT(PORTC,Dio_Cfg_Pins[i].Pin);
    1e82:	a5 e3       	ldi	r26, 0x35	; 53
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e5 e3       	ldi	r30, 0x35	; 53
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	9a 81       	ldd	r25, Y+2	; 0x02
    1e92:	88 0f       	add	r24, r24
    1e94:	99 1f       	adc	r25, r25
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	fc 01       	movw	r30, r24
    1e9c:	ee 57       	subi	r30, 0x7E	; 126
    1e9e:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea0:	80 81       	ld	r24, Z
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <Dio_init+0x3a4>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <Dio_init+0x3a0>
    1eb6:	84 2b       	or	r24, r20
    1eb8:	8c 93       	st	X, r24
    1eba:	d1 c0       	rjmp	.+418    	; 0x205e <Dio_init+0x550>
				}else if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	88 0f       	add	r24, r24
    1ec2:	99 1f       	adc	r25, r25
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	fc 01       	movw	r30, r24
    1eca:	ec 57       	subi	r30, 0x7C	; 124
    1ecc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ece:	80 81       	ld	r24, Z
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	09 f0       	breq	.+2      	; 0x1ed6 <Dio_init+0x3c8>
    1ed4:	c4 c0       	rjmp	.+392    	; 0x205e <Dio_init+0x550>
					CLR_BIT(PORTA,Dio_Cfg_Pins[i].Pin);
    1ed6:	ab e3       	ldi	r26, 0x3B	; 59
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	eb e3       	ldi	r30, 0x3B	; 59
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	89 81       	ldd	r24, Y+1	; 0x01
    1ee4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	fc 01       	movw	r30, r24
    1ef0:	ee 57       	subi	r30, 0x7E	; 126
    1ef2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ef4:	80 81       	ld	r24, Z
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <Dio_init+0x3f8>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <Dio_init+0x3f4>
    1f0a:	80 95       	com	r24
    1f0c:	84 23       	and	r24, r20
    1f0e:	8c 93       	st	X, r24
    1f10:	a6 c0       	rjmp	.+332    	; 0x205e <Dio_init+0x550>
				}
			}
			}else if(Dio_Cfg_Pins[i].PinPort == PORT_D){
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	9a 81       	ldd	r25, Y+2	; 0x02
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	fc 01       	movw	r30, r24
    1f20:	ef 57       	subi	r30, 0x7F	; 127
    1f22:	fe 4f       	sbci	r31, 0xFE	; 254
    1f24:	80 81       	ld	r24, Z
    1f26:	83 30       	cpi	r24, 0x03	; 3
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <Dio_init+0x41e>
    1f2a:	99 c0       	rjmp	.+306    	; 0x205e <Dio_init+0x550>
			if(Dio_Cfg_Pins[i].dir == OUTPUT){
    1f2c:	89 81       	ldd	r24, Y+1	; 0x01
    1f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	01 96       	adiw	r24, 0x01	; 1
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	ef 57       	subi	r30, 0x7F	; 127
    1f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f40:	80 81       	ld	r24, Z
    1f42:	81 30       	cpi	r24, 0x01	; 1
    1f44:	e9 f4       	brne	.+58     	; 0x1f80 <Dio_init+0x472>
				SET_BIT(DDRD,Dio_Cfg_Pins[i].Pin);
    1f46:	a1 e3       	ldi	r26, 0x31	; 49
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	e1 e3       	ldi	r30, 0x31	; 49
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	89 81       	ldd	r24, Y+1	; 0x01
    1f54:	9a 81       	ldd	r25, Y+2	; 0x02
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	88 0f       	add	r24, r24
    1f5c:	99 1f       	adc	r25, r25
    1f5e:	fc 01       	movw	r30, r24
    1f60:	ee 57       	subi	r30, 0x7E	; 126
    1f62:	fe 4f       	sbci	r31, 0xFE	; 254
    1f64:	80 81       	ld	r24, Z
    1f66:	28 2f       	mov	r18, r24
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	02 2e       	mov	r0, r18
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <Dio_init+0x468>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	0a 94       	dec	r0
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <Dio_init+0x464>
    1f7a:	84 2b       	or	r24, r20
    1f7c:	8c 93       	st	X, r24
    1f7e:	6f c0       	rjmp	.+222    	; 0x205e <Dio_init+0x550>
				}else{
				CLR_BIT(DDRD,Dio_Cfg_Pins[i].Pin);
    1f80:	a1 e3       	ldi	r26, 0x31	; 49
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e1 e3       	ldi	r30, 0x31	; 49
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	48 2f       	mov	r20, r24
    1f8c:	89 81       	ldd	r24, Y+1	; 0x01
    1f8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	fc 01       	movw	r30, r24
    1f9a:	ee 57       	subi	r30, 0x7E	; 126
    1f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f9e:	80 81       	ld	r24, Z
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	02 2e       	mov	r0, r18
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <Dio_init+0x4a2>
    1fac:	88 0f       	add	r24, r24
    1fae:	99 1f       	adc	r25, r25
    1fb0:	0a 94       	dec	r0
    1fb2:	e2 f7       	brpl	.-8      	; 0x1fac <Dio_init+0x49e>
    1fb4:	80 95       	com	r24
    1fb6:	84 23       	and	r24, r20
    1fb8:	8c 93       	st	X, r24
				if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	ec 57       	subi	r30, 0x7C	; 124
    1fca:	fe 4f       	sbci	r31, 0xFE	; 254
    1fcc:	80 81       	ld	r24, Z
    1fce:	81 30       	cpi	r24, 0x01	; 1
    1fd0:	e9 f4       	brne	.+58     	; 0x200c <Dio_init+0x4fe>
					SET_BIT(PORTD,Dio_Cfg_Pins[i].Pin);
    1fd2:	a2 e3       	ldi	r26, 0x32	; 50
    1fd4:	b0 e0       	ldi	r27, 0x00	; 0
    1fd6:	e2 e3       	ldi	r30, 0x32	; 50
    1fd8:	f0 e0       	ldi	r31, 0x00	; 0
    1fda:	80 81       	ld	r24, Z
    1fdc:	48 2f       	mov	r20, r24
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe2:	88 0f       	add	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	fc 01       	movw	r30, r24
    1fec:	ee 57       	subi	r30, 0x7E	; 126
    1fee:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff0:	80 81       	ld	r24, Z
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <Dio_init+0x4f4>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <Dio_init+0x4f0>
    2006:	84 2b       	or	r24, r20
    2008:	8c 93       	st	X, r24
    200a:	29 c0       	rjmp	.+82     	; 0x205e <Dio_init+0x550>
				}else if(Dio_Cfg_Pins[i].PullUp == PULLUP_ON){
    200c:	89 81       	ldd	r24, Y+1	; 0x01
    200e:	9a 81       	ldd	r25, Y+2	; 0x02
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	fc 01       	movw	r30, r24
    201a:	ec 57       	subi	r30, 0x7C	; 124
    201c:	fe 4f       	sbci	r31, 0xFE	; 254
    201e:	80 81       	ld	r24, Z
    2020:	81 30       	cpi	r24, 0x01	; 1
    2022:	e9 f4       	brne	.+58     	; 0x205e <Dio_init+0x550>
					CLR_BIT(PORTA,Dio_Cfg_Pins[i].Pin);
    2024:	ab e3       	ldi	r26, 0x3B	; 59
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	eb e3       	ldi	r30, 0x3B	; 59
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	48 2f       	mov	r20, r24
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	9a 81       	ldd	r25, Y+2	; 0x02
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	fc 01       	movw	r30, r24
    203e:	ee 57       	subi	r30, 0x7E	; 126
    2040:	fe 4f       	sbci	r31, 0xFE	; 254
    2042:	80 81       	ld	r24, Z
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	02 2e       	mov	r0, r18
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <Dio_init+0x546>
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	0a 94       	dec	r0
    2056:	e2 f7       	brpl	.-8      	; 0x2050 <Dio_init+0x542>
    2058:	80 95       	com	r24
    205a:	84 23       	and	r24, r20
    205c:	8c 93       	st	X, r24
/************************************************************************/


void Dio_init(void){
	int i = 0;
	for(i=0 ; i<PIN_COUNT ; i++){
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	01 96       	adiw	r24, 0x01	; 1
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	9a 81       	ldd	r25, Y+2	; 0x02
    206c:	8e 30       	cpi	r24, 0x0E	; 14
    206e:	91 05       	cpc	r25, r1
    2070:	0c f4       	brge	.+2      	; 0x2074 <Dio_init+0x566>
    2072:	57 cd       	rjmp	.-1362   	; 0x1b22 <Dio_init+0x14>
					CLR_BIT(PORTA,Dio_Cfg_Pins[i].Pin);
				}
			}
		}
	}
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <Dio_FlipChannel>:

/************************************************************************/
/* To toggle a specifi pin                           */
/************************************************************************/

void Dio_FlipChannel(channel_type channel){
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	00 d0       	rcall	.+0      	; 0x2084 <Dio_FlipChannel+0x6>
    2084:	0f 92       	push	r0
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	8b 83       	std	Y+3, r24	; 0x03
	Dio_Port_Type port = channel / 8;
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	86 95       	lsr	r24
    2090:	86 95       	lsr	r24
    2092:	86 95       	lsr	r24
    2094:	8a 83       	std	Y+2, r24	; 0x02
	Dio_Pin_Type pin = channel % 8;
    2096:	8b 81       	ldd	r24, Y+3	; 0x03
    2098:	87 70       	andi	r24, 0x07	; 7
    209a:	89 83       	std	Y+1, r24	; 0x01

	if(port == PORT_A){
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	88 23       	and	r24, r24
    20a0:	a1 f4       	brne	.+40     	; 0x20ca <Dio_FlipChannel+0x4c>
		TOG_BIT(PORTA,pin);
    20a2:	ab e3       	ldi	r26, 0x3B	; 59
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	eb e3       	ldi	r30, 0x3B	; 59
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	80 81       	ld	r24, Z
    20ac:	48 2f       	mov	r20, r24
    20ae:	89 81       	ldd	r24, Y+1	; 0x01
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	02 2e       	mov	r0, r18
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <Dio_FlipChannel+0x42>
    20bc:	88 0f       	add	r24, r24
    20be:	99 1f       	adc	r25, r25
    20c0:	0a 94       	dec	r0
    20c2:	e2 f7       	brpl	.-8      	; 0x20bc <Dio_FlipChannel+0x3e>
    20c4:	84 27       	eor	r24, r20
    20c6:	8c 93       	st	X, r24
    20c8:	44 c0       	rjmp	.+136    	; 0x2152 <Dio_FlipChannel+0xd4>
		}else if(port == PORT_B){
    20ca:	8a 81       	ldd	r24, Y+2	; 0x02
    20cc:	81 30       	cpi	r24, 0x01	; 1
    20ce:	a1 f4       	brne	.+40     	; 0x20f8 <Dio_FlipChannel+0x7a>
		TOG_BIT(PORTB,pin);
    20d0:	a8 e3       	ldi	r26, 0x38	; 56
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e8 e3       	ldi	r30, 0x38	; 56
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	48 2f       	mov	r20, r24
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	28 2f       	mov	r18, r24
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	02 2e       	mov	r0, r18
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <Dio_FlipChannel+0x70>
    20ea:	88 0f       	add	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	0a 94       	dec	r0
    20f0:	e2 f7       	brpl	.-8      	; 0x20ea <Dio_FlipChannel+0x6c>
    20f2:	84 27       	eor	r24, r20
    20f4:	8c 93       	st	X, r24
    20f6:	2d c0       	rjmp	.+90     	; 0x2152 <Dio_FlipChannel+0xd4>
		}else if(port == PORT_C){
    20f8:	8a 81       	ldd	r24, Y+2	; 0x02
    20fa:	82 30       	cpi	r24, 0x02	; 2
    20fc:	a1 f4       	brne	.+40     	; 0x2126 <Dio_FlipChannel+0xa8>
		TOG_BIT(PORTC,pin);
    20fe:	a5 e3       	ldi	r26, 0x35	; 53
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e5 e3       	ldi	r30, 0x35	; 53
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	48 2f       	mov	r20, r24
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	28 2f       	mov	r18, r24
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 2e       	mov	r0, r18
    2116:	02 c0       	rjmp	.+4      	; 0x211c <Dio_FlipChannel+0x9e>
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	0a 94       	dec	r0
    211e:	e2 f7       	brpl	.-8      	; 0x2118 <Dio_FlipChannel+0x9a>
    2120:	84 27       	eor	r24, r20
    2122:	8c 93       	st	X, r24
    2124:	16 c0       	rjmp	.+44     	; 0x2152 <Dio_FlipChannel+0xd4>
		}else if(port == PORT_D){
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	83 30       	cpi	r24, 0x03	; 3
    212a:	99 f4       	brne	.+38     	; 0x2152 <Dio_FlipChannel+0xd4>
		TOG_BIT(PORTD,pin);
    212c:	a2 e3       	ldi	r26, 0x32	; 50
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	e2 e3       	ldi	r30, 0x32	; 50
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	80 81       	ld	r24, Z
    2136:	48 2f       	mov	r20, r24
    2138:	89 81       	ldd	r24, Y+1	; 0x01
    213a:	28 2f       	mov	r18, r24
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	02 2e       	mov	r0, r18
    2144:	02 c0       	rjmp	.+4      	; 0x214a <Dio_FlipChannel+0xcc>
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	0a 94       	dec	r0
    214c:	e2 f7       	brpl	.-8      	; 0x2146 <Dio_FlipChannel+0xc8>
    214e:	84 27       	eor	r24, r20
    2150:	8c 93       	st	X, r24
	}
}
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	0f 90       	pop	r0
    2158:	cf 91       	pop	r28
    215a:	df 91       	pop	r29
    215c:	08 95       	ret

0000215e <ADC_init>:
 * 4)SET the ADPS1,ADPS2 (from data sheet)
 * 5)Choose the reference voltage, we choose the internal voltage 2.65v
 * 6)SET REFS1,REFS0 in ADMUX
 */

void ADC_init(void){
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
	//ADCSRA |= (1<<ADEN) | (1<<ADPS1) | (1<<ADPS2);
	//ADMUX |= (1<<REFS1) | (1<<REFS0);
#if	ADC_ENABLE == ENABLE
	SET_BIT(ADCSRA,ADEN);  // Enable the ADC
    2166:	a6 e2       	ldi	r26, 0x26	; 38
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e6 e2       	ldi	r30, 0x26	; 38
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	80 68       	ori	r24, 0x80	; 128
    2172:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
#elif Prescalar_Type == Prescalar_64
	SET_BIT(ADCSRA,ADPS1); // Choose the Prescalar
	SET_BIT(ADCSRA,ADPS2);
#elif Prescalar_Type == Prescalar_128
	SET_BIT(ADCSRA,ADPS0);
    2174:	a6 e2       	ldi	r26, 0x26	; 38
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	e6 e2       	ldi	r30, 0x26	; 38
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	81 60       	ori	r24, 0x01	; 1
    2180:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS1);
    2182:	a6 e2       	ldi	r26, 0x26	; 38
    2184:	b0 e0       	ldi	r27, 0x00	; 0
    2186:	e6 e2       	ldi	r30, 0x26	; 38
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	82 60       	ori	r24, 0x02	; 2
    218e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADPS2);
    2190:	a6 e2       	ldi	r26, 0x26	; 38
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	e6 e2       	ldi	r30, 0x26	; 38
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	84 60       	ori	r24, 0x04	; 4
    219c:	8c 93       	st	X, r24

#if ADC_SOURCE == ADC_SOURCE_VREF
	CLR_BIT(ADMUX,REFS0);
	CLR_BIT(ADMUX,REFS1);
#elif ADC_SOURCE == ADC_SOURCE_AVCC
	SET_BIT(ADMUX,REFS0);
    219e:	a7 e2       	ldi	r26, 0x27	; 39
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e7 e2       	ldi	r30, 0x27	; 39
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	80 64       	ori	r24, 0x40	; 64
    21aa:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,REFS1);
    21ac:	a7 e2       	ldi	r26, 0x27	; 39
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e7 e2       	ldi	r30, 0x27	; 39
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8f 77       	andi	r24, 0x7F	; 127
    21b8:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
#endif

#endif
}
    21ba:	cf 91       	pop	r28
    21bc:	df 91       	pop	r29
    21be:	08 95       	ret

000021c0 <ADC_read>:

*/



uint16_t ADC_read(uint8_t channel) {
    21c0:	df 93       	push	r29
    21c2:	cf 93       	push	r28
    21c4:	0f 92       	push	r0
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	89 83       	std	Y+1, r24	; 0x01
	// Select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
    21cc:	a7 e2       	ldi	r26, 0x27	; 39
    21ce:	b0 e0       	ldi	r27, 0x00	; 0
    21d0:	e7 e2       	ldi	r30, 0x27	; 39
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	98 2f       	mov	r25, r24
    21d8:	90 7f       	andi	r25, 0xF0	; 240
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	8f 70       	andi	r24, 0x0F	; 15
    21de:	89 2b       	or	r24, r25
    21e0:	8c 93       	st	X, r24
	// Start single conversion
	ADCSRA |= (1 << ADSC);
    21e2:	a6 e2       	ldi	r26, 0x26	; 38
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e6 e2       	ldi	r30, 0x26	; 38
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	80 64       	ori	r24, 0x40	; 64
    21ee:	8c 93       	st	X, r24
	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
    21f0:	e6 e2       	ldi	r30, 0x26	; 38
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	80 81       	ld	r24, Z
    21f6:	88 2f       	mov	r24, r24
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	80 74       	andi	r24, 0x40	; 64
    21fc:	90 70       	andi	r25, 0x00	; 0
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	b9 f7       	brne	.-18     	; 0x21f0 <ADC_read+0x30>
	// Return ADC result
	return ADC;
    2202:	e4 e2       	ldi	r30, 0x24	; 36
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	80 81       	ld	r24, Z
    2208:	91 81       	ldd	r25, Z+1	; 0x01
}
    220a:	0f 90       	pop	r0
    220c:	cf 91       	pop	r28
    220e:	df 91       	pop	r29
    2210:	08 95       	ret

00002212 <Lcd_Init>:


static void Trigger_Enable(void);  //ProtoType of static is defined in source file itself(Private declaration)
static void Set_Cursor_Pos(uint8_t row,uint8_t column);

void Lcd_Init(){
    2212:	df 93       	push	r29
    2214:	cf 93       	push	r28
    2216:	cd b7       	in	r28, 0x3d	; 61
    2218:	de b7       	in	r29, 0x3e	; 62
	Lcd_sendCmd(fourbit_mode);  /* Go into 4-bit operating mode*/
    221a:	83 e3       	ldi	r24, 0x33	; 51
    221c:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
	Lcd_sendCmd(fourbit_mode11);	/* Go into 4-bit operating mode*/
    2220:	82 e3       	ldi	r24, 0x32	; 50
    2222:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
	Lcd_sendCmd(D4_D7);  /* 2 Line, 5*7 matrix in 4-bit mode */
    2226:	88 e2       	ldi	r24, 0x28	; 40
    2228:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
	Lcd_sendCmd(CursorOFF);  /* Display on cursor off */
    222c:	8c e0       	ldi	r24, 0x0C	; 12
    222e:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
	Lcd_sendCmd(IncrCursor);  /* Increment cursor (shift cursor to right) */
    2232:	86 e0       	ldi	r24, 0x06	; 6
    2234:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
	Lcd_sendCmd(CLR_Display);  /* Clear display screen */
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
}
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <lcd_clear>:
 *
 *	Ex. 0x28 0b 0010 1000  //Read bit by bit and see if it is low or high
 */

void lcd_clear()
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	2e 97       	sbiw	r28, 0x0e	; 14
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
	Lcd_sendCmd(CLR_Display);
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a0 e0       	ldi	r26, 0x00	; 0
    2264:	b0 e4       	ldi	r27, 0x40	; 64
    2266:	8b 87       	std	Y+11, r24	; 0x0b
    2268:	9c 87       	std	Y+12, r25	; 0x0c
    226a:	ad 87       	std	Y+13, r26	; 0x0d
    226c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2270:	7c 85       	ldd	r23, Y+12	; 0x0c
    2272:	8d 85       	ldd	r24, Y+13	; 0x0d
    2274:	9e 85       	ldd	r25, Y+14	; 0x0e
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a e7       	ldi	r20, 0x7A	; 122
    227c:	55 e4       	ldi	r21, 0x45	; 69
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8f 83       	std	Y+7, r24	; 0x07
    2288:	98 87       	std	Y+8, r25	; 0x08
    228a:	a9 87       	std	Y+9, r26	; 0x09
    228c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228e:	6f 81       	ldd	r22, Y+7	; 0x07
    2290:	78 85       	ldd	r23, Y+8	; 0x08
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	9a 85       	ldd	r25, Y+10	; 0x0a
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <lcd_clear+0x6c>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <lcd_clear+0xea>
	else if (__tmp > 65535)
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <lcd_clear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    22cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <lcd_clear+0xcc>
    22f2:	80 e9       	ldi	r24, 0x90	; 144
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	9c 83       	std	Y+4, r25	; 0x04
    22f8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <lcd_clear+0xba>
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <lcd_clear+0xae>
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <lcd_clear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	6f 81       	ldd	r22, Y+7	; 0x07
    231c:	78 85       	ldd	r23, Y+8	; 0x08
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <lcd_clear+0xf6>
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2342:	2e 96       	adiw	r28, 0x0e	; 14
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	08 95       	ret

00002354 <Lcd_sendCmd>:

void Lcd_sendCmd(unsigned char cmd){
    2354:	df 93       	push	r29
    2356:	cf 93       	push	r28
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	89 83       	std	Y+1, r24	; 0x01
	Dio_write(RS, LOW);
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	Dio_write(RW, LOW);
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	// if(GET_BIT(cmd,7)){Dio_Write(D7,HIGH);}else{Dio_write(D7,LOW);}
	// We use ternary operator instead
	(GET_BIT(cmd,7)) ? Dio_write(D7,HIGH) : Dio_write(D7,LOW);
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	88 23       	and	r24, r24
    2374:	2c f4       	brge	.+10     	; 0x2380 <Lcd_sendCmd+0x2c>
    2376:	86 e0       	ldi	r24, 0x06	; 6
    2378:	61 e0       	ldi	r22, 0x01	; 1
    237a:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    237e:	04 c0       	rjmp	.+8      	; 0x2388 <Lcd_sendCmd+0x34>
    2380:	86 e0       	ldi	r24, 0x06	; 6
    2382:	60 e0       	ldi	r22, 0x00	; 0
    2384:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(cmd,6)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	82 95       	swap	r24
    238c:	86 95       	lsr	r24
    238e:	86 95       	lsr	r24
    2390:	83 70       	andi	r24, 0x03	; 3
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	81 70       	andi	r24, 0x01	; 1
    2398:	90 70       	andi	r25, 0x00	; 0
    239a:	88 23       	and	r24, r24
    239c:	29 f0       	breq	.+10     	; 0x23a8 <Lcd_sendCmd+0x54>
    239e:	85 e0       	ldi	r24, 0x05	; 5
    23a0:	61 e0       	ldi	r22, 0x01	; 1
    23a2:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    23a6:	04 c0       	rjmp	.+8      	; 0x23b0 <Lcd_sendCmd+0x5c>
    23a8:	85 e0       	ldi	r24, 0x05	; 5
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(cmd,5)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	82 95       	swap	r24
    23b4:	86 95       	lsr	r24
    23b6:	87 70       	andi	r24, 0x07	; 7
    23b8:	88 2f       	mov	r24, r24
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	81 70       	andi	r24, 0x01	; 1
    23be:	90 70       	andi	r25, 0x00	; 0
    23c0:	88 23       	and	r24, r24
    23c2:	29 f0       	breq	.+10     	; 0x23ce <Lcd_sendCmd+0x7a>
    23c4:	84 e0       	ldi	r24, 0x04	; 4
    23c6:	61 e0       	ldi	r22, 0x01	; 1
    23c8:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    23cc:	04 c0       	rjmp	.+8      	; 0x23d6 <Lcd_sendCmd+0x82>
    23ce:	84 e0       	ldi	r24, 0x04	; 4
    23d0:	60 e0       	ldi	r22, 0x00	; 0
    23d2:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(cmd,4)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	82 95       	swap	r24
    23da:	8f 70       	andi	r24, 0x0F	; 15
    23dc:	88 2f       	mov	r24, r24
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	81 70       	andi	r24, 0x01	; 1
    23e2:	90 70       	andi	r25, 0x00	; 0
    23e4:	88 23       	and	r24, r24
    23e6:	29 f0       	breq	.+10     	; 0x23f2 <Lcd_sendCmd+0x9e>
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	61 e0       	ldi	r22, 0x01	; 1
    23ec:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    23f0:	04 c0       	rjmp	.+8      	; 0x23fa <Lcd_sendCmd+0xa6>
    23f2:	83 e0       	ldi	r24, 0x03	; 3
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	//Trigger Enable
	Trigger_Enable();
    23fa:	0e 94 36 13 	call	0x266c	; 0x266c <Trigger_Enable>
	(GET_BIT(cmd,3)) ? Dio_write(D7,HIGH) : Dio_write(D7,LOW);
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	86 95       	lsr	r24
    2402:	86 95       	lsr	r24
    2404:	86 95       	lsr	r24
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	81 70       	andi	r24, 0x01	; 1
    240c:	90 70       	andi	r25, 0x00	; 0
    240e:	88 23       	and	r24, r24
    2410:	29 f0       	breq	.+10     	; 0x241c <Lcd_sendCmd+0xc8>
    2412:	86 e0       	ldi	r24, 0x06	; 6
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    241a:	04 c0       	rjmp	.+8      	; 0x2424 <Lcd_sendCmd+0xd0>
    241c:	86 e0       	ldi	r24, 0x06	; 6
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(cmd,2)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	86 95       	lsr	r24
    2428:	86 95       	lsr	r24
    242a:	88 2f       	mov	r24, r24
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	81 70       	andi	r24, 0x01	; 1
    2430:	90 70       	andi	r25, 0x00	; 0
    2432:	88 23       	and	r24, r24
    2434:	29 f0       	breq	.+10     	; 0x2440 <Lcd_sendCmd+0xec>
    2436:	85 e0       	ldi	r24, 0x05	; 5
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    243e:	04 c0       	rjmp	.+8      	; 0x2448 <Lcd_sendCmd+0xf4>
    2440:	85 e0       	ldi	r24, 0x05	; 5
    2442:	60 e0       	ldi	r22, 0x00	; 0
    2444:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(cmd,1)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
    2448:	89 81       	ldd	r24, Y+1	; 0x01
    244a:	86 95       	lsr	r24
    244c:	88 2f       	mov	r24, r24
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	81 70       	andi	r24, 0x01	; 1
    2452:	90 70       	andi	r25, 0x00	; 0
    2454:	88 23       	and	r24, r24
    2456:	29 f0       	breq	.+10     	; 0x2462 <Lcd_sendCmd+0x10e>
    2458:	84 e0       	ldi	r24, 0x04	; 4
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    2460:	04 c0       	rjmp	.+8      	; 0x246a <Lcd_sendCmd+0x116>
    2462:	84 e0       	ldi	r24, 0x04	; 4
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(cmd,0)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	81 70       	andi	r24, 0x01	; 1
    2472:	90 70       	andi	r25, 0x00	; 0
    2474:	88 23       	and	r24, r24
    2476:	29 f0       	breq	.+10     	; 0x2482 <Lcd_sendCmd+0x12e>
    2478:	83 e0       	ldi	r24, 0x03	; 3
    247a:	61 e0       	ldi	r22, 0x01	; 1
    247c:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    2480:	04 c0       	rjmp	.+8      	; 0x248a <Lcd_sendCmd+0x136>
    2482:	83 e0       	ldi	r24, 0x03	; 3
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	//Trigger Enable
	Trigger_Enable();
    248a:	0e 94 36 13 	call	0x266c	; 0x266c <Trigger_Enable>
}
    248e:	0f 90       	pop	r0
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <Lcd_sendChar>:
void Lcd_sendChar(unsigned char data){
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	0f 92       	push	r0
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	89 83       	std	Y+1, r24	; 0x01
	Dio_write(RS, HIGH);
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	Dio_write(RW, LOW);
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(data,7)) ? Dio_write(D7,HIGH) : Dio_write(D7,LOW);
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
    24b4:	88 23       	and	r24, r24
    24b6:	2c f4       	brge	.+10     	; 0x24c2 <Lcd_sendChar+0x2c>
    24b8:	86 e0       	ldi	r24, 0x06	; 6
    24ba:	61 e0       	ldi	r22, 0x01	; 1
    24bc:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    24c0:	04 c0       	rjmp	.+8      	; 0x24ca <Lcd_sendChar+0x34>
    24c2:	86 e0       	ldi	r24, 0x06	; 6
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(data,6)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	82 95       	swap	r24
    24ce:	86 95       	lsr	r24
    24d0:	86 95       	lsr	r24
    24d2:	83 70       	andi	r24, 0x03	; 3
    24d4:	88 2f       	mov	r24, r24
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	81 70       	andi	r24, 0x01	; 1
    24da:	90 70       	andi	r25, 0x00	; 0
    24dc:	88 23       	and	r24, r24
    24de:	29 f0       	breq	.+10     	; 0x24ea <Lcd_sendChar+0x54>
    24e0:	85 e0       	ldi	r24, 0x05	; 5
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    24e8:	04 c0       	rjmp	.+8      	; 0x24f2 <Lcd_sendChar+0x5c>
    24ea:	85 e0       	ldi	r24, 0x05	; 5
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(data,5)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
    24f2:	89 81       	ldd	r24, Y+1	; 0x01
    24f4:	82 95       	swap	r24
    24f6:	86 95       	lsr	r24
    24f8:	87 70       	andi	r24, 0x07	; 7
    24fa:	88 2f       	mov	r24, r24
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	81 70       	andi	r24, 0x01	; 1
    2500:	90 70       	andi	r25, 0x00	; 0
    2502:	88 23       	and	r24, r24
    2504:	29 f0       	breq	.+10     	; 0x2510 <Lcd_sendChar+0x7a>
    2506:	84 e0       	ldi	r24, 0x04	; 4
    2508:	61 e0       	ldi	r22, 0x01	; 1
    250a:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    250e:	04 c0       	rjmp	.+8      	; 0x2518 <Lcd_sendChar+0x82>
    2510:	84 e0       	ldi	r24, 0x04	; 4
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(data,4)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	82 95       	swap	r24
    251c:	8f 70       	andi	r24, 0x0F	; 15
    251e:	88 2f       	mov	r24, r24
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	81 70       	andi	r24, 0x01	; 1
    2524:	90 70       	andi	r25, 0x00	; 0
    2526:	88 23       	and	r24, r24
    2528:	29 f0       	breq	.+10     	; 0x2534 <Lcd_sendChar+0x9e>
    252a:	83 e0       	ldi	r24, 0x03	; 3
    252c:	61 e0       	ldi	r22, 0x01	; 1
    252e:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    2532:	04 c0       	rjmp	.+8      	; 0x253c <Lcd_sendChar+0xa6>
    2534:	83 e0       	ldi	r24, 0x03	; 3
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	//Trigger Enable
	Trigger_Enable();
    253c:	0e 94 36 13 	call	0x266c	; 0x266c <Trigger_Enable>
	(GET_BIT(data,3)) ? Dio_write(D7,HIGH) : Dio_write(D7,LOW);
    2540:	89 81       	ldd	r24, Y+1	; 0x01
    2542:	86 95       	lsr	r24
    2544:	86 95       	lsr	r24
    2546:	86 95       	lsr	r24
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	81 70       	andi	r24, 0x01	; 1
    254e:	90 70       	andi	r25, 0x00	; 0
    2550:	88 23       	and	r24, r24
    2552:	29 f0       	breq	.+10     	; 0x255e <Lcd_sendChar+0xc8>
    2554:	86 e0       	ldi	r24, 0x06	; 6
    2556:	61 e0       	ldi	r22, 0x01	; 1
    2558:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <Lcd_sendChar+0xd0>
    255e:	86 e0       	ldi	r24, 0x06	; 6
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(data,2)) ? Dio_write(D6,HIGH) : Dio_write(D6,LOW);
    2566:	89 81       	ldd	r24, Y+1	; 0x01
    2568:	86 95       	lsr	r24
    256a:	86 95       	lsr	r24
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	81 70       	andi	r24, 0x01	; 1
    2572:	90 70       	andi	r25, 0x00	; 0
    2574:	88 23       	and	r24, r24
    2576:	29 f0       	breq	.+10     	; 0x2582 <Lcd_sendChar+0xec>
    2578:	85 e0       	ldi	r24, 0x05	; 5
    257a:	61 e0       	ldi	r22, 0x01	; 1
    257c:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    2580:	04 c0       	rjmp	.+8      	; 0x258a <Lcd_sendChar+0xf4>
    2582:	85 e0       	ldi	r24, 0x05	; 5
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(data,1)) ? Dio_write(D5,HIGH) : Dio_write(D5,LOW);
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	86 95       	lsr	r24
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	81 70       	andi	r24, 0x01	; 1
    2594:	90 70       	andi	r25, 0x00	; 0
    2596:	88 23       	and	r24, r24
    2598:	29 f0       	breq	.+10     	; 0x25a4 <Lcd_sendChar+0x10e>
    259a:	84 e0       	ldi	r24, 0x04	; 4
    259c:	61 e0       	ldi	r22, 0x01	; 1
    259e:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    25a2:	04 c0       	rjmp	.+8      	; 0x25ac <Lcd_sendChar+0x116>
    25a4:	84 e0       	ldi	r24, 0x04	; 4
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	(GET_BIT(data,0)) ? Dio_write(D4,HIGH) : Dio_write(D4,LOW);
    25ac:	89 81       	ldd	r24, Y+1	; 0x01
    25ae:	88 2f       	mov	r24, r24
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	81 70       	andi	r24, 0x01	; 1
    25b4:	90 70       	andi	r25, 0x00	; 0
    25b6:	88 23       	and	r24, r24
    25b8:	29 f0       	breq	.+10     	; 0x25c4 <Lcd_sendChar+0x12e>
    25ba:	83 e0       	ldi	r24, 0x03	; 3
    25bc:	61 e0       	ldi	r22, 0x01	; 1
    25be:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    25c2:	04 c0       	rjmp	.+8      	; 0x25cc <Lcd_sendChar+0x136>
    25c4:	83 e0       	ldi	r24, 0x03	; 3
    25c6:	60 e0       	ldi	r22, 0x00	; 0
    25c8:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	//Trigger Enable
	Trigger_Enable();
    25cc:	0e 94 36 13 	call	0x266c	; 0x266c <Trigger_Enable>
}
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <Lcd_sendString>:

void Lcd_sendString(char *data)
{
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <Lcd_sendString+0x6>
    25de:	0f 92       	push	r0
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	9b 83       	std	Y+3, r25	; 0x03
    25e6:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char i=0;
    25e8:	19 82       	std	Y+1, r1	; 0x01
    25ea:	0e c0       	rjmp	.+28     	; 0x2608 <Lcd_sendString+0x30>
	while(data[i]!=0)
	{
		Lcd_sendChar(data[i]);
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	28 2f       	mov	r18, r24
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	9b 81       	ldd	r25, Y+3	; 0x03
    25f6:	fc 01       	movw	r30, r24
    25f8:	e2 0f       	add	r30, r18
    25fa:	f3 1f       	adc	r31, r19
    25fc:	80 81       	ld	r24, Z
    25fe:	0e 94 4b 12 	call	0x2496	; 0x2496 <Lcd_sendChar>
		i++;
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	8f 5f       	subi	r24, 0xFF	; 255
    2606:	89 83       	std	Y+1, r24	; 0x01
}

void Lcd_sendString(char *data)
{
	unsigned char i=0;
	while(data[i]!=0)
    2608:	89 81       	ldd	r24, Y+1	; 0x01
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	8a 81       	ldd	r24, Y+2	; 0x02
    2610:	9b 81       	ldd	r25, Y+3	; 0x03
    2612:	fc 01       	movw	r30, r24
    2614:	e2 0f       	add	r30, r18
    2616:	f3 1f       	adc	r31, r19
    2618:	80 81       	ld	r24, Z
    261a:	88 23       	and	r24, r24
    261c:	39 f7       	brne	.-50     	; 0x25ec <Lcd_sendString+0x14>
	{
		Lcd_sendChar(data[i]);
		i++;
	}
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <Lcd_sendString_xy>:

void Lcd_sendString_xy(char *data,unsigned char row,unsigned char col){
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <Lcd_sendString_xy+0x6>
    2630:	00 d0       	rcall	.+0      	; 0x2632 <Lcd_sendString_xy+0x8>
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	9a 83       	std	Y+2, r25	; 0x02
    2638:	89 83       	std	Y+1, r24	; 0x01
    263a:	6b 83       	std	Y+3, r22	; 0x03
    263c:	4c 83       	std	Y+4, r20	; 0x04
	Dio_write(RS, HIGH);
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	61 e0       	ldi	r22, 0x01	; 1
    2642:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	Dio_write(RW, LOW);
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>


		for(int j=1;j<=col;j++){
			Lcd_sendCmd(ShiftRight);
		}*/
		Set_Cursor_Pos(row,col);
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	6c 81       	ldd	r22, Y+4	; 0x04
    2652:	0e 94 81 17 	call	0x2f02	; 0x2f02 <Set_Cursor_Pos>
		Lcd_sendString(data);
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>

}
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <Trigger_Enable>:

static void Trigger_Enable(void){  //We make it static cuz we won't use it anywhere but here
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	cd b7       	in	r28, 0x3d	; 61
    2672:	de b7       	in	r29, 0x3e	; 62
    2674:	e0 97       	sbiw	r28, 0x30	; 48
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
	Dio_write(EN,HIGH);
    2680:	82 e0       	ldi	r24, 0x02	; 2
    2682:	61 e0       	ldi	r22, 0x01	; 1
    2684:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a0 e2       	ldi	r26, 0x20	; 32
    268e:	b1 e4       	ldi	r27, 0x41	; 65
    2690:	8d a7       	std	Y+45, r24	; 0x2d
    2692:	9e a7       	std	Y+46, r25	; 0x2e
    2694:	af a7       	std	Y+47, r26	; 0x2f
    2696:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2698:	6d a5       	ldd	r22, Y+45	; 0x2d
    269a:	7e a5       	ldd	r23, Y+46	; 0x2e
    269c:	8f a5       	ldd	r24, Y+47	; 0x2f
    269e:	98 a9       	ldd	r25, Y+48	; 0x30
    26a0:	2b ea       	ldi	r18, 0xAB	; 171
    26a2:	3a ea       	ldi	r19, 0xAA	; 170
    26a4:	4a ea       	ldi	r20, 0xAA	; 170
    26a6:	50 e4       	ldi	r21, 0x40	; 64
    26a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ac:	dc 01       	movw	r26, r24
    26ae:	cb 01       	movw	r24, r22
    26b0:	89 a7       	std	Y+41, r24	; 0x29
    26b2:	9a a7       	std	Y+42, r25	; 0x2a
    26b4:	ab a7       	std	Y+43, r26	; 0x2b
    26b6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    26b8:	69 a5       	ldd	r22, Y+41	; 0x29
    26ba:	7a a5       	ldd	r23, Y+42	; 0x2a
    26bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    26be:	9c a5       	ldd	r25, Y+44	; 0x2c
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e8       	ldi	r20, 0x80	; 128
    26c6:	5f e3       	ldi	r21, 0x3F	; 63
    26c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26cc:	88 23       	and	r24, r24
    26ce:	1c f4       	brge	.+6      	; 0x26d6 <Trigger_Enable+0x6a>
		__ticks = 1;
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	88 a7       	std	Y+40, r24	; 0x28
    26d4:	91 c0       	rjmp	.+290    	; 0x27f8 <Trigger_Enable+0x18c>
	else if (__tmp > 255)
    26d6:	69 a5       	ldd	r22, Y+41	; 0x29
    26d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    26da:	8b a5       	ldd	r24, Y+43	; 0x2b
    26dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4f e7       	ldi	r20, 0x7F	; 127
    26e4:	53 e4       	ldi	r21, 0x43	; 67
    26e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26ea:	18 16       	cp	r1, r24
    26ec:	0c f0       	brlt	.+2      	; 0x26f0 <Trigger_Enable+0x84>
    26ee:	7b c0       	rjmp	.+246    	; 0x27e6 <Trigger_Enable+0x17a>
	{
		_delay_ms(__us / 1000.0);
    26f0:	6d a5       	ldd	r22, Y+45	; 0x2d
    26f2:	7e a5       	ldd	r23, Y+46	; 0x2e
    26f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26f6:	98 a9       	ldd	r25, Y+48	; 0x30
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	4a e7       	ldi	r20, 0x7A	; 122
    26fe:	54 e4       	ldi	r21, 0x44	; 68
    2700:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2704:	dc 01       	movw	r26, r24
    2706:	cb 01       	movw	r24, r22
    2708:	8c a3       	std	Y+36, r24	; 0x24
    270a:	9d a3       	std	Y+37, r25	; 0x25
    270c:	ae a3       	std	Y+38, r26	; 0x26
    270e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2710:	6c a1       	ldd	r22, Y+36	; 0x24
    2712:	7d a1       	ldd	r23, Y+37	; 0x25
    2714:	8e a1       	ldd	r24, Y+38	; 0x26
    2716:	9f a1       	ldd	r25, Y+39	; 0x27
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	4a e7       	ldi	r20, 0x7A	; 122
    271e:	55 e4       	ldi	r21, 0x45	; 69
    2720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	88 a3       	std	Y+32, r24	; 0x20
    272a:	99 a3       	std	Y+33, r25	; 0x21
    272c:	aa a3       	std	Y+34, r26	; 0x22
    272e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2730:	68 a1       	ldd	r22, Y+32	; 0x20
    2732:	79 a1       	ldd	r23, Y+33	; 0x21
    2734:	8a a1       	ldd	r24, Y+34	; 0x22
    2736:	9b a1       	ldd	r25, Y+35	; 0x23
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e8       	ldi	r20, 0x80	; 128
    273e:	5f e3       	ldi	r21, 0x3F	; 63
    2740:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2744:	88 23       	and	r24, r24
    2746:	2c f4       	brge	.+10     	; 0x2752 <Trigger_Enable+0xe6>
		__ticks = 1;
    2748:	81 e0       	ldi	r24, 0x01	; 1
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	9f 8f       	std	Y+31, r25	; 0x1f
    274e:	8e 8f       	std	Y+30, r24	; 0x1e
    2750:	3f c0       	rjmp	.+126    	; 0x27d0 <Trigger_Enable+0x164>
	else if (__tmp > 65535)
    2752:	68 a1       	ldd	r22, Y+32	; 0x20
    2754:	79 a1       	ldd	r23, Y+33	; 0x21
    2756:	8a a1       	ldd	r24, Y+34	; 0x22
    2758:	9b a1       	ldd	r25, Y+35	; 0x23
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	3f ef       	ldi	r19, 0xFF	; 255
    275e:	4f e7       	ldi	r20, 0x7F	; 127
    2760:	57 e4       	ldi	r21, 0x47	; 71
    2762:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2766:	18 16       	cp	r1, r24
    2768:	4c f5       	brge	.+82     	; 0x27bc <Trigger_Enable+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276a:	6c a1       	ldd	r22, Y+36	; 0x24
    276c:	7d a1       	ldd	r23, Y+37	; 0x25
    276e:	8e a1       	ldd	r24, Y+38	; 0x26
    2770:	9f a1       	ldd	r25, Y+39	; 0x27
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	40 e2       	ldi	r20, 0x20	; 32
    2778:	51 e4       	ldi	r21, 0x41	; 65
    277a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	bc 01       	movw	r22, r24
    2784:	cd 01       	movw	r24, r26
    2786:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	9f 8f       	std	Y+31, r25	; 0x1f
    2790:	8e 8f       	std	Y+30, r24	; 0x1e
    2792:	0f c0       	rjmp	.+30     	; 0x27b2 <Trigger_Enable+0x146>
    2794:	80 e9       	ldi	r24, 0x90	; 144
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	9d 8f       	std	Y+29, r25	; 0x1d
    279a:	8c 8f       	std	Y+28, r24	; 0x1c
    279c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    279e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <Trigger_Enable+0x134>
    27a4:	9d 8f       	std	Y+29, r25	; 0x1d
    27a6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27a8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27aa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27ac:	01 97       	sbiw	r24, 0x01	; 1
    27ae:	9f 8f       	std	Y+31, r25	; 0x1f
    27b0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	69 f7       	brne	.-38     	; 0x2794 <Trigger_Enable+0x128>
    27ba:	24 c0       	rjmp	.+72     	; 0x2804 <Trigger_Enable+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27bc:	68 a1       	ldd	r22, Y+32	; 0x20
    27be:	79 a1       	ldd	r23, Y+33	; 0x21
    27c0:	8a a1       	ldd	r24, Y+34	; 0x22
    27c2:	9b a1       	ldd	r25, Y+35	; 0x23
    27c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	9f 8f       	std	Y+31, r25	; 0x1f
    27ce:	8e 8f       	std	Y+30, r24	; 0x1e
    27d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    27d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    27d4:	9b 8f       	std	Y+27, r25	; 0x1b
    27d6:	8a 8f       	std	Y+26, r24	; 0x1a
    27d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    27da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <Trigger_Enable+0x170>
    27e0:	9b 8f       	std	Y+27, r25	; 0x1b
    27e2:	8a 8f       	std	Y+26, r24	; 0x1a
    27e4:	0f c0       	rjmp	.+30     	; 0x2804 <Trigger_Enable+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27e6:	69 a5       	ldd	r22, Y+41	; 0x29
    27e8:	7a a5       	ldd	r23, Y+42	; 0x2a
    27ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    27ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    27ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	88 a7       	std	Y+40, r24	; 0x28
    27f8:	88 a5       	ldd	r24, Y+40	; 0x28
    27fa:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27fc:	89 8d       	ldd	r24, Y+25	; 0x19
    27fe:	8a 95       	dec	r24
    2800:	f1 f7       	brne	.-4      	; 0x27fe <Trigger_Enable+0x192>
    2802:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(10);
	Dio_write(EN,LOW);
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	aa ef       	ldi	r26, 0xFA	; 250
    2812:	b4 e4       	ldi	r27, 0x44	; 68
    2814:	8d 8b       	std	Y+21, r24	; 0x15
    2816:	9e 8b       	std	Y+22, r25	; 0x16
    2818:	af 8b       	std	Y+23, r26	; 0x17
    281a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    281c:	6d 89       	ldd	r22, Y+21	; 0x15
    281e:	7e 89       	ldd	r23, Y+22	; 0x16
    2820:	8f 89       	ldd	r24, Y+23	; 0x17
    2822:	98 8d       	ldd	r25, Y+24	; 0x18
    2824:	2b ea       	ldi	r18, 0xAB	; 171
    2826:	3a ea       	ldi	r19, 0xAA	; 170
    2828:	4a ea       	ldi	r20, 0xAA	; 170
    282a:	50 e4       	ldi	r21, 0x40	; 64
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	89 8b       	std	Y+17, r24	; 0x11
    2836:	9a 8b       	std	Y+18, r25	; 0x12
    2838:	ab 8b       	std	Y+19, r26	; 0x13
    283a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    283c:	69 89       	ldd	r22, Y+17	; 0x11
    283e:	7a 89       	ldd	r23, Y+18	; 0x12
    2840:	8b 89       	ldd	r24, Y+19	; 0x13
    2842:	9c 89       	ldd	r25, Y+20	; 0x14
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e8       	ldi	r20, 0x80	; 128
    284a:	5f e3       	ldi	r21, 0x3F	; 63
    284c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2850:	88 23       	and	r24, r24
    2852:	1c f4       	brge	.+6      	; 0x285a <Trigger_Enable+0x1ee>
		__ticks = 1;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	88 8b       	std	Y+16, r24	; 0x10
    2858:	91 c0       	rjmp	.+290    	; 0x297c <Trigger_Enable+0x310>
	else if (__tmp > 255)
    285a:	69 89       	ldd	r22, Y+17	; 0x11
    285c:	7a 89       	ldd	r23, Y+18	; 0x12
    285e:	8b 89       	ldd	r24, Y+19	; 0x13
    2860:	9c 89       	ldd	r25, Y+20	; 0x14
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	4f e7       	ldi	r20, 0x7F	; 127
    2868:	53 e4       	ldi	r21, 0x43	; 67
    286a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    286e:	18 16       	cp	r1, r24
    2870:	0c f0       	brlt	.+2      	; 0x2874 <Trigger_Enable+0x208>
    2872:	7b c0       	rjmp	.+246    	; 0x296a <Trigger_Enable+0x2fe>
	{
		_delay_ms(__us / 1000.0);
    2874:	6d 89       	ldd	r22, Y+21	; 0x15
    2876:	7e 89       	ldd	r23, Y+22	; 0x16
    2878:	8f 89       	ldd	r24, Y+23	; 0x17
    287a:	98 8d       	ldd	r25, Y+24	; 0x18
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	4a e7       	ldi	r20, 0x7A	; 122
    2882:	54 e4       	ldi	r21, 0x44	; 68
    2884:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	8c 87       	std	Y+12, r24	; 0x0c
    288e:	9d 87       	std	Y+13, r25	; 0x0d
    2890:	ae 87       	std	Y+14, r26	; 0x0e
    2892:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2894:	6c 85       	ldd	r22, Y+12	; 0x0c
    2896:	7d 85       	ldd	r23, Y+13	; 0x0d
    2898:	8e 85       	ldd	r24, Y+14	; 0x0e
    289a:	9f 85       	ldd	r25, Y+15	; 0x0f
    289c:	20 e0       	ldi	r18, 0x00	; 0
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	4a e7       	ldi	r20, 0x7A	; 122
    28a2:	55 e4       	ldi	r21, 0x45	; 69
    28a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	88 87       	std	Y+8, r24	; 0x08
    28ae:	99 87       	std	Y+9, r25	; 0x09
    28b0:	aa 87       	std	Y+10, r26	; 0x0a
    28b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    28b4:	68 85       	ldd	r22, Y+8	; 0x08
    28b6:	79 85       	ldd	r23, Y+9	; 0x09
    28b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	40 e8       	ldi	r20, 0x80	; 128
    28c2:	5f e3       	ldi	r21, 0x3F	; 63
    28c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28c8:	88 23       	and	r24, r24
    28ca:	2c f4       	brge	.+10     	; 0x28d6 <Trigger_Enable+0x26a>
		__ticks = 1;
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	9f 83       	std	Y+7, r25	; 0x07
    28d2:	8e 83       	std	Y+6, r24	; 0x06
    28d4:	3f c0       	rjmp	.+126    	; 0x2954 <Trigger_Enable+0x2e8>
	else if (__tmp > 65535)
    28d6:	68 85       	ldd	r22, Y+8	; 0x08
    28d8:	79 85       	ldd	r23, Y+9	; 0x09
    28da:	8a 85       	ldd	r24, Y+10	; 0x0a
    28dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	3f ef       	ldi	r19, 0xFF	; 255
    28e2:	4f e7       	ldi	r20, 0x7F	; 127
    28e4:	57 e4       	ldi	r21, 0x47	; 71
    28e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28ea:	18 16       	cp	r1, r24
    28ec:	4c f5       	brge	.+82     	; 0x2940 <Trigger_Enable+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    28f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    28f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    28f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	40 e2       	ldi	r20, 0x20	; 32
    28fc:	51 e4       	ldi	r21, 0x41	; 65
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290e:	dc 01       	movw	r26, r24
    2910:	cb 01       	movw	r24, r22
    2912:	9f 83       	std	Y+7, r25	; 0x07
    2914:	8e 83       	std	Y+6, r24	; 0x06
    2916:	0f c0       	rjmp	.+30     	; 0x2936 <Trigger_Enable+0x2ca>
    2918:	80 e9       	ldi	r24, 0x90	; 144
    291a:	91 e0       	ldi	r25, 0x01	; 1
    291c:	9d 83       	std	Y+5, r25	; 0x05
    291e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2920:	8c 81       	ldd	r24, Y+4	; 0x04
    2922:	9d 81       	ldd	r25, Y+5	; 0x05
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <Trigger_Enable+0x2b8>
    2928:	9d 83       	std	Y+5, r25	; 0x05
    292a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    292c:	8e 81       	ldd	r24, Y+6	; 0x06
    292e:	9f 81       	ldd	r25, Y+7	; 0x07
    2930:	01 97       	sbiw	r24, 0x01	; 1
    2932:	9f 83       	std	Y+7, r25	; 0x07
    2934:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2936:	8e 81       	ldd	r24, Y+6	; 0x06
    2938:	9f 81       	ldd	r25, Y+7	; 0x07
    293a:	00 97       	sbiw	r24, 0x00	; 0
    293c:	69 f7       	brne	.-38     	; 0x2918 <Trigger_Enable+0x2ac>
    293e:	24 c0       	rjmp	.+72     	; 0x2988 <Trigger_Enable+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2940:	68 85       	ldd	r22, Y+8	; 0x08
    2942:	79 85       	ldd	r23, Y+9	; 0x09
    2944:	8a 85       	ldd	r24, Y+10	; 0x0a
    2946:	9b 85       	ldd	r25, Y+11	; 0x0b
    2948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	9f 83       	std	Y+7, r25	; 0x07
    2952:	8e 83       	std	Y+6, r24	; 0x06
    2954:	8e 81       	ldd	r24, Y+6	; 0x06
    2956:	9f 81       	ldd	r25, Y+7	; 0x07
    2958:	9b 83       	std	Y+3, r25	; 0x03
    295a:	8a 83       	std	Y+2, r24	; 0x02
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	9b 81       	ldd	r25, Y+3	; 0x03
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	f1 f7       	brne	.-4      	; 0x2960 <Trigger_Enable+0x2f4>
    2964:	9b 83       	std	Y+3, r25	; 0x03
    2966:	8a 83       	std	Y+2, r24	; 0x02
    2968:	0f c0       	rjmp	.+30     	; 0x2988 <Trigger_Enable+0x31c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    296a:	69 89       	ldd	r22, Y+17	; 0x11
    296c:	7a 89       	ldd	r23, Y+18	; 0x12
    296e:	8b 89       	ldd	r24, Y+19	; 0x13
    2970:	9c 89       	ldd	r25, Y+20	; 0x14
    2972:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	88 8b       	std	Y+16, r24	; 0x10
    297c:	88 89       	ldd	r24, Y+16	; 0x10
    297e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	8a 95       	dec	r24
    2984:	f1 f7       	brne	.-4      	; 0x2982 <Trigger_Enable+0x316>
    2986:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2000);
}
    2988:	e0 96       	adiw	r28, 0x30	; 48
    298a:	0f b6       	in	r0, 0x3f	; 63
    298c:	f8 94       	cli
    298e:	de bf       	out	0x3e, r29	; 62
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	cd bf       	out	0x3d, r28	; 61
    2994:	cf 91       	pop	r28
    2996:	df 91       	pop	r29
    2998:	08 95       	ret

0000299a <Lcd_displayNum>:

//A function to display Numbers instead of characters
void Lcd_displayNum(uint16_t num)
{
    299a:	df 93       	push	r29
    299c:	cf 93       	push	r28
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	2e 97       	sbiw	r28, 0x0e	; 14
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	9e 87       	std	Y+14, r25	; 0x0e
    29b0:	8d 87       	std	Y+13, r24	; 0x0d
	Dio_write(RS, HIGH);
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	61 e0       	ldi	r22, 0x01	; 1
    29b6:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	Dio_write(RW, LOW);
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>

	 uint8_t ch[10],i=0,j=0;
    29c2:	1a 82       	std	Y+2, r1	; 0x02
    29c4:	19 82       	std	Y+1, r1	; 0x01
		   if(num == 0)
    29c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ca:	00 97       	sbiw	r24, 0x00	; 0
    29cc:	11 f5       	brne	.+68     	; 0x2a12 <Lcd_displayNum+0x78>
		   {
			   Lcd_sendChar('0');
    29ce:	80 e3       	ldi	r24, 0x30	; 48
    29d0:	0e 94 4b 12 	call	0x2496	; 0x2496 <Lcd_sendChar>
    29d4:	39 c0       	rjmp	.+114    	; 0x2a48 <Lcd_displayNum+0xae>
		   }
		   else
		   {
			   while(num)
			   {
					ch[i] = num % 10 + '0';  //To convert int to char
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	e8 2f       	mov	r30, r24
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29de:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e0:	2a e0       	ldi	r18, 0x0A	; 10
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	b9 01       	movw	r22, r18
    29e6:	0e 94 8d 1c 	call	0x391a	; 0x391a <__udivmodhi4>
    29ea:	28 2f       	mov	r18, r24
    29ec:	20 5d       	subi	r18, 0xD0	; 208
    29ee:	ce 01       	movw	r24, r28
    29f0:	03 96       	adiw	r24, 0x03	; 3
    29f2:	e8 0f       	add	r30, r24
    29f4:	f9 1f       	adc	r31, r25
    29f6:	20 83       	st	Z, r18
					num /= 10;
    29f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fc:	2a e0       	ldi	r18, 0x0A	; 10
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	b9 01       	movw	r22, r18
    2a02:	0e 94 8d 1c 	call	0x391a	; 0x391a <__udivmodhi4>
    2a06:	cb 01       	movw	r24, r22
    2a08:	9e 87       	std	Y+14, r25	; 0x0e
    2a0a:	8d 87       	std	Y+13, r24	; 0x0d
					i++;
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	8f 5f       	subi	r24, 0xFF	; 255
    2a10:	8a 83       	std	Y+2, r24	; 0x02
		   {
			   Lcd_sendChar('0');
		   }
		   else
		   {
			   while(num)
    2a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	f1 f6       	brne	.-68     	; 0x29d6 <Lcd_displayNum+0x3c>
			   {
					ch[i] = num % 10 + '0';  //To convert int to char
					num /= 10;
					i++;
			   } //Thus number entered is reversed so, we want to display it correctly
			   for(j=i;j>0;j--)
    2a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	11 c0       	rjmp	.+34     	; 0x2a42 <Lcd_displayNum+0xa8>
			   {
				   Lcd_sendChar(ch[j-1]);
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	9c 01       	movw	r18, r24
    2a28:	21 50       	subi	r18, 0x01	; 1
    2a2a:	30 40       	sbci	r19, 0x00	; 0
    2a2c:	ce 01       	movw	r24, r28
    2a2e:	03 96       	adiw	r24, 0x03	; 3
    2a30:	fc 01       	movw	r30, r24
    2a32:	e2 0f       	add	r30, r18
    2a34:	f3 1f       	adc	r31, r19
    2a36:	80 81       	ld	r24, Z
    2a38:	0e 94 4b 12 	call	0x2496	; 0x2496 <Lcd_sendChar>
			   {
					ch[i] = num % 10 + '0';  //To convert int to char
					num /= 10;
					i++;
			   } //Thus number entered is reversed so, we want to display it correctly
			   for(j=i;j>0;j--)
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	81 50       	subi	r24, 0x01	; 1
    2a40:	89 83       	std	Y+1, r24	; 0x01
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	88 23       	and	r24, r24
    2a46:	61 f7       	brne	.-40     	; 0x2a20 <Lcd_displayNum+0x86>
			   {
				   Lcd_sendChar(ch[j-1]);
			   }
		   }
}
    2a48:	2e 96       	adiw	r28, 0x0e	; 14
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	cf 91       	pop	r28
    2a56:	df 91       	pop	r29
    2a58:	08 95       	ret

00002a5a <Lcd_displayNum_xy>:

void Lcd_displayNum_xy(uint16_t num,unsigned char row,unsigned char col){
    2a5a:	df 93       	push	r29
    2a5c:	cf 93       	push	r28
    2a5e:	cd b7       	in	r28, 0x3d	; 61
    2a60:	de b7       	in	r29, 0x3e	; 62
    2a62:	a2 97       	sbiw	r28, 0x22	; 34
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	f8 94       	cli
    2a68:	de bf       	out	0x3e, r29	; 62
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	cd bf       	out	0x3d, r28	; 61
    2a6e:	98 a3       	std	Y+32, r25	; 0x20
    2a70:	8f 8f       	std	Y+31, r24	; 0x1f
    2a72:	69 a3       	std	Y+33, r22	; 0x21
    2a74:	4a a3       	std	Y+34, r20	; 0x22

	Dio_write(RS, HIGH);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	61 e0       	ldi	r22, 0x01	; 1
    2a7a:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	Dio_write(RW, LOW);
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>


	if(row == 1){
    2a86:	89 a1       	ldd	r24, Y+33	; 0x21
    2a88:	81 30       	cpi	r24, 0x01	; 1
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <Lcd_displayNum_xy+0x34>
    2a8c:	76 c0       	rjmp	.+236    	; 0x2b7a <Lcd_displayNum_xy+0x120>
		Lcd_sendCmd(Force1stline);
    2a8e:	80 e8       	ldi	r24, 0x80	; 128
    2a90:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e0       	ldi	r25, 0x00	; 0
    2a98:	a0 e8       	ldi	r26, 0x80	; 128
    2a9a:	bf e3       	ldi	r27, 0x3F	; 63
    2a9c:	89 8f       	std	Y+25, r24	; 0x19
    2a9e:	9a 8f       	std	Y+26, r25	; 0x1a
    2aa0:	ab 8f       	std	Y+27, r26	; 0x1b
    2aa2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aa4:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	4a e7       	ldi	r20, 0x7A	; 122
    2ab2:	55 e4       	ldi	r21, 0x45	; 69
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	8d 8b       	std	Y+21, r24	; 0x15
    2abe:	9e 8b       	std	Y+22, r25	; 0x16
    2ac0:	af 8b       	std	Y+23, r26	; 0x17
    2ac2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    2aca:	98 8d       	ldd	r25, Y+24	; 0x18
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	40 e8       	ldi	r20, 0x80	; 128
    2ad2:	5f e3       	ldi	r21, 0x3F	; 63
    2ad4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ad8:	88 23       	and	r24, r24
    2ada:	2c f4       	brge	.+10     	; 0x2ae6 <Lcd_displayNum_xy+0x8c>
		__ticks = 1;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9c 8b       	std	Y+20, r25	; 0x14
    2ae2:	8b 8b       	std	Y+19, r24	; 0x13
    2ae4:	3f c0       	rjmp	.+126    	; 0x2b64 <Lcd_displayNum_xy+0x10a>
	else if (__tmp > 65535)
    2ae6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ae8:	7e 89       	ldd	r23, Y+22	; 0x16
    2aea:	8f 89       	ldd	r24, Y+23	; 0x17
    2aec:	98 8d       	ldd	r25, Y+24	; 0x18
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	3f ef       	ldi	r19, 0xFF	; 255
    2af2:	4f e7       	ldi	r20, 0x7F	; 127
    2af4:	57 e4       	ldi	r21, 0x47	; 71
    2af6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2afa:	18 16       	cp	r1, r24
    2afc:	4c f5       	brge	.+82     	; 0x2b50 <Lcd_displayNum_xy+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2afe:	69 8d       	ldd	r22, Y+25	; 0x19
    2b00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e2       	ldi	r20, 0x20	; 32
    2b0c:	51 e4       	ldi	r21, 0x41	; 65
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	bc 01       	movw	r22, r24
    2b18:	cd 01       	movw	r24, r26
    2b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	9c 8b       	std	Y+20, r25	; 0x14
    2b24:	8b 8b       	std	Y+19, r24	; 0x13
    2b26:	0f c0       	rjmp	.+30     	; 0x2b46 <Lcd_displayNum_xy+0xec>
    2b28:	80 e9       	ldi	r24, 0x90	; 144
    2b2a:	91 e0       	ldi	r25, 0x01	; 1
    2b2c:	9a 8b       	std	Y+18, r25	; 0x12
    2b2e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b30:	89 89       	ldd	r24, Y+17	; 0x11
    2b32:	9a 89       	ldd	r25, Y+18	; 0x12
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	f1 f7       	brne	.-4      	; 0x2b34 <Lcd_displayNum_xy+0xda>
    2b38:	9a 8b       	std	Y+18, r25	; 0x12
    2b3a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b40:	01 97       	sbiw	r24, 0x01	; 1
    2b42:	9c 8b       	std	Y+20, r25	; 0x14
    2b44:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b46:	8b 89       	ldd	r24, Y+19	; 0x13
    2b48:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4a:	00 97       	sbiw	r24, 0x00	; 0
    2b4c:	69 f7       	brne	.-38     	; 0x2b28 <Lcd_displayNum_xy+0xce>
    2b4e:	8e c0       	rjmp	.+284    	; 0x2c6c <Lcd_displayNum_xy+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b50:	6d 89       	ldd	r22, Y+21	; 0x15
    2b52:	7e 89       	ldd	r23, Y+22	; 0x16
    2b54:	8f 89       	ldd	r24, Y+23	; 0x17
    2b56:	98 8d       	ldd	r25, Y+24	; 0x18
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9c 8b       	std	Y+20, r25	; 0x14
    2b62:	8b 8b       	std	Y+19, r24	; 0x13
    2b64:	8b 89       	ldd	r24, Y+19	; 0x13
    2b66:	9c 89       	ldd	r25, Y+20	; 0x14
    2b68:	98 8b       	std	Y+16, r25	; 0x10
    2b6a:	8f 87       	std	Y+15, r24	; 0x0f
    2b6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b6e:	98 89       	ldd	r25, Y+16	; 0x10
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <Lcd_displayNum_xy+0x116>
    2b74:	98 8b       	std	Y+16, r25	; 0x10
    2b76:	8f 87       	std	Y+15, r24	; 0x0f
    2b78:	79 c0       	rjmp	.+242    	; 0x2c6c <Lcd_displayNum_xy+0x212>
		_delay_ms(1);
	}else if(row == 2){
    2b7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b7c:	82 30       	cpi	r24, 0x02	; 2
    2b7e:	09 f0       	breq	.+2      	; 0x2b82 <Lcd_displayNum_xy+0x128>
    2b80:	75 c0       	rjmp	.+234    	; 0x2c6c <Lcd_displayNum_xy+0x212>
		Lcd_sendCmd(Force2ndline);
    2b82:	80 ec       	ldi	r24, 0xC0	; 192
    2b84:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	a0 e2       	ldi	r26, 0x20	; 32
    2b8e:	b1 e4       	ldi	r27, 0x41	; 65
    2b90:	8b 87       	std	Y+11, r24	; 0x0b
    2b92:	9c 87       	std	Y+12, r25	; 0x0c
    2b94:	ad 87       	std	Y+13, r26	; 0x0d
    2b96:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b98:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b9c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b9e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba0:	20 e0       	ldi	r18, 0x00	; 0
    2ba2:	30 e0       	ldi	r19, 0x00	; 0
    2ba4:	4a e7       	ldi	r20, 0x7A	; 122
    2ba6:	55 e4       	ldi	r21, 0x45	; 69
    2ba8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bac:	dc 01       	movw	r26, r24
    2bae:	cb 01       	movw	r24, r22
    2bb0:	8f 83       	std	Y+7, r24	; 0x07
    2bb2:	98 87       	std	Y+8, r25	; 0x08
    2bb4:	a9 87       	std	Y+9, r26	; 0x09
    2bb6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bb8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bba:	78 85       	ldd	r23, Y+8	; 0x08
    2bbc:	89 85       	ldd	r24, Y+9	; 0x09
    2bbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	40 e8       	ldi	r20, 0x80	; 128
    2bc6:	5f e3       	ldi	r21, 0x3F	; 63
    2bc8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bcc:	88 23       	and	r24, r24
    2bce:	2c f4       	brge	.+10     	; 0x2bda <Lcd_displayNum_xy+0x180>
		__ticks = 1;
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9e 83       	std	Y+6, r25	; 0x06
    2bd6:	8d 83       	std	Y+5, r24	; 0x05
    2bd8:	3f c0       	rjmp	.+126    	; 0x2c58 <Lcd_displayNum_xy+0x1fe>
	else if (__tmp > 65535)
    2bda:	6f 81       	ldd	r22, Y+7	; 0x07
    2bdc:	78 85       	ldd	r23, Y+8	; 0x08
    2bde:	89 85       	ldd	r24, Y+9	; 0x09
    2be0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	3f ef       	ldi	r19, 0xFF	; 255
    2be6:	4f e7       	ldi	r20, 0x7F	; 127
    2be8:	57 e4       	ldi	r21, 0x47	; 71
    2bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bee:	18 16       	cp	r1, r24
    2bf0:	4c f5       	brge	.+82     	; 0x2c44 <Lcd_displayNum_xy+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e2       	ldi	r20, 0x20	; 32
    2c00:	51 e4       	ldi	r21, 0x41	; 65
    2c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	cd 01       	movw	r24, r26
    2c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	9e 83       	std	Y+6, r25	; 0x06
    2c18:	8d 83       	std	Y+5, r24	; 0x05
    2c1a:	0f c0       	rjmp	.+30     	; 0x2c3a <Lcd_displayNum_xy+0x1e0>
    2c1c:	80 e9       	ldi	r24, 0x90	; 144
    2c1e:	91 e0       	ldi	r25, 0x01	; 1
    2c20:	9c 83       	std	Y+4, r25	; 0x04
    2c22:	8b 83       	std	Y+3, r24	; 0x03
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	9c 81       	ldd	r25, Y+4	; 0x04
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	f1 f7       	brne	.-4      	; 0x2c28 <Lcd_displayNum_xy+0x1ce>
    2c2c:	9c 83       	std	Y+4, r25	; 0x04
    2c2e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c30:	8d 81       	ldd	r24, Y+5	; 0x05
    2c32:	9e 81       	ldd	r25, Y+6	; 0x06
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3e:	00 97       	sbiw	r24, 0x00	; 0
    2c40:	69 f7       	brne	.-38     	; 0x2c1c <Lcd_displayNum_xy+0x1c2>
    2c42:	14 c0       	rjmp	.+40     	; 0x2c6c <Lcd_displayNum_xy+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c44:	6f 81       	ldd	r22, Y+7	; 0x07
    2c46:	78 85       	ldd	r23, Y+8	; 0x08
    2c48:	89 85       	ldd	r24, Y+9	; 0x09
    2c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	8d 83       	std	Y+5, r24	; 0x05
    2c58:	8d 81       	ldd	r24, Y+5	; 0x05
    2c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	89 81       	ldd	r24, Y+1	; 0x01
    2c62:	9a 81       	ldd	r25, Y+2	; 0x02
    2c64:	01 97       	sbiw	r24, 0x01	; 1
    2c66:	f1 f7       	brne	.-4      	; 0x2c64 <Lcd_displayNum_xy+0x20a>
    2c68:	9a 83       	std	Y+2, r25	; 0x02
    2c6a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}


	for(int j=1;j<=col;j++){
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	9e 8f       	std	Y+30, r25	; 0x1e
    2c72:	8d 8f       	std	Y+29, r24	; 0x1d
    2c74:	08 c0       	rjmp	.+16     	; 0x2c86 <Lcd_displayNum_xy+0x22c>
		Lcd_sendCmd(ShiftRight);
    2c76:	8c e1       	ldi	r24, 0x1C	; 28
    2c78:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
		Lcd_sendCmd(Force2ndline);
		_delay_ms(10);
	}


	for(int j=1;j<=col;j++){
    2c7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c80:	01 96       	adiw	r24, 0x01	; 1
    2c82:	9e 8f       	std	Y+30, r25	; 0x1e
    2c84:	8d 8f       	std	Y+29, r24	; 0x1d
    2c86:	8a a1       	ldd	r24, Y+34	; 0x22
    2c88:	28 2f       	mov	r18, r24
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c90:	28 17       	cp	r18, r24
    2c92:	39 07       	cpc	r19, r25
    2c94:	84 f7       	brge	.-32     	; 0x2c76 <Lcd_displayNum_xy+0x21c>
		Lcd_sendCmd(ShiftRight);
	}

	Lcd_displayNum(num);
    2c96:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c98:	98 a1       	ldd	r25, Y+32	; 0x20
    2c9a:	0e 94 cd 14 	call	0x299a	; 0x299a <Lcd_displayNum>

	}
    2c9e:	a2 96       	adiw	r28, 0x22	; 34
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	de bf       	out	0x3e, r29	; 62
    2ca6:	0f be       	out	0x3f, r0	; 63
    2ca8:	cd bf       	out	0x3d, r28	; 61
    2caa:	cf 91       	pop	r28
    2cac:	df 91       	pop	r29
    2cae:	08 95       	ret

00002cb0 <Lcd_sendChar_xy>:

void Lcd_sendChar_xy(unsigned char data,unsigned char row,unsigned char col){
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	cd b7       	in	r28, 0x3d	; 61
    2cb6:	de b7       	in	r29, 0x3e	; 62
    2cb8:	a1 97       	sbiw	r28, 0x21	; 33
    2cba:	0f b6       	in	r0, 0x3f	; 63
    2cbc:	f8 94       	cli
    2cbe:	de bf       	out	0x3e, r29	; 62
    2cc0:	0f be       	out	0x3f, r0	; 63
    2cc2:	cd bf       	out	0x3d, r28	; 61
    2cc4:	8f 8f       	std	Y+31, r24	; 0x1f
    2cc6:	68 a3       	std	Y+32, r22	; 0x20
    2cc8:	49 a3       	std	Y+33, r20	; 0x21
	Dio_write(RS, HIGH);
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	61 e0       	ldi	r22, 0x01	; 1
    2cce:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>
	Dio_write(RW, LOW);
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	0e 94 15 0c 	call	0x182a	; 0x182a <Dio_write>


	if(row == 1){
    2cda:	88 a1       	ldd	r24, Y+32	; 0x20
    2cdc:	81 30       	cpi	r24, 0x01	; 1
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <Lcd_sendChar_xy+0x32>
    2ce0:	76 c0       	rjmp	.+236    	; 0x2dce <Lcd_sendChar_xy+0x11e>
		Lcd_sendCmd(Force1stline);
    2ce2:	80 e8       	ldi	r24, 0x80	; 128
    2ce4:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	a0 e8       	ldi	r26, 0x80	; 128
    2cee:	bf e3       	ldi	r27, 0x3F	; 63
    2cf0:	89 8f       	std	Y+25, r24	; 0x19
    2cf2:	9a 8f       	std	Y+26, r25	; 0x1a
    2cf4:	ab 8f       	std	Y+27, r26	; 0x1b
    2cf6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cf8:	69 8d       	ldd	r22, Y+25	; 0x19
    2cfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	4a e7       	ldi	r20, 0x7A	; 122
    2d06:	55 e4       	ldi	r21, 0x45	; 69
    2d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	8d 8b       	std	Y+21, r24	; 0x15
    2d12:	9e 8b       	std	Y+22, r25	; 0x16
    2d14:	af 8b       	std	Y+23, r26	; 0x17
    2d16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d18:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	40 e8       	ldi	r20, 0x80	; 128
    2d26:	5f e3       	ldi	r21, 0x3F	; 63
    2d28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d2c:	88 23       	and	r24, r24
    2d2e:	2c f4       	brge	.+10     	; 0x2d3a <Lcd_sendChar_xy+0x8a>
		__ticks = 1;
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9c 8b       	std	Y+20, r25	; 0x14
    2d36:	8b 8b       	std	Y+19, r24	; 0x13
    2d38:	3f c0       	rjmp	.+126    	; 0x2db8 <Lcd_sendChar_xy+0x108>
	else if (__tmp > 65535)
    2d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d40:	98 8d       	ldd	r25, Y+24	; 0x18
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	3f ef       	ldi	r19, 0xFF	; 255
    2d46:	4f e7       	ldi	r20, 0x7F	; 127
    2d48:	57 e4       	ldi	r21, 0x47	; 71
    2d4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d4e:	18 16       	cp	r1, r24
    2d50:	4c f5       	brge	.+82     	; 0x2da4 <Lcd_sendChar_xy+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d52:	69 8d       	ldd	r22, Y+25	; 0x19
    2d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	40 e2       	ldi	r20, 0x20	; 32
    2d60:	51 e4       	ldi	r21, 0x41	; 65
    2d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d66:	dc 01       	movw	r26, r24
    2d68:	cb 01       	movw	r24, r22
    2d6a:	bc 01       	movw	r22, r24
    2d6c:	cd 01       	movw	r24, r26
    2d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d72:	dc 01       	movw	r26, r24
    2d74:	cb 01       	movw	r24, r22
    2d76:	9c 8b       	std	Y+20, r25	; 0x14
    2d78:	8b 8b       	std	Y+19, r24	; 0x13
    2d7a:	0f c0       	rjmp	.+30     	; 0x2d9a <Lcd_sendChar_xy+0xea>
    2d7c:	80 e9       	ldi	r24, 0x90	; 144
    2d7e:	91 e0       	ldi	r25, 0x01	; 1
    2d80:	9a 8b       	std	Y+18, r25	; 0x12
    2d82:	89 8b       	std	Y+17, r24	; 0x11
    2d84:	89 89       	ldd	r24, Y+17	; 0x11
    2d86:	9a 89       	ldd	r25, Y+18	; 0x12
    2d88:	01 97       	sbiw	r24, 0x01	; 1
    2d8a:	f1 f7       	brne	.-4      	; 0x2d88 <Lcd_sendChar_xy+0xd8>
    2d8c:	9a 8b       	std	Y+18, r25	; 0x12
    2d8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d90:	8b 89       	ldd	r24, Y+19	; 0x13
    2d92:	9c 89       	ldd	r25, Y+20	; 0x14
    2d94:	01 97       	sbiw	r24, 0x01	; 1
    2d96:	9c 8b       	std	Y+20, r25	; 0x14
    2d98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	69 f7       	brne	.-38     	; 0x2d7c <Lcd_sendChar_xy+0xcc>
    2da2:	8e c0       	rjmp	.+284    	; 0x2ec0 <Lcd_sendChar_xy+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da4:	6d 89       	ldd	r22, Y+21	; 0x15
    2da6:	7e 89       	ldd	r23, Y+22	; 0x16
    2da8:	8f 89       	ldd	r24, Y+23	; 0x17
    2daa:	98 8d       	ldd	r25, Y+24	; 0x18
    2dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	9c 8b       	std	Y+20, r25	; 0x14
    2db6:	8b 8b       	std	Y+19, r24	; 0x13
    2db8:	8b 89       	ldd	r24, Y+19	; 0x13
    2dba:	9c 89       	ldd	r25, Y+20	; 0x14
    2dbc:	98 8b       	std	Y+16, r25	; 0x10
    2dbe:	8f 87       	std	Y+15, r24	; 0x0f
    2dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc2:	98 89       	ldd	r25, Y+16	; 0x10
    2dc4:	01 97       	sbiw	r24, 0x01	; 1
    2dc6:	f1 f7       	brne	.-4      	; 0x2dc4 <Lcd_sendChar_xy+0x114>
    2dc8:	98 8b       	std	Y+16, r25	; 0x10
    2dca:	8f 87       	std	Y+15, r24	; 0x0f
    2dcc:	79 c0       	rjmp	.+242    	; 0x2ec0 <Lcd_sendChar_xy+0x210>
		_delay_ms(1);
	}else if(row == 2){
    2dce:	88 a1       	ldd	r24, Y+32	; 0x20
    2dd0:	82 30       	cpi	r24, 0x02	; 2
    2dd2:	09 f0       	breq	.+2      	; 0x2dd6 <Lcd_sendChar_xy+0x126>
    2dd4:	75 c0       	rjmp	.+234    	; 0x2ec0 <Lcd_sendChar_xy+0x210>
		Lcd_sendCmd(Force2ndline);
    2dd6:	80 ec       	ldi	r24, 0xC0	; 192
    2dd8:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	a0 e2       	ldi	r26, 0x20	; 32
    2de2:	b1 e4       	ldi	r27, 0x41	; 65
    2de4:	8b 87       	std	Y+11, r24	; 0x0b
    2de6:	9c 87       	std	Y+12, r25	; 0x0c
    2de8:	ad 87       	std	Y+13, r26	; 0x0d
    2dea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dec:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dee:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df4:	20 e0       	ldi	r18, 0x00	; 0
    2df6:	30 e0       	ldi	r19, 0x00	; 0
    2df8:	4a e7       	ldi	r20, 0x7A	; 122
    2dfa:	55 e4       	ldi	r21, 0x45	; 69
    2dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e00:	dc 01       	movw	r26, r24
    2e02:	cb 01       	movw	r24, r22
    2e04:	8f 83       	std	Y+7, r24	; 0x07
    2e06:	98 87       	std	Y+8, r25	; 0x08
    2e08:	a9 87       	std	Y+9, r26	; 0x09
    2e0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0e:	78 85       	ldd	r23, Y+8	; 0x08
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e8       	ldi	r20, 0x80	; 128
    2e1a:	5f e3       	ldi	r21, 0x3F	; 63
    2e1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e20:	88 23       	and	r24, r24
    2e22:	2c f4       	brge	.+10     	; 0x2e2e <Lcd_sendChar_xy+0x17e>
		__ticks = 1;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	9e 83       	std	Y+6, r25	; 0x06
    2e2a:	8d 83       	std	Y+5, r24	; 0x05
    2e2c:	3f c0       	rjmp	.+126    	; 0x2eac <Lcd_sendChar_xy+0x1fc>
	else if (__tmp > 65535)
    2e2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e30:	78 85       	ldd	r23, Y+8	; 0x08
    2e32:	89 85       	ldd	r24, Y+9	; 0x09
    2e34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	3f ef       	ldi	r19, 0xFF	; 255
    2e3a:	4f e7       	ldi	r20, 0x7F	; 127
    2e3c:	57 e4       	ldi	r21, 0x47	; 71
    2e3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e42:	18 16       	cp	r1, r24
    2e44:	4c f5       	brge	.+82     	; 0x2e98 <Lcd_sendChar_xy+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	40 e2       	ldi	r20, 0x20	; 32
    2e54:	51 e4       	ldi	r21, 0x41	; 65
    2e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	bc 01       	movw	r22, r24
    2e60:	cd 01       	movw	r24, r26
    2e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	9e 83       	std	Y+6, r25	; 0x06
    2e6c:	8d 83       	std	Y+5, r24	; 0x05
    2e6e:	0f c0       	rjmp	.+30     	; 0x2e8e <Lcd_sendChar_xy+0x1de>
    2e70:	80 e9       	ldi	r24, 0x90	; 144
    2e72:	91 e0       	ldi	r25, 0x01	; 1
    2e74:	9c 83       	std	Y+4, r25	; 0x04
    2e76:	8b 83       	std	Y+3, r24	; 0x03
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7c:	01 97       	sbiw	r24, 0x01	; 1
    2e7e:	f1 f7       	brne	.-4      	; 0x2e7c <Lcd_sendChar_xy+0x1cc>
    2e80:	9c 83       	std	Y+4, r25	; 0x04
    2e82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	9e 81       	ldd	r25, Y+6	; 0x06
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	9e 83       	std	Y+6, r25	; 0x06
    2e8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e90:	9e 81       	ldd	r25, Y+6	; 0x06
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	69 f7       	brne	.-38     	; 0x2e70 <Lcd_sendChar_xy+0x1c0>
    2e96:	14 c0       	rjmp	.+40     	; 0x2ec0 <Lcd_sendChar_xy+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e98:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9a:	78 85       	ldd	r23, Y+8	; 0x08
    2e9c:	89 85       	ldd	r24, Y+9	; 0x09
    2e9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	9e 83       	std	Y+6, r25	; 0x06
    2eaa:	8d 83       	std	Y+5, r24	; 0x05
    2eac:	8d 81       	ldd	r24, Y+5	; 0x05
    2eae:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb0:	9a 83       	std	Y+2, r25	; 0x02
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	89 81       	ldd	r24, Y+1	; 0x01
    2eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
    2eba:	f1 f7       	brne	.-4      	; 0x2eb8 <Lcd_sendChar_xy+0x208>
    2ebc:	9a 83       	std	Y+2, r25	; 0x02
    2ebe:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
	}

	for(int j=1;j<=col;j++){
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ec6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec8:	08 c0       	rjmp	.+16     	; 0x2eda <Lcd_sendChar_xy+0x22a>
		Lcd_sendCmd(ShiftRight);
    2eca:	8c e1       	ldi	r24, 0x1C	; 28
    2ecc:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
	}else if(row == 2){
		Lcd_sendCmd(Force2ndline);
		_delay_ms(10);
	}

	for(int j=1;j<=col;j++){
    2ed0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ed2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ed4:	01 96       	adiw	r24, 0x01	; 1
    2ed6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ed8:	8d 8f       	std	Y+29, r24	; 0x1d
    2eda:	89 a1       	ldd	r24, Y+33	; 0x21
    2edc:	28 2f       	mov	r18, r24
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ee2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ee4:	28 17       	cp	r18, r24
    2ee6:	39 07       	cpc	r19, r25
    2ee8:	84 f7       	brge	.-32     	; 0x2eca <Lcd_sendChar_xy+0x21a>
		Lcd_sendCmd(ShiftRight);
	}
	Lcd_sendChar(data);
    2eea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eec:	0e 94 4b 12 	call	0x2496	; 0x2496 <Lcd_sendChar>
}
    2ef0:	a1 96       	adiw	r28, 0x21	; 33
    2ef2:	0f b6       	in	r0, 0x3f	; 63
    2ef4:	f8 94       	cli
    2ef6:	de bf       	out	0x3e, r29	; 62
    2ef8:	0f be       	out	0x3f, r0	; 63
    2efa:	cd bf       	out	0x3d, r28	; 61
    2efc:	cf 91       	pop	r28
    2efe:	df 91       	pop	r29
    2f00:	08 95       	ret

00002f02 <Set_Cursor_Pos>:

static void Set_Cursor_Pos(uint8_t row,uint8_t column){
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	00 d0       	rcall	.+0      	; 0x2f08 <Set_Cursor_Pos+0x6>
    2f08:	00 d0       	rcall	.+0      	; 0x2f0a <Set_Cursor_Pos+0x8>
    2f0a:	cd b7       	in	r28, 0x3d	; 61
    2f0c:	de b7       	in	r29, 0x3e	; 62
    2f0e:	89 83       	std	Y+1, r24	; 0x01
    2f10:	6a 83       	std	Y+2, r22	; 0x02
	column--;
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	81 50       	subi	r24, 0x01	; 1
    2f16:	8a 83       	std	Y+2, r24	; 0x02
	switch(row){
    2f18:	89 81       	ldd	r24, Y+1	; 0x01
    2f1a:	28 2f       	mov	r18, r24
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	3c 83       	std	Y+4, r19	; 0x04
    2f20:	2b 83       	std	Y+3, r18	; 0x03
    2f22:	8b 81       	ldd	r24, Y+3	; 0x03
    2f24:	9c 81       	ldd	r25, Y+4	; 0x04
    2f26:	81 30       	cpi	r24, 0x01	; 1
    2f28:	91 05       	cpc	r25, r1
    2f2a:	31 f0       	breq	.+12     	; 0x2f38 <Set_Cursor_Pos+0x36>
    2f2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2f2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2f30:	22 30       	cpi	r18, 0x02	; 2
    2f32:	31 05       	cpc	r19, r1
    2f34:	31 f0       	breq	.+12     	; 0x2f42 <Set_Cursor_Pos+0x40>
    2f36:	09 c0       	rjmp	.+18     	; 0x2f4a <Set_Cursor_Pos+0x48>
	         case 1: Lcd_sendCmd((0x80 + column)); break;
    2f38:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3a:	80 58       	subi	r24, 0x80	; 128
    2f3c:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
    2f40:	04 c0       	rjmp	.+8      	; 0x2f4a <Set_Cursor_Pos+0x48>
	         case 2: Lcd_sendCmd((0xc0 + column)); break;
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	80 54       	subi	r24, 0x40	; 64
    2f46:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
	         default:;
	}
}
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	08 95       	ret

00002f58 <LCD_GoTo>:

/************************************************************************/
void LCD_GoTo(uint8_t Line, uint8_t x){
    2f58:	df 93       	push	r29
    2f5a:	cf 93       	push	r28
    2f5c:	00 d0       	rcall	.+0      	; 0x2f5e <LCD_GoTo+0x6>
    2f5e:	cd b7       	in	r28, 0x3d	; 61
    2f60:	de b7       	in	r29, 0x3e	; 62
    2f62:	89 83       	std	Y+1, r24	; 0x01
    2f64:	6a 83       	std	Y+2, r22	; 0x02
if(0 == Line)
    2f66:	89 81       	ldd	r24, Y+1	; 0x01
    2f68:	88 23       	and	r24, r24
    2f6a:	41 f4       	brne	.+16     	; 0x2f7c <LCD_GoTo+0x24>
{
if ( x <=15)
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	80 31       	cpi	r24, 0x10	; 16
    2f70:	78 f4       	brcc	.+30     	; 0x2f90 <LCD_GoTo+0x38>
{
Lcd_sendCmd(0x80 + x);
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	80 58       	subi	r24, 0x80	; 128
    2f76:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
    2f7a:	0a c0       	rjmp	.+20     	; 0x2f90 <LCD_GoTo+0x38>
}
}
else if (1 == Line)
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	81 30       	cpi	r24, 0x01	; 1
    2f80:	39 f4       	brne	.+14     	; 0x2f90 <LCD_GoTo+0x38>
{
if ( x <=15)
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	80 31       	cpi	r24, 0x10	; 16
    2f86:	20 f4       	brcc	.+8      	; 0x2f90 <LCD_GoTo+0x38>
{
Lcd_sendCmd(0xC0 + x);
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	80 54       	subi	r24, 0x40	; 64
    2f8c:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
}
}
}
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <lcd_gotoxy>:


void lcd_gotoxy(unsigned char x, unsigned char y)
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <lcd_gotoxy+0x6>
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <lcd_gotoxy+0x8>
    2fa2:	cd b7       	in	r28, 0x3d	; 61
    2fa4:	de b7       	in	r29, 0x3e	; 62
    2fa6:	8b 83       	std	Y+3, r24	; 0x03
    2fa8:	6c 83       	std	Y+4, r22	; 0x04
	unsigned char firstcharadd[]={0x80, 0xC0};
    2faa:	80 e8       	ldi	r24, 0x80	; 128
    2fac:	89 83       	std	Y+1, r24	; 0x01
    2fae:	80 ec       	ldi	r24, 0xC0	; 192
    2fb0:	8a 83       	std	Y+2, r24	; 0x02
	Lcd_sendCmd(firstcharadd[y] + x);
    2fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb4:	28 2f       	mov	r18, r24
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	ce 01       	movw	r24, r28
    2fba:	01 96       	adiw	r24, 0x01	; 1
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	e2 0f       	add	r30, r18
    2fc0:	f3 1f       	adc	r31, r19
    2fc2:	90 81       	ld	r25, Z
    2fc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc6:	89 0f       	add	r24, r25
    2fc8:	0e 94 aa 11 	call	0x2354	; 0x2354 <Lcd_sendCmd>
}
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <start_signal>:
uint8_t D_RH,D_Temp,CheckSum,dataByte=0;



void start_signal()
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	6c 97       	sbiw	r28, 0x1c	; 28
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61

	// Resetting port
	DDRC |= (1<<DHT11_PIN);   // Output
    2fee:	a4 e3       	ldi	r26, 0x34	; 52
    2ff0:	b0 e0       	ldi	r27, 0x00	; 0
    2ff2:	e4 e3       	ldi	r30, 0x34	; 52
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	80 81       	ld	r24, Z
    2ff8:	80 68       	ori	r24, 0x80	; 128
    2ffa:	8c 93       	st	X, r24
	PORTC |= (1<<DHT11_PIN);  // High
    2ffc:	a5 e3       	ldi	r26, 0x35	; 53
    2ffe:	b0 e0       	ldi	r27, 0x00	; 0
    3000:	e5 e3       	ldi	r30, 0x35	; 53
    3002:	f0 e0       	ldi	r31, 0x00	; 0
    3004:	80 81       	ld	r24, Z
    3006:	80 68       	ori	r24, 0x80	; 128
    3008:	8c 93       	st	X, r24
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	a8 ec       	ldi	r26, 0xC8	; 200
    3010:	b2 e4       	ldi	r27, 0x42	; 66
    3012:	89 8f       	std	Y+25, r24	; 0x19
    3014:	9a 8f       	std	Y+26, r25	; 0x1a
    3016:	ab 8f       	std	Y+27, r26	; 0x1b
    3018:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    301a:	69 8d       	ldd	r22, Y+25	; 0x19
    301c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    301e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3020:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	4a e7       	ldi	r20, 0x7A	; 122
    3028:	55 e4       	ldi	r21, 0x45	; 69
    302a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	8d 8b       	std	Y+21, r24	; 0x15
    3034:	9e 8b       	std	Y+22, r25	; 0x16
    3036:	af 8b       	std	Y+23, r26	; 0x17
    3038:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    303a:	6d 89       	ldd	r22, Y+21	; 0x15
    303c:	7e 89       	ldd	r23, Y+22	; 0x16
    303e:	8f 89       	ldd	r24, Y+23	; 0x17
    3040:	98 8d       	ldd	r25, Y+24	; 0x18
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e8       	ldi	r20, 0x80	; 128
    3048:	5f e3       	ldi	r21, 0x3F	; 63
    304a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    304e:	88 23       	and	r24, r24
    3050:	2c f4       	brge	.+10     	; 0x305c <start_signal+0x82>
		__ticks = 1;
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	9c 8b       	std	Y+20, r25	; 0x14
    3058:	8b 8b       	std	Y+19, r24	; 0x13
    305a:	3f c0       	rjmp	.+126    	; 0x30da <start_signal+0x100>
	else if (__tmp > 65535)
    305c:	6d 89       	ldd	r22, Y+21	; 0x15
    305e:	7e 89       	ldd	r23, Y+22	; 0x16
    3060:	8f 89       	ldd	r24, Y+23	; 0x17
    3062:	98 8d       	ldd	r25, Y+24	; 0x18
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	3f ef       	ldi	r19, 0xFF	; 255
    3068:	4f e7       	ldi	r20, 0x7F	; 127
    306a:	57 e4       	ldi	r21, 0x47	; 71
    306c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3070:	18 16       	cp	r1, r24
    3072:	4c f5       	brge	.+82     	; 0x30c6 <start_signal+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3074:	69 8d       	ldd	r22, Y+25	; 0x19
    3076:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3078:	8b 8d       	ldd	r24, Y+27	; 0x1b
    307a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e2       	ldi	r20, 0x20	; 32
    3082:	51 e4       	ldi	r21, 0x41	; 65
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	bc 01       	movw	r22, r24
    308e:	cd 01       	movw	r24, r26
    3090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	9c 8b       	std	Y+20, r25	; 0x14
    309a:	8b 8b       	std	Y+19, r24	; 0x13
    309c:	0f c0       	rjmp	.+30     	; 0x30bc <start_signal+0xe2>
    309e:	80 e9       	ldi	r24, 0x90	; 144
    30a0:	91 e0       	ldi	r25, 0x01	; 1
    30a2:	9a 8b       	std	Y+18, r25	; 0x12
    30a4:	89 8b       	std	Y+17, r24	; 0x11
    30a6:	89 89       	ldd	r24, Y+17	; 0x11
    30a8:	9a 89       	ldd	r25, Y+18	; 0x12
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <start_signal+0xd0>
    30ae:	9a 8b       	std	Y+18, r25	; 0x12
    30b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b2:	8b 89       	ldd	r24, Y+19	; 0x13
    30b4:	9c 89       	ldd	r25, Y+20	; 0x14
    30b6:	01 97       	sbiw	r24, 0x01	; 1
    30b8:	9c 8b       	std	Y+20, r25	; 0x14
    30ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30bc:	8b 89       	ldd	r24, Y+19	; 0x13
    30be:	9c 89       	ldd	r25, Y+20	; 0x14
    30c0:	00 97       	sbiw	r24, 0x00	; 0
    30c2:	69 f7       	brne	.-38     	; 0x309e <start_signal+0xc4>
    30c4:	14 c0       	rjmp	.+40     	; 0x30ee <start_signal+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c6:	6d 89       	ldd	r22, Y+21	; 0x15
    30c8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ca:	8f 89       	ldd	r24, Y+23	; 0x17
    30cc:	98 8d       	ldd	r25, Y+24	; 0x18
    30ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	9c 8b       	std	Y+20, r25	; 0x14
    30d8:	8b 8b       	std	Y+19, r24	; 0x13
    30da:	8b 89       	ldd	r24, Y+19	; 0x13
    30dc:	9c 89       	ldd	r25, Y+20	; 0x14
    30de:	98 8b       	std	Y+16, r25	; 0x10
    30e0:	8f 87       	std	Y+15, r24	; 0x0f
    30e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    30e4:	98 89       	ldd	r25, Y+16	; 0x10
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	f1 f7       	brne	.-4      	; 0x30e6 <start_signal+0x10c>
    30ea:	98 8b       	std	Y+16, r25	; 0x10
    30ec:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);


	DDRC |= (1<<DHT11_PIN);    // Set dht11 pin as an output
    30ee:	a4 e3       	ldi	r26, 0x34	; 52
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	e4 e3       	ldi	r30, 0x34	; 52
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	80 68       	ori	r24, 0x80	; 128
    30fa:	8c 93       	st	X, r24
	PORTC &= ~(1<<DHT11_PIN);   // First Send low pulse
    30fc:	a5 e3       	ldi	r26, 0x35	; 53
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e5 e3       	ldi	r30, 0x35	; 53
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	8f 77       	andi	r24, 0x7F	; 127
    3108:	8c 93       	st	X, r24
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	a0 ea       	ldi	r26, 0xA0	; 160
    3110:	b1 e4       	ldi	r27, 0x41	; 65
    3112:	8b 87       	std	Y+11, r24	; 0x0b
    3114:	9c 87       	std	Y+12, r25	; 0x0c
    3116:	ad 87       	std	Y+13, r26	; 0x0d
    3118:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    311a:	6b 85       	ldd	r22, Y+11	; 0x0b
    311c:	7c 85       	ldd	r23, Y+12	; 0x0c
    311e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3120:	9e 85       	ldd	r25, Y+14	; 0x0e
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	4a e7       	ldi	r20, 0x7A	; 122
    3128:	55 e4       	ldi	r21, 0x45	; 69
    312a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	8f 83       	std	Y+7, r24	; 0x07
    3134:	98 87       	std	Y+8, r25	; 0x08
    3136:	a9 87       	std	Y+9, r26	; 0x09
    3138:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    313a:	6f 81       	ldd	r22, Y+7	; 0x07
    313c:	78 85       	ldd	r23, Y+8	; 0x08
    313e:	89 85       	ldd	r24, Y+9	; 0x09
    3140:	9a 85       	ldd	r25, Y+10	; 0x0a
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e8       	ldi	r20, 0x80	; 128
    3148:	5f e3       	ldi	r21, 0x3F	; 63
    314a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    314e:	88 23       	and	r24, r24
    3150:	2c f4       	brge	.+10     	; 0x315c <start_signal+0x182>
		__ticks = 1;
    3152:	81 e0       	ldi	r24, 0x01	; 1
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	9e 83       	std	Y+6, r25	; 0x06
    3158:	8d 83       	std	Y+5, r24	; 0x05
    315a:	3f c0       	rjmp	.+126    	; 0x31da <start_signal+0x200>
	else if (__tmp > 65535)
    315c:	6f 81       	ldd	r22, Y+7	; 0x07
    315e:	78 85       	ldd	r23, Y+8	; 0x08
    3160:	89 85       	ldd	r24, Y+9	; 0x09
    3162:	9a 85       	ldd	r25, Y+10	; 0x0a
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	3f ef       	ldi	r19, 0xFF	; 255
    3168:	4f e7       	ldi	r20, 0x7F	; 127
    316a:	57 e4       	ldi	r21, 0x47	; 71
    316c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3170:	18 16       	cp	r1, r24
    3172:	4c f5       	brge	.+82     	; 0x31c6 <start_signal+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3174:	6b 85       	ldd	r22, Y+11	; 0x0b
    3176:	7c 85       	ldd	r23, Y+12	; 0x0c
    3178:	8d 85       	ldd	r24, Y+13	; 0x0d
    317a:	9e 85       	ldd	r25, Y+14	; 0x0e
    317c:	20 e0       	ldi	r18, 0x00	; 0
    317e:	30 e0       	ldi	r19, 0x00	; 0
    3180:	40 e2       	ldi	r20, 0x20	; 32
    3182:	51 e4       	ldi	r21, 0x41	; 65
    3184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	bc 01       	movw	r22, r24
    318e:	cd 01       	movw	r24, r26
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	9e 83       	std	Y+6, r25	; 0x06
    319a:	8d 83       	std	Y+5, r24	; 0x05
    319c:	0f c0       	rjmp	.+30     	; 0x31bc <start_signal+0x1e2>
    319e:	80 e9       	ldi	r24, 0x90	; 144
    31a0:	91 e0       	ldi	r25, 0x01	; 1
    31a2:	9c 83       	std	Y+4, r25	; 0x04
    31a4:	8b 83       	std	Y+3, r24	; 0x03
    31a6:	8b 81       	ldd	r24, Y+3	; 0x03
    31a8:	9c 81       	ldd	r25, Y+4	; 0x04
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	f1 f7       	brne	.-4      	; 0x31aa <start_signal+0x1d0>
    31ae:	9c 83       	std	Y+4, r25	; 0x04
    31b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31b2:	8d 81       	ldd	r24, Y+5	; 0x05
    31b4:	9e 81       	ldd	r25, Y+6	; 0x06
    31b6:	01 97       	sbiw	r24, 0x01	; 1
    31b8:	9e 83       	std	Y+6, r25	; 0x06
    31ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31bc:	8d 81       	ldd	r24, Y+5	; 0x05
    31be:	9e 81       	ldd	r25, Y+6	; 0x06
    31c0:	00 97       	sbiw	r24, 0x00	; 0
    31c2:	69 f7       	brne	.-38     	; 0x319e <start_signal+0x1c4>
    31c4:	14 c0       	rjmp	.+40     	; 0x31ee <start_signal+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31c6:	6f 81       	ldd	r22, Y+7	; 0x07
    31c8:	78 85       	ldd	r23, Y+8	; 0x08
    31ca:	89 85       	ldd	r24, Y+9	; 0x09
    31cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	9e 83       	std	Y+6, r25	; 0x06
    31d8:	8d 83       	std	Y+5, r24	; 0x05
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	9a 83       	std	Y+2, r25	; 0x02
    31e0:	89 83       	std	Y+1, r24	; 0x01
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	9a 81       	ldd	r25, Y+2	; 0x02
    31e6:	01 97       	sbiw	r24, 0x01	; 1
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <start_signal+0x20c>
    31ea:	9a 83       	std	Y+2, r25	; 0x02
    31ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);              // Delay for 20 ms
	PORTC |= (1<<DHT11_PIN);    // Send high pulse
    31ee:	a5 e3       	ldi	r26, 0x35	; 53
    31f0:	b0 e0       	ldi	r27, 0x00	; 0
    31f2:	e5 e3       	ldi	r30, 0x35	; 53
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	80 68       	ori	r24, 0x80	; 128
    31fa:	8c 93       	st	X, r24
}
    31fc:	6c 96       	adiw	r28, 0x1c	; 28
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	de bf       	out	0x3e, r29	; 62
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	cd bf       	out	0x3d, r28	; 61
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	08 95       	ret

0000320e <responce_signal>:


void responce_signal()
{
    320e:	df 93       	push	r29
    3210:	cf 93       	push	r28
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
	DDRC &= ~(1<<DHT11_PIN);
    3216:	a4 e3       	ldi	r26, 0x34	; 52
    3218:	b0 e0       	ldi	r27, 0x00	; 0
    321a:	e4 e3       	ldi	r30, 0x34	; 52
    321c:	f0 e0       	ldi	r31, 0x00	; 0
    321e:	80 81       	ld	r24, Z
    3220:	8f 77       	andi	r24, 0x7F	; 127
    3222:	8c 93       	st	X, r24
	while(PINC & (1<<DHT11_PIN));  	// Wait for low pulse
    3224:	e3 e3       	ldi	r30, 0x33	; 51
    3226:	f0 e0       	ldi	r31, 0x00	; 0
    3228:	80 81       	ld	r24, Z
    322a:	88 23       	and	r24, r24
    322c:	dc f3       	brlt	.-10     	; 0x3224 <responce_signal+0x16>
	while((PINC & (1<<DHT11_PIN))==0);	// Wait for high pulse
    322e:	e3 e3       	ldi	r30, 0x33	; 51
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	88 23       	and	r24, r24
    3236:	dc f7       	brge	.-10     	; 0x322e <responce_signal+0x20>
	while(PINC & (1<<DHT11_PIN));	// Wait for low pulse
    3238:	e3 e3       	ldi	r30, 0x33	; 51
    323a:	f0 e0       	ldi	r31, 0x00	; 0
    323c:	80 81       	ld	r24, Z
    323e:	88 23       	and	r24, r24
    3240:	dc f3       	brlt	.-10     	; 0x3238 <responce_signal+0x2a>

//	Lcd_sendChar('S');


}
    3242:	cf 91       	pop	r28
    3244:	df 91       	pop	r29
    3246:	08 95       	ret

00003248 <read_DHT11>:

uint8_t read_DHT11()
{
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	cd b7       	in	r28, 0x3d	; 61
    324e:	de b7       	in	r29, 0x3e	; 62
    3250:	6a 97       	sbiw	r28, 0x1a	; 26
    3252:	0f b6       	in	r0, 0x3f	; 63
    3254:	f8 94       	cli
    3256:	de bf       	out	0x3e, r29	; 62
    3258:	0f be       	out	0x3f, r0	; 63
    325a:	cd bf       	out	0x3d, r28	; 61
	int i;
	for(i=0;i<8;i++){
    325c:	1a 8e       	std	Y+26, r1	; 0x1a
    325e:	19 8e       	std	Y+25, r1	; 0x19
    3260:	e1 c0       	rjmp	.+450    	; 0x3424 <read_DHT11+0x1dc>
		while((PINC & (1<<DHT11_PIN)) == 0);  // Check high pulse
    3262:	e3 e3       	ldi	r30, 0x33	; 51
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	88 23       	and	r24, r24
    326a:	dc f7       	brge	.-10     	; 0x3262 <read_DHT11+0x1a>
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	a0 ef       	ldi	r26, 0xF0	; 240
    3272:	b1 e4       	ldi	r27, 0x41	; 65
    3274:	8d 8b       	std	Y+21, r24	; 0x15
    3276:	9e 8b       	std	Y+22, r25	; 0x16
    3278:	af 8b       	std	Y+23, r26	; 0x17
    327a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    327c:	6d 89       	ldd	r22, Y+21	; 0x15
    327e:	7e 89       	ldd	r23, Y+22	; 0x16
    3280:	8f 89       	ldd	r24, Y+23	; 0x17
    3282:	98 8d       	ldd	r25, Y+24	; 0x18
    3284:	2b ea       	ldi	r18, 0xAB	; 171
    3286:	3a ea       	ldi	r19, 0xAA	; 170
    3288:	4a ea       	ldi	r20, 0xAA	; 170
    328a:	50 e4       	ldi	r21, 0x40	; 64
    328c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	89 8b       	std	Y+17, r24	; 0x11
    3296:	9a 8b       	std	Y+18, r25	; 0x12
    3298:	ab 8b       	std	Y+19, r26	; 0x13
    329a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    329c:	69 89       	ldd	r22, Y+17	; 0x11
    329e:	7a 89       	ldd	r23, Y+18	; 0x12
    32a0:	8b 89       	ldd	r24, Y+19	; 0x13
    32a2:	9c 89       	ldd	r25, Y+20	; 0x14
    32a4:	20 e0       	ldi	r18, 0x00	; 0
    32a6:	30 e0       	ldi	r19, 0x00	; 0
    32a8:	40 e8       	ldi	r20, 0x80	; 128
    32aa:	5f e3       	ldi	r21, 0x3F	; 63
    32ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b0:	88 23       	and	r24, r24
    32b2:	1c f4       	brge	.+6      	; 0x32ba <read_DHT11+0x72>
		__ticks = 1;
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	88 8b       	std	Y+16, r24	; 0x10
    32b8:	91 c0       	rjmp	.+290    	; 0x33dc <read_DHT11+0x194>
	else if (__tmp > 255)
    32ba:	69 89       	ldd	r22, Y+17	; 0x11
    32bc:	7a 89       	ldd	r23, Y+18	; 0x12
    32be:	8b 89       	ldd	r24, Y+19	; 0x13
    32c0:	9c 89       	ldd	r25, Y+20	; 0x14
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	4f e7       	ldi	r20, 0x7F	; 127
    32c8:	53 e4       	ldi	r21, 0x43	; 67
    32ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32ce:	18 16       	cp	r1, r24
    32d0:	0c f0       	brlt	.+2      	; 0x32d4 <read_DHT11+0x8c>
    32d2:	7b c0       	rjmp	.+246    	; 0x33ca <read_DHT11+0x182>
	{
		_delay_ms(__us / 1000.0);
    32d4:	6d 89       	ldd	r22, Y+21	; 0x15
    32d6:	7e 89       	ldd	r23, Y+22	; 0x16
    32d8:	8f 89       	ldd	r24, Y+23	; 0x17
    32da:	98 8d       	ldd	r25, Y+24	; 0x18
    32dc:	20 e0       	ldi	r18, 0x00	; 0
    32de:	30 e0       	ldi	r19, 0x00	; 0
    32e0:	4a e7       	ldi	r20, 0x7A	; 122
    32e2:	54 e4       	ldi	r21, 0x44	; 68
    32e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32e8:	dc 01       	movw	r26, r24
    32ea:	cb 01       	movw	r24, r22
    32ec:	8c 87       	std	Y+12, r24	; 0x0c
    32ee:	9d 87       	std	Y+13, r25	; 0x0d
    32f0:	ae 87       	std	Y+14, r26	; 0x0e
    32f2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    32f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    32f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    32fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	4a e7       	ldi	r20, 0x7A	; 122
    3302:	55 e4       	ldi	r21, 0x45	; 69
    3304:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3308:	dc 01       	movw	r26, r24
    330a:	cb 01       	movw	r24, r22
    330c:	88 87       	std	Y+8, r24	; 0x08
    330e:	99 87       	std	Y+9, r25	; 0x09
    3310:	aa 87       	std	Y+10, r26	; 0x0a
    3312:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3314:	68 85       	ldd	r22, Y+8	; 0x08
    3316:	79 85       	ldd	r23, Y+9	; 0x09
    3318:	8a 85       	ldd	r24, Y+10	; 0x0a
    331a:	9b 85       	ldd	r25, Y+11	; 0x0b
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e8       	ldi	r20, 0x80	; 128
    3322:	5f e3       	ldi	r21, 0x3F	; 63
    3324:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3328:	88 23       	and	r24, r24
    332a:	2c f4       	brge	.+10     	; 0x3336 <read_DHT11+0xee>
		__ticks = 1;
    332c:	81 e0       	ldi	r24, 0x01	; 1
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	9f 83       	std	Y+7, r25	; 0x07
    3332:	8e 83       	std	Y+6, r24	; 0x06
    3334:	3f c0       	rjmp	.+126    	; 0x33b4 <read_DHT11+0x16c>
	else if (__tmp > 65535)
    3336:	68 85       	ldd	r22, Y+8	; 0x08
    3338:	79 85       	ldd	r23, Y+9	; 0x09
    333a:	8a 85       	ldd	r24, Y+10	; 0x0a
    333c:	9b 85       	ldd	r25, Y+11	; 0x0b
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	3f ef       	ldi	r19, 0xFF	; 255
    3342:	4f e7       	ldi	r20, 0x7F	; 127
    3344:	57 e4       	ldi	r21, 0x47	; 71
    3346:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334a:	18 16       	cp	r1, r24
    334c:	4c f5       	brge	.+82     	; 0x33a0 <read_DHT11+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3350:	7d 85       	ldd	r23, Y+13	; 0x0d
    3352:	8e 85       	ldd	r24, Y+14	; 0x0e
    3354:	9f 85       	ldd	r25, Y+15	; 0x0f
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e2       	ldi	r20, 0x20	; 32
    335c:	51 e4       	ldi	r21, 0x41	; 65
    335e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	bc 01       	movw	r22, r24
    3368:	cd 01       	movw	r24, r26
    336a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336e:	dc 01       	movw	r26, r24
    3370:	cb 01       	movw	r24, r22
    3372:	9f 83       	std	Y+7, r25	; 0x07
    3374:	8e 83       	std	Y+6, r24	; 0x06
    3376:	0f c0       	rjmp	.+30     	; 0x3396 <read_DHT11+0x14e>
    3378:	80 e9       	ldi	r24, 0x90	; 144
    337a:	91 e0       	ldi	r25, 0x01	; 1
    337c:	9d 83       	std	Y+5, r25	; 0x05
    337e:	8c 83       	std	Y+4, r24	; 0x04
    3380:	8c 81       	ldd	r24, Y+4	; 0x04
    3382:	9d 81       	ldd	r25, Y+5	; 0x05
    3384:	01 97       	sbiw	r24, 0x01	; 1
    3386:	f1 f7       	brne	.-4      	; 0x3384 <read_DHT11+0x13c>
    3388:	9d 83       	std	Y+5, r25	; 0x05
    338a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    338c:	8e 81       	ldd	r24, Y+6	; 0x06
    338e:	9f 81       	ldd	r25, Y+7	; 0x07
    3390:	01 97       	sbiw	r24, 0x01	; 1
    3392:	9f 83       	std	Y+7, r25	; 0x07
    3394:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3396:	8e 81       	ldd	r24, Y+6	; 0x06
    3398:	9f 81       	ldd	r25, Y+7	; 0x07
    339a:	00 97       	sbiw	r24, 0x00	; 0
    339c:	69 f7       	brne	.-38     	; 0x3378 <read_DHT11+0x130>
    339e:	24 c0       	rjmp	.+72     	; 0x33e8 <read_DHT11+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a0:	68 85       	ldd	r22, Y+8	; 0x08
    33a2:	79 85       	ldd	r23, Y+9	; 0x09
    33a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    33a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    33a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	9f 83       	std	Y+7, r25	; 0x07
    33b2:	8e 83       	std	Y+6, r24	; 0x06
    33b4:	8e 81       	ldd	r24, Y+6	; 0x06
    33b6:	9f 81       	ldd	r25, Y+7	; 0x07
    33b8:	9b 83       	std	Y+3, r25	; 0x03
    33ba:	8a 83       	std	Y+2, r24	; 0x02
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	9b 81       	ldd	r25, Y+3	; 0x03
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	f1 f7       	brne	.-4      	; 0x33c0 <read_DHT11+0x178>
    33c4:	9b 83       	std	Y+3, r25	; 0x03
    33c6:	8a 83       	std	Y+2, r24	; 0x02
    33c8:	0f c0       	rjmp	.+30     	; 0x33e8 <read_DHT11+0x1a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33ca:	69 89       	ldd	r22, Y+17	; 0x11
    33cc:	7a 89       	ldd	r23, Y+18	; 0x12
    33ce:	8b 89       	ldd	r24, Y+19	; 0x13
    33d0:	9c 89       	ldd	r25, Y+20	; 0x14
    33d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	88 8b       	std	Y+16, r24	; 0x10
    33dc:	88 89       	ldd	r24, Y+16	; 0x10
    33de:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33e0:	89 81       	ldd	r24, Y+1	; 0x01
    33e2:	8a 95       	dec	r24
    33e4:	f1 f7       	brne	.-4      	; 0x33e2 <read_DHT11+0x19a>
    33e6:	89 83       	std	Y+1, r24	; 0x01
		_delay_us(30);   // Wait for 50us then check bit value
		if(PINC & (1<<DHT11_PIN))   // If it is 1, store 1 in dataByte
    33e8:	e3 e3       	ldi	r30, 0x33	; 51
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	88 23       	and	r24, r24
    33f0:	54 f4       	brge	.+20     	; 0x3406 <read_DHT11+0x1be>
			dataByte = (dataByte<<1) | (0x01);
    33f2:	80 91 02 02 	lds	r24, 0x0202
    33f6:	88 2f       	mov	r24, r24
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	88 0f       	add	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	81 60       	ori	r24, 0x01	; 1
    3400:	80 93 02 02 	sts	0x0202, r24
    3404:	05 c0       	rjmp	.+10     	; 0x3410 <read_DHT11+0x1c8>
		else  // Otherwise store 0
			dataByte = (dataByte<<1);
    3406:	80 91 02 02 	lds	r24, 0x0202
    340a:	88 0f       	add	r24, r24
    340c:	80 93 02 02 	sts	0x0202, r24
		while((PINC & (1<<DHT11_PIN)));     // Wait for low pulse
    3410:	e3 e3       	ldi	r30, 0x33	; 51
    3412:	f0 e0       	ldi	r31, 0x00	; 0
    3414:	80 81       	ld	r24, Z
    3416:	88 23       	and	r24, r24
    3418:	dc f3       	brlt	.-10     	; 0x3410 <read_DHT11+0x1c8>
}

uint8_t read_DHT11()
{
	int i;
	for(i=0;i<8;i++){
    341a:	89 8d       	ldd	r24, Y+25	; 0x19
    341c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    341e:	01 96       	adiw	r24, 0x01	; 1
    3420:	9a 8f       	std	Y+26, r25	; 0x1a
    3422:	89 8f       	std	Y+25, r24	; 0x19
    3424:	89 8d       	ldd	r24, Y+25	; 0x19
    3426:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3428:	88 30       	cpi	r24, 0x08	; 8
    342a:	91 05       	cpc	r25, r1
    342c:	0c f4       	brge	.+2      	; 0x3430 <read_DHT11+0x1e8>
    342e:	19 cf       	rjmp	.-462    	; 0x3262 <read_DHT11+0x1a>
			dataByte = (dataByte<<1) | (0x01);
		else  // Otherwise store 0
			dataByte = (dataByte<<1);
		while((PINC & (1<<DHT11_PIN)));     // Wait for low pulse
 	}
	 return dataByte;
    3430:	80 91 02 02 	lds	r24, 0x0202
}
    3434:	6a 96       	adiw	r28, 0x1a	; 26
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	cf 91       	pop	r28
    3442:	df 91       	pop	r29
    3444:	08 95       	ret

00003446 <DHT11_Init>:

char data[5];

void DHT11_Init()
{
    3446:	df 93       	push	r29
    3448:	cf 93       	push	r28
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
	start_signal();
    344e:	0e 94 ed 17 	call	0x2fda	; 0x2fda <start_signal>
	responce_signal();
    3452:	0e 94 07 19 	call	0x320e	; 0x320e <responce_signal>
}
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	08 95       	ret

0000345c <DHT11_FULL_READING>:

void DHT11_FULL_READING()
{
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
	I_RH = read_DHT11();       // read integer part of humidity
    3464:	0e 94 24 19 	call	0x3248	; 0x3248 <read_DHT11>
    3468:	80 93 14 02 	sts	0x0214, r24
	D_RH = read_DHT11();       // read fraction part of humidity
    346c:	0e 94 24 19 	call	0x3248	; 0x3248 <read_DHT11>
    3470:	80 93 08 02 	sts	0x0208, r24
	I_Temp = read_DHT11();     // read integer part of temperature
    3474:	0e 94 24 19 	call	0x3248	; 0x3248 <read_DHT11>
    3478:	80 93 13 02 	sts	0x0213, r24
	D_Temp = read_DHT11();     // read fraction part of temperature
    347c:	0e 94 24 19 	call	0x3248	; 0x3248 <read_DHT11>
    3480:	80 93 0a 02 	sts	0x020A, r24
	CheckSum = read_DHT11();   // read check sum
    3484:	0e 94 24 19 	call	0x3248	; 0x3248 <read_DHT11>
    3488:	80 93 09 02 	sts	0x0209, r24



	if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum)
    348c:	80 91 14 02 	lds	r24, 0x0214
    3490:	28 2f       	mov	r18, r24
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	80 91 08 02 	lds	r24, 0x0208
    3498:	88 2f       	mov	r24, r24
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	28 0f       	add	r18, r24
    349e:	39 1f       	adc	r19, r25
    34a0:	80 91 13 02 	lds	r24, 0x0213
    34a4:	88 2f       	mov	r24, r24
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	28 0f       	add	r18, r24
    34aa:	39 1f       	adc	r19, r25
    34ac:	80 91 0a 02 	lds	r24, 0x020A
    34b0:	88 2f       	mov	r24, r24
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	28 0f       	add	r18, r24
    34b6:	39 1f       	adc	r19, r25
    34b8:	80 91 09 02 	lds	r24, 0x0209
    34bc:	88 2f       	mov	r24, r24
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	28 17       	cp	r18, r24
    34c2:	39 07       	cpc	r19, r25
    34c4:	49 f0       	breq	.+18     	; 0x34d8 <DHT11_FULL_READING+0x7c>
	{
		lcd_gotoxy(0,0);
    34c6:	80 e0       	ldi	r24, 0x00	; 0
    34c8:	60 e0       	ldi	r22, 0x00	; 0
    34ca:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <lcd_gotoxy>
		Lcd_sendString("Error");
    34ce:	80 e6       	ldi	r24, 0x60	; 96
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>
    34d6:	6a c0       	rjmp	.+212    	; 0x35ac <DHT11_FULL_READING+0x150>
	}else{
		itoa(I_RH,data,10);
    34d8:	80 91 14 02 	lds	r24, 0x0214
    34dc:	88 2f       	mov	r24, r24
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	23 e0       	ldi	r18, 0x03	; 3
    34e2:	32 e0       	ldi	r19, 0x02	; 2
    34e4:	b9 01       	movw	r22, r18
    34e6:	4a e0       	ldi	r20, 0x0A	; 10
    34e8:	50 e0       	ldi	r21, 0x00	; 0
    34ea:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <itoa>
		lcd_gotoxy(11,0);
    34ee:	8b e0       	ldi	r24, 0x0B	; 11
    34f0:	60 e0       	ldi	r22, 0x00	; 0
    34f2:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <lcd_gotoxy>
		Lcd_sendString(data);
    34f6:	83 e0       	ldi	r24, 0x03	; 3
    34f8:	92 e0       	ldi	r25, 0x02	; 2
    34fa:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>
		Lcd_sendString(".");
    34fe:	86 e6       	ldi	r24, 0x66	; 102
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>

		itoa(D_RH,data,10);
    3506:	80 91 08 02 	lds	r24, 0x0208
    350a:	88 2f       	mov	r24, r24
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	23 e0       	ldi	r18, 0x03	; 3
    3510:	32 e0       	ldi	r19, 0x02	; 2
    3512:	b9 01       	movw	r22, r18
    3514:	4a e0       	ldi	r20, 0x0A	; 10
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <itoa>
		Lcd_sendString(data);
    351c:	83 e0       	ldi	r24, 0x03	; 3
    351e:	92 e0       	ldi	r25, 0x02	; 2
    3520:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>
		Lcd_sendString("%");
    3524:	88 e6       	ldi	r24, 0x68	; 104
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>


		itoa(I_Temp,data,10);
    352c:	80 91 13 02 	lds	r24, 0x0213
    3530:	88 2f       	mov	r24, r24
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	23 e0       	ldi	r18, 0x03	; 3
    3536:	32 e0       	ldi	r19, 0x02	; 2
    3538:	b9 01       	movw	r22, r18
    353a:	4a e0       	ldi	r20, 0x0A	; 10
    353c:	50 e0       	ldi	r21, 0x00	; 0
    353e:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <itoa>
		lcd_gotoxy(6,1);
    3542:	86 e0       	ldi	r24, 0x06	; 6
    3544:	61 e0       	ldi	r22, 0x01	; 1
    3546:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <lcd_gotoxy>
		Lcd_sendString(data);
    354a:	83 e0       	ldi	r24, 0x03	; 3
    354c:	92 e0       	ldi	r25, 0x02	; 2
    354e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>
		Lcd_sendString(".");
    3552:	86 e6       	ldi	r24, 0x66	; 102
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>

		itoa(D_Temp,data,10);
    355a:	80 91 0a 02 	lds	r24, 0x020A
    355e:	88 2f       	mov	r24, r24
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	23 e0       	ldi	r18, 0x03	; 3
    3564:	32 e0       	ldi	r19, 0x02	; 2
    3566:	b9 01       	movw	r22, r18
    3568:	4a e0       	ldi	r20, 0x0A	; 10
    356a:	50 e0       	ldi	r21, 0x00	; 0
    356c:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <itoa>
		Lcd_sendString(data);
    3570:	83 e0       	ldi	r24, 0x03	; 3
    3572:	92 e0       	ldi	r25, 0x02	; 2
    3574:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>
		Lcd_sendChar(0xDF);
    3578:	8f ed       	ldi	r24, 0xDF	; 223
    357a:	0e 94 4b 12 	call	0x2496	; 0x2496 <Lcd_sendChar>
		Lcd_sendString("C");
    357e:	8a e6       	ldi	r24, 0x6A	; 106
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>

		itoa(CheckSum,data,10);
    3586:	80 91 09 02 	lds	r24, 0x0209
    358a:	88 2f       	mov	r24, r24
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	23 e0       	ldi	r18, 0x03	; 3
    3590:	32 e0       	ldi	r19, 0x02	; 2
    3592:	b9 01       	movw	r22, r18
    3594:	4a e0       	ldi	r20, 0x0A	; 10
    3596:	50 e0       	ldi	r21, 0x00	; 0
    3598:	0e 94 fa 1c 	call	0x39f4	; 0x39f4 <itoa>
		Lcd_sendString(data);
    359c:	83 e0       	ldi	r24, 0x03	; 3
    359e:	92 e0       	ldi	r25, 0x02	; 2
    35a0:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>
		Lcd_sendString(" ");
    35a4:	8c e6       	ldi	r24, 0x6C	; 108
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>

//	// Resetting port
//	DDRC |= (1<<DHT11_PIN);   // Output
//	PORTC |= (1<<DHT11_PIN);  // High
//	_delay_ms(100);
}
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <main>:
uint8_t I_RH,I_Temp;
uint8_t sentData[8];


int main(void)
{
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	cd b7       	in	r28, 0x3d	; 61
    35b8:	de b7       	in	r29, 0x3e	; 62
    35ba:	a1 97       	sbiw	r28, 0x21	; 33
    35bc:	0f b6       	in	r0, 0x3f	; 63
    35be:	f8 94       	cli
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	0f be       	out	0x3f, r0	; 63
    35c4:	cd bf       	out	0x3d, r28	; 61
	Dio_init();
    35c6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <Dio_init>
	Lcd_Init();
    35ca:	0e 94 09 11 	call	0x2212	; 0x2212 <Lcd_Init>
	UART_Init();
    35ce:	0e 94 16 09 	call	0x122c	; 0x122c <UART_Init>
	ADC_init();
    35d2:	0e 94 af 10 	call	0x215e	; 0x215e <ADC_init>




	uint8_t TempReading = 0,GasReading = 0;
    35d6:	19 a2       	std	Y+33, r1	; 0x21
    35d8:	18 a2       	std	Y+32, r1	; 0x20
	uint8_t rainReading=0;
    35da:	1f 8e       	std	Y+31, r1	; 0x1f
	uint8_t Humidity=0,Temperature=0;
    35dc:	1e 8e       	std	Y+30, r1	; 0x1e
    35de:	1d 8e       	std	Y+29, r1	; 0x1d

	lcd_clear();		/* Clear LCD */
    35e0:	0e 94 22 11 	call	0x2244	; 0x2244 <lcd_clear>
	LCD_GoTo(0,0);
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	60 e0       	ldi	r22, 0x00	; 0
    35e8:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_GoTo>


	Lcd_sendString("Rain=");
    35ec:	8e e6       	ldi	r24, 0x6E	; 110
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>
	LCD_GoTo(1,0);
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_GoTo>
	Lcd_sendString("Gas=");
    35fc:	84 e7       	ldi	r24, 0x74	; 116
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>
// 		UART_SendString("h");



		// 2.5024 --> *(2.56/1023)*1000  --> Internal of ADC is 2.56
		rainReading = ADC_read(ADC7)*4.88;   // Millivolts    --> PA3
    3604:	87 e0       	ldi	r24, 0x07	; 7
    3606:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <ADC_read>
    360a:	cc 01       	movw	r24, r24
    360c:	a0 e0       	ldi	r26, 0x00	; 0
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	bc 01       	movw	r22, r24
    3612:	cd 01       	movw	r24, r26
    3614:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	bc 01       	movw	r22, r24
    361e:	cd 01       	movw	r24, r26
    3620:	26 ef       	ldi	r18, 0xF6	; 246
    3622:	38 e2       	ldi	r19, 0x28	; 40
    3624:	4c e9       	ldi	r20, 0x9C	; 156
    3626:	50 e4       	ldi	r21, 0x40	; 64
    3628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	bc 01       	movw	r22, r24
    3632:	cd 01       	movw	r24, r26
    3634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	8f 8f       	std	Y+31, r24	; 0x1f
		rainReading = (int)(rainReading / 10.00);   // To Celsius
    363e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3640:	88 2f       	mov	r24, r24
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	aa 27       	eor	r26, r26
    3646:	97 fd       	sbrc	r25, 7
    3648:	a0 95       	com	r26
    364a:	ba 2f       	mov	r27, r26
    364c:	bc 01       	movw	r22, r24
    364e:	cd 01       	movw	r24, r26
    3650:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    3654:	dc 01       	movw	r26, r24
    3656:	cb 01       	movw	r24, r22
    3658:	bc 01       	movw	r22, r24
    365a:	cd 01       	movw	r24, r26
    365c:	20 e0       	ldi	r18, 0x00	; 0
    365e:	30 e0       	ldi	r19, 0x00	; 0
    3660:	40 e2       	ldi	r20, 0x20	; 32
    3662:	51 e4       	ldi	r21, 0x41	; 65
    3664:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	bc 01       	movw	r22, r24
    366e:	cd 01       	movw	r24, r26
    3670:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3674:	dc 01       	movw	r26, r24
    3676:	cb 01       	movw	r24, r22
    3678:	8f 8f       	std	Y+31, r24	; 0x1f
		GasReading = ADC_read(ADC0)*4.88;     // --> PA6
    367a:	80 e0       	ldi	r24, 0x00	; 0
    367c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <ADC_read>
    3680:	cc 01       	movw	r24, r24
    3682:	a0 e0       	ldi	r26, 0x00	; 0
    3684:	b0 e0       	ldi	r27, 0x00	; 0
    3686:	bc 01       	movw	r22, r24
    3688:	cd 01       	movw	r24, r26
    368a:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	bc 01       	movw	r22, r24
    3694:	cd 01       	movw	r24, r26
    3696:	26 ef       	ldi	r18, 0xF6	; 246
    3698:	38 e2       	ldi	r19, 0x28	; 40
    369a:	4c e9       	ldi	r20, 0x9C	; 156
    369c:	50 e4       	ldi	r21, 0x40	; 64
    369e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	bc 01       	movw	r22, r24
    36a8:	cd 01       	movw	r24, r26
    36aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	88 a3       	std	Y+32, r24	; 0x20
		GasReading = (int)(GasReading / 10.00);   // To Celsius
    36b4:	88 a1       	ldd	r24, Y+32	; 0x20
    36b6:	88 2f       	mov	r24, r24
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	aa 27       	eor	r26, r26
    36bc:	97 fd       	sbrc	r25, 7
    36be:	a0 95       	com	r26
    36c0:	ba 2f       	mov	r27, r26
    36c2:	bc 01       	movw	r22, r24
    36c4:	cd 01       	movw	r24, r26
    36c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    36ca:	dc 01       	movw	r26, r24
    36cc:	cb 01       	movw	r24, r22
    36ce:	bc 01       	movw	r22, r24
    36d0:	cd 01       	movw	r24, r26
    36d2:	20 e0       	ldi	r18, 0x00	; 0
    36d4:	30 e0       	ldi	r19, 0x00	; 0
    36d6:	40 e2       	ldi	r20, 0x20	; 32
    36d8:	51 e4       	ldi	r21, 0x41	; 65
    36da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36de:	dc 01       	movw	r26, r24
    36e0:	cb 01       	movw	r24, r22
    36e2:	bc 01       	movw	r22, r24
    36e4:	cd 01       	movw	r24, r26
    36e6:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    36ea:	dc 01       	movw	r26, r24
    36ec:	cb 01       	movw	r24, r22
    36ee:	88 a3       	std	Y+32, r24	; 0x20
//		Lcd_sendString(message);
//
//		UART_SendString(message);


		UART_SendNum(rainReading);
    36f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    36f2:	88 2f       	mov	r24, r24
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <UART_SendNum>
		UART_SendByte('r');
    36fa:	82 e7       	ldi	r24, 0x72	; 114
    36fc:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <UART_SendByte>
		UART_SendNum(GasReading);
    3700:	88 a1       	ldd	r24, Y+32	; 0x20
    3702:	88 2f       	mov	r24, r24
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 9e 07 	call	0xf3c	; 0xf3c <UART_SendNum>
		UART_SendByte('m');
    370a:	8d e6       	ldi	r24, 0x6D	; 109
    370c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <UART_SendByte>


		LCD_GoTo(0,10);
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	6a e0       	ldi	r22, 0x0A	; 10
    3714:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_GoTo>
 		Lcd_displayNum((int)rainReading);
    3718:	8f 8d       	ldd	r24, Y+31	; 0x1f
    371a:	88 2f       	mov	r24, r24
    371c:	90 e0       	ldi	r25, 0x00	; 0
    371e:	0e 94 cd 14 	call	0x299a	; 0x299a <Lcd_displayNum>
 		LCD_GoTo(1,10);
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	6a e0       	ldi	r22, 0x0A	; 10
    3726:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_GoTo>
 		Lcd_displayNum((int)GasReading);
    372a:	88 a1       	ldd	r24, Y+32	; 0x20
    372c:	88 2f       	mov	r24, r24
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	0e 94 cd 14 	call	0x299a	; 0x299a <Lcd_displayNum>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e8       	ldi	r25, 0x80	; 128
    3738:	ab eb       	ldi	r26, 0xBB	; 187
    373a:	b4 e4       	ldi	r27, 0x44	; 68
    373c:	89 8f       	std	Y+25, r24	; 0x19
    373e:	9a 8f       	std	Y+26, r25	; 0x1a
    3740:	ab 8f       	std	Y+27, r26	; 0x1b
    3742:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3744:	69 8d       	ldd	r22, Y+25	; 0x19
    3746:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    374a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    374c:	20 e0       	ldi	r18, 0x00	; 0
    374e:	30 e0       	ldi	r19, 0x00	; 0
    3750:	4a e7       	ldi	r20, 0x7A	; 122
    3752:	55 e4       	ldi	r21, 0x45	; 69
    3754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3758:	dc 01       	movw	r26, r24
    375a:	cb 01       	movw	r24, r22
    375c:	8d 8b       	std	Y+21, r24	; 0x15
    375e:	9e 8b       	std	Y+22, r25	; 0x16
    3760:	af 8b       	std	Y+23, r26	; 0x17
    3762:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3764:	6d 89       	ldd	r22, Y+21	; 0x15
    3766:	7e 89       	ldd	r23, Y+22	; 0x16
    3768:	8f 89       	ldd	r24, Y+23	; 0x17
    376a:	98 8d       	ldd	r25, Y+24	; 0x18
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e8       	ldi	r20, 0x80	; 128
    3772:	5f e3       	ldi	r21, 0x3F	; 63
    3774:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3778:	88 23       	and	r24, r24
    377a:	2c f4       	brge	.+10     	; 0x3786 <main+0x1d4>
		__ticks = 1;
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	9c 8b       	std	Y+20, r25	; 0x14
    3782:	8b 8b       	std	Y+19, r24	; 0x13
    3784:	3f c0       	rjmp	.+126    	; 0x3804 <main+0x252>
	else if (__tmp > 65535)
    3786:	6d 89       	ldd	r22, Y+21	; 0x15
    3788:	7e 89       	ldd	r23, Y+22	; 0x16
    378a:	8f 89       	ldd	r24, Y+23	; 0x17
    378c:	98 8d       	ldd	r25, Y+24	; 0x18
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	3f ef       	ldi	r19, 0xFF	; 255
    3792:	4f e7       	ldi	r20, 0x7F	; 127
    3794:	57 e4       	ldi	r21, 0x47	; 71
    3796:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    379a:	18 16       	cp	r1, r24
    379c:	4c f5       	brge	.+82     	; 0x37f0 <main+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    379e:	69 8d       	ldd	r22, Y+25	; 0x19
    37a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    37a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    37a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    37a6:	20 e0       	ldi	r18, 0x00	; 0
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	40 e2       	ldi	r20, 0x20	; 32
    37ac:	51 e4       	ldi	r21, 0x41	; 65
    37ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	bc 01       	movw	r22, r24
    37b8:	cd 01       	movw	r24, r26
    37ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37be:	dc 01       	movw	r26, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	9c 8b       	std	Y+20, r25	; 0x14
    37c4:	8b 8b       	std	Y+19, r24	; 0x13
    37c6:	0f c0       	rjmp	.+30     	; 0x37e6 <main+0x234>
    37c8:	80 e9       	ldi	r24, 0x90	; 144
    37ca:	91 e0       	ldi	r25, 0x01	; 1
    37cc:	9a 8b       	std	Y+18, r25	; 0x12
    37ce:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37d0:	89 89       	ldd	r24, Y+17	; 0x11
    37d2:	9a 89       	ldd	r25, Y+18	; 0x12
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	f1 f7       	brne	.-4      	; 0x37d4 <main+0x222>
    37d8:	9a 8b       	std	Y+18, r25	; 0x12
    37da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37dc:	8b 89       	ldd	r24, Y+19	; 0x13
    37de:	9c 89       	ldd	r25, Y+20	; 0x14
    37e0:	01 97       	sbiw	r24, 0x01	; 1
    37e2:	9c 8b       	std	Y+20, r25	; 0x14
    37e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37e6:	8b 89       	ldd	r24, Y+19	; 0x13
    37e8:	9c 89       	ldd	r25, Y+20	; 0x14
    37ea:	00 97       	sbiw	r24, 0x00	; 0
    37ec:	69 f7       	brne	.-38     	; 0x37c8 <main+0x216>
    37ee:	14 c0       	rjmp	.+40     	; 0x3818 <main+0x266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37f0:	6d 89       	ldd	r22, Y+21	; 0x15
    37f2:	7e 89       	ldd	r23, Y+22	; 0x16
    37f4:	8f 89       	ldd	r24, Y+23	; 0x17
    37f6:	98 8d       	ldd	r25, Y+24	; 0x18
    37f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37fc:	dc 01       	movw	r26, r24
    37fe:	cb 01       	movw	r24, r22
    3800:	9c 8b       	std	Y+20, r25	; 0x14
    3802:	8b 8b       	std	Y+19, r24	; 0x13
    3804:	8b 89       	ldd	r24, Y+19	; 0x13
    3806:	9c 89       	ldd	r25, Y+20	; 0x14
    3808:	98 8b       	std	Y+16, r25	; 0x10
    380a:	8f 87       	std	Y+15, r24	; 0x0f
    380c:	8f 85       	ldd	r24, Y+15	; 0x0f
    380e:	98 89       	ldd	r25, Y+16	; 0x10
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	f1 f7       	brne	.-4      	; 0x3810 <main+0x25e>
    3814:	98 8b       	std	Y+16, r25	; 0x10
    3816:	8f 87       	std	Y+15, r24	; 0x0f
 		_delay_ms(1500);
//



 		lcd_clear();
    3818:	0e 94 22 11 	call	0x2244	; 0x2244 <lcd_clear>
 		Lcd_sendString("Rain=");
    381c:	8e e6       	ldi	r24, 0x6E	; 110
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>
 		LCD_GoTo(1,0);
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	60 e0       	ldi	r22, 0x00	; 0
    3828:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <LCD_GoTo>
 		Lcd_sendString("Gas=");
    382c:	84 e7       	ldi	r24, 0x74	; 116
    382e:	90 e0       	ldi	r25, 0x00	; 0
    3830:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <Lcd_sendString>
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	aa ef       	ldi	r26, 0xFA	; 250
    383a:	b3 e4       	ldi	r27, 0x43	; 67
    383c:	8b 87       	std	Y+11, r24	; 0x0b
    383e:	9c 87       	std	Y+12, r25	; 0x0c
    3840:	ad 87       	std	Y+13, r26	; 0x0d
    3842:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3844:	6b 85       	ldd	r22, Y+11	; 0x0b
    3846:	7c 85       	ldd	r23, Y+12	; 0x0c
    3848:	8d 85       	ldd	r24, Y+13	; 0x0d
    384a:	9e 85       	ldd	r25, Y+14	; 0x0e
    384c:	20 e0       	ldi	r18, 0x00	; 0
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	4a e7       	ldi	r20, 0x7A	; 122
    3852:	55 e4       	ldi	r21, 0x45	; 69
    3854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	8f 83       	std	Y+7, r24	; 0x07
    385e:	98 87       	std	Y+8, r25	; 0x08
    3860:	a9 87       	std	Y+9, r26	; 0x09
    3862:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3864:	6f 81       	ldd	r22, Y+7	; 0x07
    3866:	78 85       	ldd	r23, Y+8	; 0x08
    3868:	89 85       	ldd	r24, Y+9	; 0x09
    386a:	9a 85       	ldd	r25, Y+10	; 0x0a
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 e8       	ldi	r20, 0x80	; 128
    3872:	5f e3       	ldi	r21, 0x3F	; 63
    3874:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3878:	88 23       	and	r24, r24
    387a:	2c f4       	brge	.+10     	; 0x3886 <main+0x2d4>
		__ticks = 1;
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	9e 83       	std	Y+6, r25	; 0x06
    3882:	8d 83       	std	Y+5, r24	; 0x05
    3884:	3f c0       	rjmp	.+126    	; 0x3904 <main+0x352>
	else if (__tmp > 65535)
    3886:	6f 81       	ldd	r22, Y+7	; 0x07
    3888:	78 85       	ldd	r23, Y+8	; 0x08
    388a:	89 85       	ldd	r24, Y+9	; 0x09
    388c:	9a 85       	ldd	r25, Y+10	; 0x0a
    388e:	20 e0       	ldi	r18, 0x00	; 0
    3890:	3f ef       	ldi	r19, 0xFF	; 255
    3892:	4f e7       	ldi	r20, 0x7F	; 127
    3894:	57 e4       	ldi	r21, 0x47	; 71
    3896:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    389a:	18 16       	cp	r1, r24
    389c:	4c f5       	brge	.+82     	; 0x38f0 <main+0x33e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    389e:	6b 85       	ldd	r22, Y+11	; 0x0b
    38a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a6:	20 e0       	ldi	r18, 0x00	; 0
    38a8:	30 e0       	ldi	r19, 0x00	; 0
    38aa:	40 e2       	ldi	r20, 0x20	; 32
    38ac:	51 e4       	ldi	r21, 0x41	; 65
    38ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	bc 01       	movw	r22, r24
    38b8:	cd 01       	movw	r24, r26
    38ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38be:	dc 01       	movw	r26, r24
    38c0:	cb 01       	movw	r24, r22
    38c2:	9e 83       	std	Y+6, r25	; 0x06
    38c4:	8d 83       	std	Y+5, r24	; 0x05
    38c6:	0f c0       	rjmp	.+30     	; 0x38e6 <main+0x334>
    38c8:	80 e9       	ldi	r24, 0x90	; 144
    38ca:	91 e0       	ldi	r25, 0x01	; 1
    38cc:	9c 83       	std	Y+4, r25	; 0x04
    38ce:	8b 83       	std	Y+3, r24	; 0x03
    38d0:	8b 81       	ldd	r24, Y+3	; 0x03
    38d2:	9c 81       	ldd	r25, Y+4	; 0x04
    38d4:	01 97       	sbiw	r24, 0x01	; 1
    38d6:	f1 f7       	brne	.-4      	; 0x38d4 <main+0x322>
    38d8:	9c 83       	std	Y+4, r25	; 0x04
    38da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38dc:	8d 81       	ldd	r24, Y+5	; 0x05
    38de:	9e 81       	ldd	r25, Y+6	; 0x06
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	9e 83       	std	Y+6, r25	; 0x06
    38e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38e6:	8d 81       	ldd	r24, Y+5	; 0x05
    38e8:	9e 81       	ldd	r25, Y+6	; 0x06
    38ea:	00 97       	sbiw	r24, 0x00	; 0
    38ec:	69 f7       	brne	.-38     	; 0x38c8 <main+0x316>
    38ee:	8a ce       	rjmp	.-748    	; 0x3604 <main+0x52>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f0:	6f 81       	ldd	r22, Y+7	; 0x07
    38f2:	78 85       	ldd	r23, Y+8	; 0x08
    38f4:	89 85       	ldd	r24, Y+9	; 0x09
    38f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    38f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	9e 83       	std	Y+6, r25	; 0x06
    3902:	8d 83       	std	Y+5, r24	; 0x05
    3904:	8d 81       	ldd	r24, Y+5	; 0x05
    3906:	9e 81       	ldd	r25, Y+6	; 0x06
    3908:	9a 83       	std	Y+2, r25	; 0x02
    390a:	89 83       	std	Y+1, r24	; 0x01
    390c:	89 81       	ldd	r24, Y+1	; 0x01
    390e:	9a 81       	ldd	r25, Y+2	; 0x02
    3910:	01 97       	sbiw	r24, 0x01	; 1
    3912:	f1 f7       	brne	.-4      	; 0x3910 <main+0x35e>
    3914:	9a 83       	std	Y+2, r25	; 0x02
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	75 ce       	rjmp	.-790    	; 0x3604 <main+0x52>

0000391a <__udivmodhi4>:
    391a:	aa 1b       	sub	r26, r26
    391c:	bb 1b       	sub	r27, r27
    391e:	51 e1       	ldi	r21, 0x11	; 17
    3920:	07 c0       	rjmp	.+14     	; 0x3930 <__udivmodhi4_ep>

00003922 <__udivmodhi4_loop>:
    3922:	aa 1f       	adc	r26, r26
    3924:	bb 1f       	adc	r27, r27
    3926:	a6 17       	cp	r26, r22
    3928:	b7 07       	cpc	r27, r23
    392a:	10 f0       	brcs	.+4      	; 0x3930 <__udivmodhi4_ep>
    392c:	a6 1b       	sub	r26, r22
    392e:	b7 0b       	sbc	r27, r23

00003930 <__udivmodhi4_ep>:
    3930:	88 1f       	adc	r24, r24
    3932:	99 1f       	adc	r25, r25
    3934:	5a 95       	dec	r21
    3936:	a9 f7       	brne	.-22     	; 0x3922 <__udivmodhi4_loop>
    3938:	80 95       	com	r24
    393a:	90 95       	com	r25
    393c:	bc 01       	movw	r22, r24
    393e:	cd 01       	movw	r24, r26
    3940:	08 95       	ret

00003942 <__udivmodsi4>:
    3942:	a1 e2       	ldi	r26, 0x21	; 33
    3944:	1a 2e       	mov	r1, r26
    3946:	aa 1b       	sub	r26, r26
    3948:	bb 1b       	sub	r27, r27
    394a:	fd 01       	movw	r30, r26
    394c:	0d c0       	rjmp	.+26     	; 0x3968 <__udivmodsi4_ep>

0000394e <__udivmodsi4_loop>:
    394e:	aa 1f       	adc	r26, r26
    3950:	bb 1f       	adc	r27, r27
    3952:	ee 1f       	adc	r30, r30
    3954:	ff 1f       	adc	r31, r31
    3956:	a2 17       	cp	r26, r18
    3958:	b3 07       	cpc	r27, r19
    395a:	e4 07       	cpc	r30, r20
    395c:	f5 07       	cpc	r31, r21
    395e:	20 f0       	brcs	.+8      	; 0x3968 <__udivmodsi4_ep>
    3960:	a2 1b       	sub	r26, r18
    3962:	b3 0b       	sbc	r27, r19
    3964:	e4 0b       	sbc	r30, r20
    3966:	f5 0b       	sbc	r31, r21

00003968 <__udivmodsi4_ep>:
    3968:	66 1f       	adc	r22, r22
    396a:	77 1f       	adc	r23, r23
    396c:	88 1f       	adc	r24, r24
    396e:	99 1f       	adc	r25, r25
    3970:	1a 94       	dec	r1
    3972:	69 f7       	brne	.-38     	; 0x394e <__udivmodsi4_loop>
    3974:	60 95       	com	r22
    3976:	70 95       	com	r23
    3978:	80 95       	com	r24
    397a:	90 95       	com	r25
    397c:	9b 01       	movw	r18, r22
    397e:	ac 01       	movw	r20, r24
    3980:	bd 01       	movw	r22, r26
    3982:	cf 01       	movw	r24, r30
    3984:	08 95       	ret

00003986 <__prologue_saves__>:
    3986:	2f 92       	push	r2
    3988:	3f 92       	push	r3
    398a:	4f 92       	push	r4
    398c:	5f 92       	push	r5
    398e:	6f 92       	push	r6
    3990:	7f 92       	push	r7
    3992:	8f 92       	push	r8
    3994:	9f 92       	push	r9
    3996:	af 92       	push	r10
    3998:	bf 92       	push	r11
    399a:	cf 92       	push	r12
    399c:	df 92       	push	r13
    399e:	ef 92       	push	r14
    39a0:	ff 92       	push	r15
    39a2:	0f 93       	push	r16
    39a4:	1f 93       	push	r17
    39a6:	cf 93       	push	r28
    39a8:	df 93       	push	r29
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	ca 1b       	sub	r28, r26
    39b0:	db 0b       	sbc	r29, r27
    39b2:	0f b6       	in	r0, 0x3f	; 63
    39b4:	f8 94       	cli
    39b6:	de bf       	out	0x3e, r29	; 62
    39b8:	0f be       	out	0x3f, r0	; 63
    39ba:	cd bf       	out	0x3d, r28	; 61
    39bc:	09 94       	ijmp

000039be <__epilogue_restores__>:
    39be:	2a 88       	ldd	r2, Y+18	; 0x12
    39c0:	39 88       	ldd	r3, Y+17	; 0x11
    39c2:	48 88       	ldd	r4, Y+16	; 0x10
    39c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    39c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    39c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    39ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    39cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    39ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    39d0:	b9 84       	ldd	r11, Y+9	; 0x09
    39d2:	c8 84       	ldd	r12, Y+8	; 0x08
    39d4:	df 80       	ldd	r13, Y+7	; 0x07
    39d6:	ee 80       	ldd	r14, Y+6	; 0x06
    39d8:	fd 80       	ldd	r15, Y+5	; 0x05
    39da:	0c 81       	ldd	r16, Y+4	; 0x04
    39dc:	1b 81       	ldd	r17, Y+3	; 0x03
    39de:	aa 81       	ldd	r26, Y+2	; 0x02
    39e0:	b9 81       	ldd	r27, Y+1	; 0x01
    39e2:	ce 0f       	add	r28, r30
    39e4:	d1 1d       	adc	r29, r1
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	ed 01       	movw	r28, r26
    39f2:	08 95       	ret

000039f4 <itoa>:
    39f4:	fb 01       	movw	r30, r22
    39f6:	9f 01       	movw	r18, r30
    39f8:	e8 94       	clt
    39fa:	42 30       	cpi	r20, 0x02	; 2
    39fc:	c4 f0       	brlt	.+48     	; 0x3a2e <itoa+0x3a>
    39fe:	45 32       	cpi	r20, 0x25	; 37
    3a00:	b4 f4       	brge	.+44     	; 0x3a2e <itoa+0x3a>
    3a02:	4a 30       	cpi	r20, 0x0A	; 10
    3a04:	29 f4       	brne	.+10     	; 0x3a10 <itoa+0x1c>
    3a06:	97 fb       	bst	r25, 7
    3a08:	1e f4       	brtc	.+6      	; 0x3a10 <itoa+0x1c>
    3a0a:	90 95       	com	r25
    3a0c:	81 95       	neg	r24
    3a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a10:	64 2f       	mov	r22, r20
    3a12:	77 27       	eor	r23, r23
    3a14:	0e 94 8d 1c 	call	0x391a	; 0x391a <__udivmodhi4>
    3a18:	80 5d       	subi	r24, 0xD0	; 208
    3a1a:	8a 33       	cpi	r24, 0x3A	; 58
    3a1c:	0c f0       	brlt	.+2      	; 0x3a20 <itoa+0x2c>
    3a1e:	89 5d       	subi	r24, 0xD9	; 217
    3a20:	81 93       	st	Z+, r24
    3a22:	cb 01       	movw	r24, r22
    3a24:	00 97       	sbiw	r24, 0x00	; 0
    3a26:	a1 f7       	brne	.-24     	; 0x3a10 <itoa+0x1c>
    3a28:	16 f4       	brtc	.+4      	; 0x3a2e <itoa+0x3a>
    3a2a:	5d e2       	ldi	r21, 0x2D	; 45
    3a2c:	51 93       	st	Z+, r21
    3a2e:	10 82       	st	Z, r1
    3a30:	c9 01       	movw	r24, r18
    3a32:	0c 94 75 1d 	jmp	0x3aea	; 0x3aea <strrev>

00003a36 <ceil>:
    3a36:	3b d0       	rcall	.+118    	; 0x3aae <__fp_trunc>
    3a38:	80 f0       	brcs	.+32     	; 0x3a5a <ceil+0x24>
    3a3a:	9f 37       	cpi	r25, 0x7F	; 127
    3a3c:	40 f4       	brcc	.+16     	; 0x3a4e <ceil+0x18>
    3a3e:	91 11       	cpse	r25, r1
    3a40:	0e f4       	brtc	.+2      	; 0x3a44 <ceil+0xe>
    3a42:	4d c0       	rjmp	.+154    	; 0x3ade <__fp_szero>
    3a44:	60 e0       	ldi	r22, 0x00	; 0
    3a46:	70 e0       	ldi	r23, 0x00	; 0
    3a48:	80 e8       	ldi	r24, 0x80	; 128
    3a4a:	9f e3       	ldi	r25, 0x3F	; 63
    3a4c:	08 95       	ret
    3a4e:	26 f0       	brts	.+8      	; 0x3a58 <ceil+0x22>
    3a50:	1b 16       	cp	r1, r27
    3a52:	61 1d       	adc	r22, r1
    3a54:	71 1d       	adc	r23, r1
    3a56:	81 1d       	adc	r24, r1
    3a58:	01 c0       	rjmp	.+2      	; 0x3a5c <__fp_mintl>
    3a5a:	1b c0       	rjmp	.+54     	; 0x3a92 <__fp_mpack>

00003a5c <__fp_mintl>:
    3a5c:	88 23       	and	r24, r24
    3a5e:	71 f4       	brne	.+28     	; 0x3a7c <__fp_mintl+0x20>
    3a60:	77 23       	and	r23, r23
    3a62:	21 f0       	breq	.+8      	; 0x3a6c <__fp_mintl+0x10>
    3a64:	98 50       	subi	r25, 0x08	; 8
    3a66:	87 2b       	or	r24, r23
    3a68:	76 2f       	mov	r23, r22
    3a6a:	07 c0       	rjmp	.+14     	; 0x3a7a <__fp_mintl+0x1e>
    3a6c:	66 23       	and	r22, r22
    3a6e:	11 f4       	brne	.+4      	; 0x3a74 <__fp_mintl+0x18>
    3a70:	99 27       	eor	r25, r25
    3a72:	0d c0       	rjmp	.+26     	; 0x3a8e <__fp_mintl+0x32>
    3a74:	90 51       	subi	r25, 0x10	; 16
    3a76:	86 2b       	or	r24, r22
    3a78:	70 e0       	ldi	r23, 0x00	; 0
    3a7a:	60 e0       	ldi	r22, 0x00	; 0
    3a7c:	2a f0       	brmi	.+10     	; 0x3a88 <__fp_mintl+0x2c>
    3a7e:	9a 95       	dec	r25
    3a80:	66 0f       	add	r22, r22
    3a82:	77 1f       	adc	r23, r23
    3a84:	88 1f       	adc	r24, r24
    3a86:	da f7       	brpl	.-10     	; 0x3a7e <__fp_mintl+0x22>
    3a88:	88 0f       	add	r24, r24
    3a8a:	96 95       	lsr	r25
    3a8c:	87 95       	ror	r24
    3a8e:	97 f9       	bld	r25, 7
    3a90:	08 95       	ret

00003a92 <__fp_mpack>:
    3a92:	9f 3f       	cpi	r25, 0xFF	; 255
    3a94:	31 f0       	breq	.+12     	; 0x3aa2 <__fp_mpack_finite+0xc>

00003a96 <__fp_mpack_finite>:
    3a96:	91 50       	subi	r25, 0x01	; 1
    3a98:	20 f4       	brcc	.+8      	; 0x3aa2 <__fp_mpack_finite+0xc>
    3a9a:	87 95       	ror	r24
    3a9c:	77 95       	ror	r23
    3a9e:	67 95       	ror	r22
    3aa0:	b7 95       	ror	r27
    3aa2:	88 0f       	add	r24, r24
    3aa4:	91 1d       	adc	r25, r1
    3aa6:	96 95       	lsr	r25
    3aa8:	87 95       	ror	r24
    3aaa:	97 f9       	bld	r25, 7
    3aac:	08 95       	ret

00003aae <__fp_trunc>:
    3aae:	35 d0       	rcall	.+106    	; 0x3b1a <__fp_splitA>
    3ab0:	a0 f0       	brcs	.+40     	; 0x3ada <__fp_trunc+0x2c>
    3ab2:	be e7       	ldi	r27, 0x7E	; 126
    3ab4:	b9 17       	cp	r27, r25
    3ab6:	88 f4       	brcc	.+34     	; 0x3ada <__fp_trunc+0x2c>
    3ab8:	bb 27       	eor	r27, r27
    3aba:	9f 38       	cpi	r25, 0x8F	; 143
    3abc:	60 f4       	brcc	.+24     	; 0x3ad6 <__fp_trunc+0x28>
    3abe:	16 16       	cp	r1, r22
    3ac0:	b1 1d       	adc	r27, r1
    3ac2:	67 2f       	mov	r22, r23
    3ac4:	78 2f       	mov	r23, r24
    3ac6:	88 27       	eor	r24, r24
    3ac8:	98 5f       	subi	r25, 0xF8	; 248
    3aca:	f7 cf       	rjmp	.-18     	; 0x3aba <__fp_trunc+0xc>
    3acc:	86 95       	lsr	r24
    3ace:	77 95       	ror	r23
    3ad0:	67 95       	ror	r22
    3ad2:	b1 1d       	adc	r27, r1
    3ad4:	93 95       	inc	r25
    3ad6:	96 39       	cpi	r25, 0x96	; 150
    3ad8:	c8 f3       	brcs	.-14     	; 0x3acc <__fp_trunc+0x1e>
    3ada:	08 95       	ret

00003adc <__fp_zero>:
    3adc:	e8 94       	clt

00003ade <__fp_szero>:
    3ade:	bb 27       	eor	r27, r27
    3ae0:	66 27       	eor	r22, r22
    3ae2:	77 27       	eor	r23, r23
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	97 f9       	bld	r25, 7
    3ae8:	08 95       	ret

00003aea <strrev>:
    3aea:	dc 01       	movw	r26, r24
    3aec:	fc 01       	movw	r30, r24
    3aee:	67 2f       	mov	r22, r23
    3af0:	71 91       	ld	r23, Z+
    3af2:	77 23       	and	r23, r23
    3af4:	e1 f7       	brne	.-8      	; 0x3aee <strrev+0x4>
    3af6:	32 97       	sbiw	r30, 0x02	; 2
    3af8:	04 c0       	rjmp	.+8      	; 0x3b02 <strrev+0x18>
    3afa:	7c 91       	ld	r23, X
    3afc:	6d 93       	st	X+, r22
    3afe:	70 83       	st	Z, r23
    3b00:	62 91       	ld	r22, -Z
    3b02:	ae 17       	cp	r26, r30
    3b04:	bf 07       	cpc	r27, r31
    3b06:	c8 f3       	brcs	.-14     	; 0x3afa <strrev+0x10>
    3b08:	08 95       	ret

00003b0a <__fp_split3>:
    3b0a:	57 fd       	sbrc	r21, 7
    3b0c:	90 58       	subi	r25, 0x80	; 128
    3b0e:	44 0f       	add	r20, r20
    3b10:	55 1f       	adc	r21, r21
    3b12:	59 f0       	breq	.+22     	; 0x3b2a <__fp_splitA+0x10>
    3b14:	5f 3f       	cpi	r21, 0xFF	; 255
    3b16:	71 f0       	breq	.+28     	; 0x3b34 <__fp_splitA+0x1a>
    3b18:	47 95       	ror	r20

00003b1a <__fp_splitA>:
    3b1a:	88 0f       	add	r24, r24
    3b1c:	97 fb       	bst	r25, 7
    3b1e:	99 1f       	adc	r25, r25
    3b20:	61 f0       	breq	.+24     	; 0x3b3a <__fp_splitA+0x20>
    3b22:	9f 3f       	cpi	r25, 0xFF	; 255
    3b24:	79 f0       	breq	.+30     	; 0x3b44 <__fp_splitA+0x2a>
    3b26:	87 95       	ror	r24
    3b28:	08 95       	ret
    3b2a:	12 16       	cp	r1, r18
    3b2c:	13 06       	cpc	r1, r19
    3b2e:	14 06       	cpc	r1, r20
    3b30:	55 1f       	adc	r21, r21
    3b32:	f2 cf       	rjmp	.-28     	; 0x3b18 <__fp_split3+0xe>
    3b34:	46 95       	lsr	r20
    3b36:	f1 df       	rcall	.-30     	; 0x3b1a <__fp_splitA>
    3b38:	08 c0       	rjmp	.+16     	; 0x3b4a <__fp_splitA+0x30>
    3b3a:	16 16       	cp	r1, r22
    3b3c:	17 06       	cpc	r1, r23
    3b3e:	18 06       	cpc	r1, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	f1 cf       	rjmp	.-30     	; 0x3b26 <__fp_splitA+0xc>
    3b44:	86 95       	lsr	r24
    3b46:	71 05       	cpc	r23, r1
    3b48:	61 05       	cpc	r22, r1
    3b4a:	08 94       	sec
    3b4c:	08 95       	ret

00003b4e <_exit>:
    3b4e:	f8 94       	cli

00003b50 <__stop_program>:
    3b50:	ff cf       	rjmp	.-2      	; 0x3b50 <__stop_program>
